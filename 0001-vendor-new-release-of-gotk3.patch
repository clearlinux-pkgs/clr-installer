From c5a809535ca3a14e6faac1b25a66dde94e05df7e Mon Sep 17 00:00:00 2001
From: Mark D Horn <mark.d.horn@intel.com>
Date: Mon, 28 Jun 2021 13:16:34 -0700
Subject: [PATCH 1/2] vendor: new release of gotk3

To support building under golang 1.16.x gotk3 v0.6.0 required.

Signed-off-by: Mark D Horn <mark.d.horn@intel.com>
---
 go.mod                                        |    2 +-
 go.sum                                        |    2 +
 vendor/github.com/gotk3/gotk3/LICENSE         |    2 +
 .../github.com/gotk3/gotk3/cairo/antialias.go |    6 +-
 vendor/github.com/gotk3/gotk3/cairo/format.go |    2 +-
 vendor/github.com/gotk3/gotk3/cairo/region.go |  381 +++
 .../github.com/gotk3/gotk3/cairo/surface.go   |    6 +-
 vendor/github.com/gotk3/gotk3/gdk/gdk.go      | 1248 ++++----
 vendor/github.com/gotk3/gotk3/gdk/gdk.go.h    |   88 +-
 .../gotk3/gdk/gdk_deprecated_since_3_10.go    |    2 +-
 .../gotk3/gdk/gdk_deprecated_since_3_16.go    |    2 +-
 .../gotk3/gdk/gdk_deprecated_since_3_20.go    |    2 +-
 .../gotk3/gdk/gdk_deprecated_since_3_22.go    |    2 +-
 .../gotk3/gotk3/gdk/gdk_since_3_10.go         |   43 +
 .../gotk3/gotk3/gdk/gdk_since_3_16.go.h       |    6 +-
 .../gotk3/gotk3/gdk/gdk_since_3_18.go         |   32 +
 .../gotk3/gotk3/gdk/gdk_since_3_20.go         |   61 +-
 .../gotk3/gotk3/gdk/gdk_since_3_20.go.h       |   21 +
 .../gotk3/gotk3/gdk/gdk_since_3_22.go         |   84 +-
 .../gotk3/gotk3/gdk/gdk_since_3_22.go.h       |    6 +-
 .../gotk3/gotk3/gdk/gdk_since_3_8.go          |   23 +-
 .../gotk3/gotk3/gdk/gdk_since_3_8.go.h        |   12 +-
 vendor/github.com/gotk3/gotk3/gdk/pixbuf.go   |  668 +++++
 vendor/github.com/gotk3/gotk3/gdk/pixbuf.go.h |   26 +
 .../gotk3/gdk/pixbuf_deprecated_since_2_32.go |   16 +
 .../gotk3/gotk3/gdk/pixbuf_since_2_12.go      |   33 +
 .../gotk3/gotk3/gdk/pixbuf_since_2_14.go      |   23 +
 ...k_pixbuf_format.go => pixbuf_since_2_2.go} |   72 +-
 .../gotk3/gotk3/gdk/pixbuf_since_2_22.go      |   18 +
 .../gotk3/gotk3/gdk/pixbuf_since_2_24.go      |   23 +
 .../gotk3/gotk3/gdk/pixbuf_since_2_26.go      |   25 +
 .../gotk3/gotk3/gdk/pixbuf_since_2_32.go      |   68 +
 .../gotk3/gotk3/gdk/pixbuf_since_2_36.go      |   23 +
 .../gotk3/gotk3/gdk/pixbuf_since_2_4.go       |  143 +
 .../gotk3/gotk3/gdk/pixbuf_since_2_4.go.h     |   34 +
 .../gotk3/gotk3/gdk/pixbuf_since_2_6.go       |   74 +
 vendor/github.com/gotk3/gotk3/gdk/testing.go  |    2 +-
 .../gotk3/gotk3/glib/application.go           |   23 -
 vendor/github.com/gotk3/gotk3/glib/cast.go    |    7 +
 vendor/github.com/gotk3/gotk3/glib/connect.go |  194 +-
 vendor/github.com/gotk3/gotk3/glib/gaction.go |   28 +-
 .../gotk3/gotk3/glib/gasyncresult.go          |   73 +
 .../gotk3/gotk3/glib/gcancellable.go          |   83 +
 vendor/github.com/gotk3/gotk3/glib/gfile.go   |  355 ++-
 vendor/github.com/gotk3/gotk3/glib/gfile.go.h |   13 +
 vendor/github.com/gotk3/gotk3/glib/gicon.go   |  164 +-
 .../github.com/gotk3/gotk3/glib/giostream.go  |  437 +++
 .../gotk3/gotk3/glib/giostream.go.h           |   14 +
 vendor/github.com/gotk3/gotk3/glib/glib.go    |  634 ++--
 vendor/github.com/gotk3/gotk3/glib/glib.go.h  |  253 +-
 .../gotk3/gotk3/glib/glib_export.go           |   27 +
 .../gotk3/gotk3/glib/glib_since_2_42.go       |   50 +
 .../gotk3/gotk3/glib/glib_since_2_44.go       |   30 +
 .../gotk3/gotk3/glib/glib_since_2_44.go.h     |   16 +
 .../gotk3/gotk3/glib/glib_since_2_46.go       |   23 +
 .../gotk3/gotk3/glib/glib_since_2_46.go.h     |   10 +
 .../gotk3/gotk3/glib/glib_since_2_64.go       |   20 +
 .../github.com/gotk3/gotk3/glib/glistmodel.go |  164 ++
 .../gotk3/gotk3/glib/gmain_context.go         |   15 +
 .../gotk3/gotk3/glib/gpermission.go           |  126 +
 .../gotk3/gotk3/glib/gpermission.go.h         |   24 +
 vendor/github.com/gotk3/gotk3/glib/gsource.go |    5 +
 .../github.com/gotk3/gotk3/glib/gvariant.go   |  275 +-
 .../github.com/gotk3/gotk3/glib/gvariant.go.h |   30 +-
 .../gotk3/gotk3/glib/gvarianttype.go          |   87 +
 .../gotk3/gotk3/glib/gvarianttype.go.h        |   58 +-
 vendor/github.com/gotk3/gotk3/glib/list.go    |   34 +-
 vendor/github.com/gotk3/gotk3/glib/menu.go    |  149 +-
 .../gotk3/gotk3/glib/notifications.go         |   19 +-
 vendor/github.com/gotk3/gotk3/glib/quark.go   |   16 +
 vendor/github.com/gotk3/gotk3/glib/slist.go   |   60 +-
 .../github.com/gotk3/gotk3/gtk/aboutdialog.go |   10 +-
 vendor/github.com/gotk3/gotk3/gtk/accel.go    |   81 +-
 .../github.com/gotk3/gotk3/gtk/actionable.go  |    4 +
 .../gotk3/gotk3/gtk/actionable.go.h           |    6 +-
 .../gotk3/gotk3/gtk/actionbar_since_3_12.go   |   10 +-
 .../gotk3/gotk3/gtk/actionbar_since_3_12.go.h |    6 +-
 .../github.com/gotk3/gotk3/gtk/app_chooser.go |   60 +-
 .../github.com/gotk3/gotk3/gtk/application.go |   28 +-
 .../gotk3/gotk3/gtk/application_since_3_12.go |    4 +-
 .../gotk3/gotk3/gtk/application_since_3_14.go |    2 +-
 .../gotk3/gotk3/gtk/application_window.go     |    4 +
 .../gotk3/gotk3/gtk/box_since_3_12.go         |   11 +-
 .../github.com/gotk3/gotk3/gtk/button_box.go  |    7 +-
 .../github.com/gotk3/gotk3/gtk/cell_area.go   |  580 ++++
 .../gotk3/gotk3/gtk/cell_area_since_3_14.go   |   23 +
 .../gotk3/gotk3/gtk/color_chooser.go          |   17 +-
 .../github.com/gotk3/gotk3/gtk/combo_box.go   |   25 +-
 vendor/github.com/gotk3/gotk3/gtk/fixed.go    |    4 +
 vendor/github.com/gotk3/gotk3/gtk/fixed.go.h  |    6 +-
 .../gotk3/gotk3/gtk/font_chooser.go           |    8 +
 vendor/github.com/gotk3/gotk3/gtk/gdk.go      |    2 +-
 vendor/github.com/gotk3/gotk3/gtk/glarea.go   |   18 +-
 .../gotk3/gotk3/gtk/glarea_since_3_22.go      |    1 -
 vendor/github.com/gotk3/gotk3/gtk/glib.go     |   20 +
 vendor/github.com/gotk3/gotk3/gtk/gtk.go      | 2584 +++++++++++++----
 vendor/github.com/gotk3/gotk3/gtk/gtk.go.h    | 1095 +++----
 .../gotk3/gtk/gtk_deprecated_since_3_10.go    |    2 +-
 .../gotk3/gtk/gtk_deprecated_since_3_12.go    |   15 +-
 .../gotk3/gtk/gtk_deprecated_since_3_14.go    |   20 +-
 .../gotk3/gtk/gtk_deprecated_since_3_14.go.h  |   44 +-
 .../gotk3/gtk/gtk_deprecated_since_3_16.go    |    2 +-
 .../gotk3/gtk/gtk_deprecated_since_3_18.go    |    2 +-
 .../gotk3/gtk/gtk_deprecated_since_3_20.go    |   38 +-
 .../gotk3/gtk/gtk_deprecated_since_3_22.go    |    6 +-
 .../gotk3/gtk/gtk_deprecated_since_3_24.go    |   23 +-
 .../gotk3/gtk/gtk_deprecated_since_3_8.go     |    2 +-
 .../github.com/gotk3/gotk3/gtk/gtk_export.go  |  151 +-
 .../gotk3/gotk3/gtk/gtk_export_since_3_10.go  |   39 +-
 .../gotk3/gotk3/gtk/gtk_export_since_3_14.go  |   12 +-
 .../gotk3/gotk3/gtk/gtk_export_since_3_16.go  |   14 +
 .../gotk3/gotk3/gtk/gtk_since_3_10.go         |  266 +-
 .../gotk3/gotk3/gtk/gtk_since_3_10.go.h       |   78 +-
 .../gotk3/gotk3/gtk/gtk_since_3_12.go         |   58 +-
 .../gotk3/gotk3/gtk/gtk_since_3_12.go.h       |   24 +-
 .../gotk3/gotk3/gtk/gtk_since_3_14.go         |   56 +-
 .../gotk3/gotk3/gtk/gtk_since_3_14.go.h       |   11 +-
 .../gotk3/gotk3/gtk/gtk_since_3_16.go         |  165 +-
 .../gotk3/gotk3/gtk/gtk_since_3_16.go.h       |   38 +-
 .../gotk3/gtk/gtk_since_3_16_glib_2_44.go     |   25 +
 .../gotk3/gotk3/gtk/gtk_since_3_18.go         |   45 +-
 .../gotk3/gotk3/gtk/gtk_since_3_20.go         |   48 +-
 .../gotk3/gotk3/gtk/gtk_since_3_20.go.h       |   18 +-
 .../gotk3/gotk3/gtk/gtk_since_3_22.go         |   52 +-
 .../gotk3/gotk3/gtk/gtk_since_3_24.go         |   14 +
 .../gotk3/gotk3/gtk/gtk_since_3_8.go          |   26 -
 .../github.com/gotk3/gotk3/gtk/icon_view.go   |    9 +-
 vendor/github.com/gotk3/gotk3/gtk/info_bar.go |    9 +-
 vendor/github.com/gotk3/gotk3/gtk/label.go    |   11 +-
 .../github.com/gotk3/gotk3/gtk/level_bar.go   |    4 +
 vendor/github.com/gotk3/gotk3/gtk/menu.go     |  102 +-
 .../github.com/gotk3/gotk3/gtk/menu_shell.go  |   71 +-
 .../gotk3/gotk3/gtk/menu_since_3_22.go        |   29 +-
 vendor/github.com/gotk3/gotk3/gtk/print.go    |  106 +-
 vendor/github.com/gotk3/gotk3/gtk/print.go.h  |   23 +
 .../gotk3/gotk3/gtk/print_export.go           |   23 +
 vendor/github.com/gotk3/gotk3/gtk/settings.go |    4 +
 .../github.com/gotk3/gotk3/gtk/settings.go.h  |    6 +-
 .../gotk3/gtk/shortcutswindow_since_3_20.go   |   16 +
 .../gotk3/gtk/shortcutswindow_since_3_20.go.h |   24 +-
 .../github.com/gotk3/gotk3/gtk/socket_plug.go |   11 +-
 .../gotk3/gotk3/gtk/socket_plug.go.h          |   18 +-
 .../gotk3/gotk3/gtk/stack_since_3_12.go       |    8 +-
 .../gotk3/gtk/stackswitcher_since_3_10.go     |    4 +
 vendor/github.com/gotk3/gotk3/gtk/style.go    |    4 +
 vendor/github.com/gotk3/gotk3/gtk/testing.go  |    1 -
 .../gtk/testing_deprecated_since_3_20.go      |    5 +-
 .../gotk3/gotk3/gtk/text_child_anchor.go      |   68 +-
 .../gotk3/gotk3/gtk/text_child_anchor.go.h    |   23 +
 .../github.com/gotk3/gotk3/gtk/text_mark.go   |   82 +-
 .../github.com/gotk3/gotk3/gtk/text_view.go   |   48 +-
 vendor/github.com/gotk3/gotk3/gtk/tooltip.go  |    4 +
 .../github.com/gotk3/gotk3/gtk/tree_view.go   |  130 +-
 .../gotk3/gotk3/gtk/tree_view_column.go       |   26 +-
 vendor/github.com/gotk3/gotk3/gtk/widget.go   |  215 +-
 .../gotk3/gtk/widget_export_since_3_8.go      |   15 +-
 .../gotk3/gotk3/gtk/widget_since_3_10.go      |   24 +-
 .../gotk3/gotk3/gtk/widget_since_3_8.go       |   21 +-
 .../gotk3/gotk3/gtk/widget_since_3_8.go.h     |   13 +-
 vendor/github.com/gotk3/gotk3/gtk/window.go   |   87 +-
 .../gotk3/gotk3/gtk/window_since_3_16.go      |   13 +-
 .../gotk3/gotk3/gtk/window_since_3_18.go      |    2 +-
 .../github.com/gotk3/gotk3/gtk/windowgroup.go |   17 +-
 .../gotk3/gotk3/internal/callback/callback.go |   37 +
 .../gotk3/gotk3/internal/closure/closure.go   |   79 +
 .../gotk3/internal/closure/closure_go_1_14.go |   14 +
 .../gotk3/internal/closure/closure_go_1_15.go |   13 +
 .../gotk3/gotk3/internal/closure/funcstack.go |  135 +
 .../gotk3/gotk3/internal/slab/slab.go         |   52 +
 .../gotk3/gotk3/pango/fontconfig.go.h         |    6 +-
 .../gotk3/gotk3/pango/pango-attributes.go     |   11 +
 .../gotk3/gotk3/pango/pango-attributes.go.h   |    6 +-
 .../pango/pango-attributes_since_1_44.go      |   18 +
 .../gotk3/gotk3/pango/pango-font.go           |    8 +
 .../gotk3/gotk3/pango/pango-layout.go         |  258 +-
 .../gotk3/gotk3/pango/pango-layout.go.h       |    6 +-
 vendor/github.com/gotk3/gotk3/pango/pango.go  |    7 +
 .../github.com/gotk3/gotk3/pango/pango.go.h   |   18 +-
 vendor/modules.txt                            |    5 +-
 179 files changed, 10749 insertions(+), 3907 deletions(-)
 create mode 100644 vendor/github.com/gotk3/gotk3/cairo/region.go
 create mode 100644 vendor/github.com/gotk3/gotk3/gdk/gdk_since_3_18.go
 create mode 100644 vendor/github.com/gotk3/gotk3/gdk/gdk_since_3_20.go.h
 create mode 100644 vendor/github.com/gotk3/gotk3/gdk/pixbuf.go
 create mode 100644 vendor/github.com/gotk3/gotk3/gdk/pixbuf.go.h
 create mode 100644 vendor/github.com/gotk3/gotk3/gdk/pixbuf_deprecated_since_2_32.go
 create mode 100644 vendor/github.com/gotk3/gotk3/gdk/pixbuf_since_2_12.go
 create mode 100644 vendor/github.com/gotk3/gotk3/gdk/pixbuf_since_2_14.go
 rename vendor/github.com/gotk3/gotk3/gdk/{gdk_pixbuf_format.go => pixbuf_since_2_2.go} (67%)
 create mode 100644 vendor/github.com/gotk3/gotk3/gdk/pixbuf_since_2_22.go
 create mode 100644 vendor/github.com/gotk3/gotk3/gdk/pixbuf_since_2_24.go
 create mode 100644 vendor/github.com/gotk3/gotk3/gdk/pixbuf_since_2_26.go
 create mode 100644 vendor/github.com/gotk3/gotk3/gdk/pixbuf_since_2_32.go
 create mode 100644 vendor/github.com/gotk3/gotk3/gdk/pixbuf_since_2_36.go
 create mode 100644 vendor/github.com/gotk3/gotk3/gdk/pixbuf_since_2_4.go
 create mode 100644 vendor/github.com/gotk3/gotk3/gdk/pixbuf_since_2_4.go.h
 create mode 100644 vendor/github.com/gotk3/gotk3/gdk/pixbuf_since_2_6.go
 create mode 100644 vendor/github.com/gotk3/gotk3/glib/cast.go
 create mode 100644 vendor/github.com/gotk3/gotk3/glib/gasyncresult.go
 create mode 100644 vendor/github.com/gotk3/gotk3/glib/gcancellable.go
 create mode 100644 vendor/github.com/gotk3/gotk3/glib/gfile.go.h
 create mode 100644 vendor/github.com/gotk3/gotk3/glib/giostream.go
 create mode 100644 vendor/github.com/gotk3/gotk3/glib/giostream.go.h
 create mode 100644 vendor/github.com/gotk3/gotk3/glib/glib_export.go
 create mode 100644 vendor/github.com/gotk3/gotk3/glib/glib_since_2_42.go
 create mode 100644 vendor/github.com/gotk3/gotk3/glib/glib_since_2_44.go
 create mode 100644 vendor/github.com/gotk3/gotk3/glib/glib_since_2_44.go.h
 create mode 100644 vendor/github.com/gotk3/gotk3/glib/glib_since_2_46.go
 create mode 100644 vendor/github.com/gotk3/gotk3/glib/glib_since_2_46.go.h
 create mode 100644 vendor/github.com/gotk3/gotk3/glib/glib_since_2_64.go
 create mode 100644 vendor/github.com/gotk3/gotk3/glib/glistmodel.go
 create mode 100644 vendor/github.com/gotk3/gotk3/glib/gpermission.go
 create mode 100644 vendor/github.com/gotk3/gotk3/glib/gpermission.go.h
 create mode 100644 vendor/github.com/gotk3/gotk3/glib/quark.go
 create mode 100644 vendor/github.com/gotk3/gotk3/gtk/cell_area.go
 create mode 100644 vendor/github.com/gotk3/gotk3/gtk/cell_area_since_3_14.go
 create mode 100644 vendor/github.com/gotk3/gotk3/gtk/glib.go
 create mode 100644 vendor/github.com/gotk3/gotk3/gtk/gtk_export_since_3_16.go
 create mode 100644 vendor/github.com/gotk3/gotk3/gtk/gtk_since_3_16_glib_2_44.go
 create mode 100644 vendor/github.com/gotk3/gotk3/gtk/gtk_since_3_24.go
 create mode 100644 vendor/github.com/gotk3/gotk3/gtk/print.go.h
 create mode 100644 vendor/github.com/gotk3/gotk3/gtk/print_export.go
 create mode 100644 vendor/github.com/gotk3/gotk3/gtk/text_child_anchor.go.h
 create mode 100644 vendor/github.com/gotk3/gotk3/internal/callback/callback.go
 create mode 100644 vendor/github.com/gotk3/gotk3/internal/closure/closure.go
 create mode 100644 vendor/github.com/gotk3/gotk3/internal/closure/closure_go_1_14.go
 create mode 100644 vendor/github.com/gotk3/gotk3/internal/closure/closure_go_1_15.go
 create mode 100644 vendor/github.com/gotk3/gotk3/internal/closure/funcstack.go
 create mode 100644 vendor/github.com/gotk3/gotk3/internal/slab/slab.go
 create mode 100644 vendor/github.com/gotk3/gotk3/pango/pango-attributes_since_1_44.go

diff --git a/go.mod b/go.mod
index 0dc988ffdc8e..800f63078033 100644
--- a/go.mod
+++ b/go.mod
@@ -9,7 +9,7 @@ require (
 	github.com/coreos/go-systemd/v22 v22.0.0
 	github.com/digitalocean/go-smbios v0.0.0-20180907143718-390a4f403a8e
 	github.com/google/go-cmp v0.4.0 // indirect
-	github.com/gotk3/gotk3 v0.4.0
+	github.com/gotk3/gotk3 v0.6.0
 	github.com/huandu/xstrings v1.3.0
 	github.com/kr/text v0.2.0 // indirect
 	github.com/leonelquinteros/gotext v1.4.0
diff --git a/go.sum b/go.sum
index 8e2637ab9e0d..0e21e60643e2 100644
--- a/go.sum
+++ b/go.sum
@@ -18,6 +18,8 @@ github.com/google/go-cmp v0.4.0 h1:xsAVV57WRhGj6kEIi8ReJzQlHHqcBYCElAvkovg3B/4=
 github.com/google/go-cmp v0.4.0/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=
 github.com/gotk3/gotk3 v0.4.0 h1:TIuhyQitGeRTxOQIV3AJlYtEWWJpC74JHwAIsxlH8MU=
 github.com/gotk3/gotk3 v0.4.0/go.mod h1:Eew3QBwAOBTrfFFDmsDE5wZWbcagBL1NUslj1GhRveo=
+github.com/gotk3/gotk3 v0.6.0 h1:Aqlq4/6VabNwtCyA9M9zFNad5yHAqCi5heWnZ9y+3dA=
+github.com/gotk3/gotk3 v0.6.0/go.mod h1:/hqFpkNa9T3JgNAE2fLvCdov7c5bw//FHNZrZ3Uv9/Q=
 github.com/huandu/xstrings v1.3.0 h1:gvV6jG9dTgFEncxo+AF7PH6MZXi/vZl25owA/8Dg8Wo=
 github.com/huandu/xstrings v1.3.0/go.mod h1:y5/lhBue+AyNmUVz9RLU9xbLR0o4KIIExikq4ovT0aE=
 github.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=
diff --git a/vendor/github.com/gotk3/gotk3/LICENSE b/vendor/github.com/gotk3/gotk3/LICENSE
index c58347d4bc4d..213b66e69b35 100644
--- a/vendor/github.com/gotk3/gotk3/LICENSE
+++ b/vendor/github.com/gotk3/gotk3/LICENSE
@@ -1,3 +1,5 @@
+ISC License
+
 Copyright (c) 2013-2014 Conformal Systems LLC.
 Copyright (c) 2015-2018 gotk3 contributors
 
diff --git a/vendor/github.com/gotk3/gotk3/cairo/antialias.go b/vendor/github.com/gotk3/gotk3/cairo/antialias.go
index e740df0d2426..9e4187971ea8 100644
--- a/vendor/github.com/gotk3/gotk3/cairo/antialias.go
+++ b/vendor/github.com/gotk3/gotk3/cairo/antialias.go
@@ -16,9 +16,9 @@ const (
 	ANTIALIAS_NONE     Antialias = C.CAIRO_ANTIALIAS_NONE
 	ANTIALIAS_GRAY     Antialias = C.CAIRO_ANTIALIAS_GRAY
 	ANTIALIAS_SUBPIXEL Antialias = C.CAIRO_ANTIALIAS_SUBPIXEL
-	// ANTIALIAS_FAST     Antialias = C.CAIRO_ANTIALIAS_FAST (since 1.12)
-	// ANTIALIAS_GOOD     Antialias = C.CAIRO_ANTIALIAS_GOOD (since 1.12)
-	// ANTIALIAS_BEST     Antialias = C.CAIRO_ANTIALIAS_BEST (since 1.12)
+	ANTIALIAS_FAST     Antialias = C.CAIRO_ANTIALIAS_FAST // (since 1.12)
+	ANTIALIAS_GOOD     Antialias = C.CAIRO_ANTIALIAS_GOOD // (since 1.12)
+	ANTIALIAS_BEST     Antialias = C.CAIRO_ANTIALIAS_BEST // (since 1.12)
 )
 
 func marshalAntialias(p uintptr) (interface{}, error) {
diff --git a/vendor/github.com/gotk3/gotk3/cairo/format.go b/vendor/github.com/gotk3/gotk3/cairo/format.go
index 2480142a551c..a1be67892600 100644
--- a/vendor/github.com/gotk3/gotk3/cairo/format.go
+++ b/vendor/github.com/gotk3/gotk3/cairo/format.go
@@ -30,4 +30,4 @@ func marshalFormat(p uintptr) (interface{}, error) {
 func FormatStrideForWidth(format Format, width int) int {
 	c := C.cairo_format_stride_for_width(C.cairo_format_t(format), C.int(width))
 	return int(c)
-}
\ No newline at end of file
+}
diff --git a/vendor/github.com/gotk3/gotk3/cairo/region.go b/vendor/github.com/gotk3/gotk3/cairo/region.go
new file mode 100644
index 000000000000..d3e36d067c8a
--- /dev/null
+++ b/vendor/github.com/gotk3/gotk3/cairo/region.go
@@ -0,0 +1,381 @@
+// region.go
+
+package cairo
+
+// #include <cairo.h>
+// #include <cairo-gobject.h>
+import "C"
+
+import (
+	"runtime"
+	"unsafe"
+
+	"github.com/gotk3/gotk3/glib"
+)
+
+func init() {
+	tm := []glib.TypeMarshaler{
+		// Enums
+		{glib.Type(C.cairo_gobject_region_overlap_get_type()), marshalRegionOverlap},
+
+		// Boxed
+		{glib.Type(C.cairo_gobject_region_get_type()), marshalRegion},
+	}
+	glib.RegisterGValueMarshalers(tm)
+}
+
+// RegionOverlap is a representation of Cairo's cairo_region_overlap_t.
+type RegionOverlap int
+
+const (
+	REGION_OVERLAP_IN   RegionOverlap = C.CAIRO_REGION_OVERLAP_IN
+	REGION_OVERLAP_OUT  RegionOverlap = C.CAIRO_REGION_OVERLAP_OUT
+	REGION_OVERLAP_PART RegionOverlap = C.CAIRO_REGION_OVERLAP_PART
+)
+
+func marshalRegionOverlap(p uintptr) (interface{}, error) {
+	c := C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))
+	return RegionOverlap(c), nil
+}
+
+/*
+ * Rectangle
+ */
+
+// Rectangle is a representation of Cairo's cairo_rectangle_int_t.
+type Rectangle struct {
+	X, Y          int
+	Width, Height int
+}
+
+// commodity function to ceate Rectangle cairo object.
+func RectangleNew(x, y, width, height int) *Rectangle {
+	r := new(Rectangle)
+	r.X = x
+	r.Y = y
+	r.Width = width
+	r.Height = height
+	return r
+}
+
+func (v *Rectangle) native() *C.cairo_rectangle_int_t {
+	r := new(C.cairo_rectangle_int_t)
+	r.x = C.int(v.X)
+	r.y = C.int(v.Y)
+	r.width = C.int(v.Width)
+	r.height = C.int(v.Height)
+	return r
+}
+
+func toRectangle(cr *C.cairo_rectangle_int_t) *Rectangle {
+	return &Rectangle{
+		X: int(cr.x), Y: int(cr.y),
+		Width: int(cr.width), Height: int(cr.height)}
+}
+
+/*
+ * Region
+ */
+
+// Region is a representation of Cairo's cairo_region_t.
+type Region struct {
+	region *C.cairo_region_t
+}
+
+// native returns a pointer to the underlying cairo_region_t.
+func (v *Region) native() *C.cairo_region_t {
+	if v == nil {
+		return nil
+	}
+	return v.region
+}
+
+// Native returns a pointer to the underlying cairo_region_t.
+func (v *Region) Native() uintptr {
+	return uintptr(unsafe.Pointer(v.native()))
+}
+
+func marshalRegion(p uintptr) (interface{}, error) {
+	c := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
+	region := (*C.cairo_region_t)(unsafe.Pointer(c))
+	return wrapRegion(region), nil
+}
+
+func wrapRegion(region *C.cairo_region_t) *Region {
+	return &Region{region}
+}
+
+// newRegionFromNative that handle finalizer.
+func newRegionFromNative(regionNative *C.cairo_region_t) (*Region, error) {
+	ptr := wrapRegion(regionNative)
+	e := ptr.Status().ToError()
+	if e != nil {
+		return nil, e
+	}
+	runtime.SetFinalizer(ptr, (*Region).destroy)
+	return ptr, nil
+}
+
+// RegionCreate is a wrapper around cairo_region_create().
+func RegionCreate() (*Region, error) {
+
+	return newRegionFromNative(C.cairo_region_create())
+}
+
+// CreateRectangle is a wrapper around cairo_region_create_rectangle().
+func (v *Region) CreateRectangle(rectangle *Rectangle) (*Region, error) {
+
+	return newRegionFromNative(C.cairo_region_create_rectangle(
+		rectangle.native()))
+}
+
+// CreateRectangles is a wrapper around cairo_region_create_rectangles().
+func (v *Region) CreateRectangles(rectangles ...*Rectangle) (*Region, error) {
+
+	length := len(rectangles)
+
+	cRectangles := make([]C.cairo_rectangle_int_t, length)
+
+	for i := 0; i < length; i++ {
+		cRectangles[i] = *rectangles[i].native()
+	}
+
+	pRect := &cRectangles[0]
+
+	return newRegionFromNative(
+		C.cairo_region_create_rectangles(
+			pRect,
+			C.int(length)))
+}
+
+// Copy is a wrapper around cairo_region_copy().
+func (v *Region) Copy() (*Region, error) {
+
+	return newRegionFromNative(C.cairo_region_copy(v.native()))
+}
+
+// reference is a wrapper around cairo_region_reference().
+func (v *Region) reference() {
+	v.region = C.cairo_region_reference(v.native())
+}
+
+// destroy is a wrapper around cairo_region_destroy().
+func (v *Region) destroy() {
+	C.cairo_region_destroy(v.native())
+}
+
+// Status is a wrapper around cairo_region_status().
+func (v *Region) Status() Status {
+	c := C.cairo_region_status(v.native())
+	return Status(c)
+}
+
+// GetExtents is a wrapper around cairo_region_get_extents().
+func (v *Region) GetExtents(extents *Rectangle) {
+
+	C.cairo_region_get_extents(v.native(), extents.native())
+}
+
+// NumRectangles is a wrapper around cairo_region_num_rectangles().
+func (v *Region) NumRectangles() int {
+
+	return int(C.cairo_region_num_rectangles(v.native()))
+}
+
+// GetRectangle is a wrapper around cairo_region_get_rectangle().
+func (v *Region) GetRectangle(nth int) *Rectangle {
+
+	cr := new(C.cairo_rectangle_int_t)
+	C.cairo_region_get_rectangle(v.native(), C.int(nth), cr)
+
+	return toRectangle(cr)
+}
+
+// IsEmpty is a wrapper around cairo_region_is_empty().
+func (v *Region) IsEmpty() bool {
+
+	return gobool(C.cairo_region_is_empty(v.native()))
+}
+
+// ContainsPoint is a wrapper around cairo_region_contains_point().
+func (v *Region) ContainsPoint(x, y int) bool {
+
+	return gobool(C.cairo_region_contains_point(
+		v.native(), C.int(x), C.int(y)))
+}
+
+// ContainsRectangle is a wrapper around cairo_region_contains_rectangle().
+func (v *Region) ContainsRectangle(rectangle *Rectangle) RegionOverlap {
+
+	return RegionOverlap(
+		C.cairo_region_contains_rectangle(
+			v.native(), rectangle.native()))
+}
+
+// Equal is a wrapper around cairo_region_equal().
+func (v *Region) Equal(region *Region) bool {
+
+	return gobool(C.cairo_region_equal(v.native(), region.native()))
+}
+
+// Translate is a wrapper around cairo_region_translate().
+func (v *Region) Translate(dx, dy int) {
+
+	C.cairo_region_translate(v.native(), C.int(dx), C.int(dy))
+}
+
+// Intersect is a wrapper around cairo_region_intersect().
+// Note: contrary to the original statement, the source
+// 'Region' remains preserved.
+func (v *Region) Intersect(other *Region) (*Region, error) {
+
+	dst, err := v.Copy()
+	if err != nil {
+		return nil, err
+	}
+	err = Status(
+		C.cairo_region_intersect(
+			dst.native(),
+			other.native())).ToError()
+	if err != nil {
+		return nil, err
+	}
+
+	return dst, nil
+}
+
+// IntersectRectangle is a wrapper around cairo_region_intersect_rectangle().
+// Note: contrary to the original statement, the source 'Region' remains preserved.
+func (v *Region) IntersectRectangle(rectangle *Rectangle) (*Region, error) {
+
+	dst, err := v.Copy()
+	if err != nil {
+		return nil, err
+	}
+	err = Status(
+		C.cairo_region_intersect_rectangle(
+			dst.native(),
+			rectangle.native())).ToError()
+	if err != nil {
+		return nil, err
+	}
+
+	return dst, nil
+}
+
+// Substract is a wrapper around cairo_region_subtract().
+// Note: contrary to the original statement, the source
+// 'Region' remains preserved.
+func (v *Region) Substract(other *Region) (*Region, error) {
+
+	dst, err := v.Copy()
+	if err != nil {
+		return nil, err
+	}
+	err = Status(
+		C.cairo_region_subtract(
+			dst.native(),
+			other.native())).ToError()
+	if err != nil {
+		return nil, err
+	}
+
+	return dst, nil
+}
+
+// SubstractRectangle is a wrapper around cairo_region_subtract_rectangle().
+// Note: contrary to the original statement, the source 'Region' remains preserved.
+func (v *Region) SubstractRectangle(rectangle *Rectangle) (*Region, error) {
+
+	dst, err := v.Copy()
+	if err != nil {
+		return nil, err
+	}
+	err = Status(
+		C.cairo_region_subtract_rectangle(
+			dst.native(),
+			rectangle.native())).ToError()
+	if err != nil {
+		return nil, err
+	}
+
+	return dst, nil
+}
+
+// Union is a wrapper around cairo_region_union().
+// Note: contrary to the original statement, the source
+// 'Region' remains preserved.
+func (v *Region) Union(other *Region) (*Region, error) {
+
+	dst, err := v.Copy()
+	if err != nil {
+		return nil, err
+	}
+	err = Status(
+		C.cairo_region_union(
+			dst.native(),
+			other.native())).ToError()
+	if err != nil {
+		return nil, err
+	}
+
+	return dst, nil
+}
+
+// UnionRectangle is a wrapper around cairo_region_union_rectangle().
+// Note: contrary to the original statement, the source 'Region' remains preserved.
+func (v *Region) UnionRectangle(rectangle *Rectangle) (*Region, error) {
+
+	dst, err := v.Copy()
+	if err != nil {
+		return nil, err
+	}
+	err = Status(
+		C.cairo_region_union_rectangle(
+			dst.native(),
+			rectangle.native())).ToError()
+	if err != nil {
+		return nil, err
+	}
+
+	return dst, nil
+}
+
+// Xor is a wrapper around cairo_region_xor().
+// Note: contrary to the original statement, the source
+// 'Region' remains preserved.
+func (v *Region) Xor(other *Region) (*Region, error) {
+
+	dst, err := v.Copy()
+	if err != nil {
+		return nil, err
+	}
+	err = Status(
+		C.cairo_region_xor(
+			dst.native(),
+			other.native())).ToError()
+	if err != nil {
+		return nil, err
+	}
+
+	return dst, nil
+}
+
+// XorRectangle is a wrapper around cairo_region_xor_rectangle().
+// Note: contrary to the original statement, the source 'Region' remains preserved.
+func (v *Region) XorRectangle(rectangle *Rectangle) (*Region, error) {
+
+	dst, err := v.Copy()
+	if err != nil {
+		return nil, err
+	}
+	err = Status(
+		C.cairo_region_xor_rectangle(
+			dst.native(),
+			rectangle.native())).ToError()
+	if err != nil {
+		return nil, err
+	}
+
+	return dst, nil
+}
diff --git a/vendor/github.com/gotk3/gotk3/cairo/surface.go b/vendor/github.com/gotk3/gotk3/cairo/surface.go
index c768ad51013d..6137529fe6bb 100644
--- a/vendor/github.com/gotk3/gotk3/cairo/surface.go
+++ b/vendor/github.com/gotk3/gotk3/cairo/surface.go
@@ -37,7 +37,7 @@ func NewSurfaceFromPNG(fileName string) (*Surface, error) {
 
 // CreateImageSurfaceForData is a wrapper around cairo_image_surface_create_for_data().
 func CreateImageSurfaceForData(data []byte, format Format, width, height, stride int) (*Surface, error) {
-	surfaceNative := C.cairo_image_surface_create_for_data((*C.uchar)(unsafe.Pointer(&data[0])), 
+	surfaceNative := C.cairo_image_surface_create_for_data((*C.uchar)(unsafe.Pointer(&data[0])),
 		C.cairo_format_t(format), C.int(width), C.int(height), C.int(stride))
 
 	status := Status(C.cairo_surface_status(surfaceNative))
@@ -93,6 +93,10 @@ func (v *Surface) Native() uintptr {
 	return uintptr(unsafe.Pointer(v.native()))
 }
 
+func (v *Surface) GetCSurface() *C.cairo_surface_t {
+	return v.native()
+}
+
 func marshalSurface(p uintptr) (interface{}, error) {
 	c := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
 	return WrapSurface(uintptr(c)), nil
diff --git a/vendor/github.com/gotk3/gotk3/gdk/gdk.go b/vendor/github.com/gotk3/gotk3/gdk/gdk.go
index dfd5221d7357..e9382ae711f2 100644
--- a/vendor/github.com/gotk3/gotk3/gdk/gdk.go
+++ b/vendor/github.com/gotk3/gotk3/gdk/gdk.go
@@ -23,11 +23,10 @@ package gdk
 import "C"
 import (
 	"errors"
-	"reflect"
 	"runtime"
-	"strconv"
 	"unsafe"
 
+	"github.com/gotk3/gotk3/cairo"
 	"github.com/gotk3/gotk3/glib"
 )
 
@@ -39,18 +38,17 @@ func init() {
 		{glib.Type(C.gdk_event_type_get_type()), marshalEventType},
 		{glib.Type(C.gdk_interp_type_get_type()), marshalInterpType},
 		{glib.Type(C.gdk_modifier_type_get_type()), marshalModifierType},
-		{glib.Type(C.gdk_pixbuf_alpha_mode_get_type()), marshalPixbufAlphaMode},
 		{glib.Type(C.gdk_event_mask_get_type()), marshalEventMask},
 		{glib.Type(C.gdk_gravity_get_type()), marshalGravity},
+		{glib.Type(C.gdk_visual_type_get_type()), marshalVisualType},
 
 		// Objects/Interfaces
 		{glib.Type(C.gdk_device_get_type()), marshalDevice},
+		{glib.Type(C.gdk_display_manager_get_type()), marshalDisplayManager},
 		{glib.Type(C.gdk_cursor_get_type()), marshalCursor},
 		{glib.Type(C.gdk_device_manager_get_type()), marshalDeviceManager},
 		{glib.Type(C.gdk_display_get_type()), marshalDisplay},
 		{glib.Type(C.gdk_drag_context_get_type()), marshalDragContext},
-		{glib.Type(C.gdk_pixbuf_get_type()), marshalPixbuf},
-		{glib.Type(C.gdk_pixbuf_animation_get_type()), marshalPixbufAnimation},
 		{glib.Type(C.gdk_rgba_get_type()), marshalRGBA},
 		{glib.Type(C.gdk_screen_get_type()), marshalScreen},
 		{glib.Type(C.gdk_visual_get_type()), marshalVisual},
@@ -89,6 +87,23 @@ var nilPtrErr = errors.New("cgo returned unexpected nil pointer")
  * Constants
  */
 
+// VisualType is a representation of GDK's GdkVisualType.
+type VisualType int
+
+const (
+	VISUAL_STATIC_GRAY  VisualType = C.GDK_VISUAL_STATIC_GRAY
+	VISUAL_GRAYSCALE    VisualType = C.GDK_VISUAL_GRAYSCALE
+	VISUAL_STATIC_COLOR VisualType = C.GDK_VISUAL_STATIC_COLOR
+	ISUAL_PSEUDO_COLOR  VisualType = C.GDK_VISUAL_PSEUDO_COLOR
+	VISUAL_TRUE_COLOR   VisualType = C.GDK_VISUAL_TRUE_COLOR
+	VISUAL_DIRECT_COLOR VisualType = C.GDK_VISUAL_DIRECT_COLOR
+)
+
+func marshalVisualType(p uintptr) (interface{}, error) {
+	c := C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))
+	return VisualType(c), nil
+}
+
 // DragAction is a representation of GDK's GdkDragAction.
 type DragAction int
 
@@ -128,16 +143,6 @@ const (
 	INTERP_HYPER    InterpType = C.GDK_INTERP_HYPER
 )
 
-// PixbufRotation is a representation of GDK's GdkPixbufRotation.
-type PixbufRotation int
-
-const (
-	PIXBUF_ROTATE_NONE             PixbufRotation = C.GDK_PIXBUF_ROTATE_NONE
-	PIXBUF_ROTATE_COUNTERCLOCKWISE PixbufRotation = C.GDK_PIXBUF_ROTATE_COUNTERCLOCKWISE
-	PIXBUF_ROTATE_UPSIDEDOWN       PixbufRotation = C.GDK_PIXBUF_ROTATE_UPSIDEDOWN
-	PIXBUF_ROTATE_CLOCKWISE        PixbufRotation = C.GDK_PIXBUF_ROTATE_CLOCKWISE
-)
-
 func marshalInterpType(p uintptr) (interface{}, error) {
 	c := C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))
 	return InterpType(c), nil
@@ -147,44 +152,31 @@ func marshalInterpType(p uintptr) (interface{}, error) {
 type ModifierType uint
 
 const (
-	GDK_SHIFT_MASK    ModifierType = C.GDK_SHIFT_MASK
-	GDK_LOCK_MASK                  = C.GDK_LOCK_MASK
-	GDK_CONTROL_MASK               = C.GDK_CONTROL_MASK
-	GDK_MOD1_MASK                  = C.GDK_MOD1_MASK
-	GDK_MOD2_MASK                  = C.GDK_MOD2_MASK
-	GDK_MOD3_MASK                  = C.GDK_MOD3_MASK
-	GDK_MOD4_MASK                  = C.GDK_MOD4_MASK
-	GDK_MOD5_MASK                  = C.GDK_MOD5_MASK
-	GDK_BUTTON1_MASK               = C.GDK_BUTTON1_MASK
-	GDK_BUTTON2_MASK               = C.GDK_BUTTON2_MASK
-	GDK_BUTTON3_MASK               = C.GDK_BUTTON3_MASK
-	GDK_BUTTON4_MASK               = C.GDK_BUTTON4_MASK
-	GDK_BUTTON5_MASK               = C.GDK_BUTTON5_MASK
-	GDK_SUPER_MASK                 = C.GDK_SUPER_MASK
-	GDK_HYPER_MASK                 = C.GDK_HYPER_MASK
-	GDK_META_MASK                  = C.GDK_META_MASK
-	GDK_RELEASE_MASK               = C.GDK_RELEASE_MASK
-	GDK_MODIFIER_MASK              = C.GDK_MODIFIER_MASK
+	SHIFT_MASK    ModifierType = C.GDK_SHIFT_MASK
+	LOCK_MASK                  = C.GDK_LOCK_MASK
+	CONTROL_MASK               = C.GDK_CONTROL_MASK
+	MOD1_MASK                  = C.GDK_MOD1_MASK
+	MOD2_MASK                  = C.GDK_MOD2_MASK
+	MOD3_MASK                  = C.GDK_MOD3_MASK
+	MOD4_MASK                  = C.GDK_MOD4_MASK
+	MOD5_MASK                  = C.GDK_MOD5_MASK
+	BUTTON1_MASK               = C.GDK_BUTTON1_MASK
+	BUTTON2_MASK               = C.GDK_BUTTON2_MASK
+	BUTTON3_MASK               = C.GDK_BUTTON3_MASK
+	BUTTON4_MASK               = C.GDK_BUTTON4_MASK
+	BUTTON5_MASK               = C.GDK_BUTTON5_MASK
+	SUPER_MASK                 = C.GDK_SUPER_MASK
+	HYPER_MASK                 = C.GDK_HYPER_MASK
+	META_MASK                  = C.GDK_META_MASK
+	RELEASE_MASK               = C.GDK_RELEASE_MASK
+	MODIFIER_MASK              = C.GDK_MODIFIER_MASK
 )
 
 func marshalModifierType(p uintptr) (interface{}, error) {
-	c := C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))
+	c := C.g_value_get_flags((*C.GValue)(unsafe.Pointer(p)))
 	return ModifierType(c), nil
 }
 
-// PixbufAlphaMode is a representation of GDK's GdkPixbufAlphaMode.
-type PixbufAlphaMode int
-
-const (
-	GDK_PIXBUF_ALPHA_BILEVEL PixbufAlphaMode = C.GDK_PIXBUF_ALPHA_BILEVEL
-	GDK_PIXBUF_ALPHA_FULL    PixbufAlphaMode = C.GDK_PIXBUF_ALPHA_FULL
-)
-
-func marshalPixbufAlphaMode(p uintptr) (interface{}, error) {
-	c := C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))
-	return PixbufAlphaMode(c), nil
-}
-
 // Selections
 const (
 	SELECTION_PRIMARY       Atom = 1
@@ -243,7 +235,6 @@ func marshalEventMask(p uintptr) (interface{}, error) {
 
 // added by lazyshot
 // ScrollDirection is a representation of GDK's GdkScrollDirection
-
 type ScrollDirection int
 
 const (
@@ -362,7 +353,6 @@ const (
 )
 
 // TODO:
-// GdkPixbufError
 // GdkColorspace
 // GdkVisualType
 // GdkTimeCoord
@@ -374,6 +364,15 @@ const (
 	GDK_EVENT_STOP      bool = C.GDK_EVENT_STOP != 0
 )
 
+// Button constants
+type Button uint
+
+const (
+	BUTTON_PRIMARY   Button = C.GDK_BUTTON_PRIMARY
+	BUTTON_MIDDLE    Button = C.GDK_BUTTON_MIDDLE
+	BUTTON_SECONDARY Button = C.GDK_BUTTON_SECONDARY
+)
+
 // CrossingMode is a representation of GDK's GdkCrossingMode.
 
 type CrossingMode int
@@ -426,7 +425,8 @@ const (
 	EVENT_BUTTON_RELEASE      EventType = C.GDK_BUTTON_RELEASE
 	EVENT_KEY_PRESS           EventType = C.GDK_KEY_PRESS
 	EVENT_KEY_RELEASE         EventType = C.GDK_KEY_RELEASE
-	EVENT_LEAVE_NOTIFY        EventType = C.GDK_ENTER_NOTIFY
+	EVENT_ENTER_NOTIFY        EventType = C.GDK_ENTER_NOTIFY
+	EVENT_LEAVE_NOTIFY        EventType = C.GDK_LEAVE_NOTIFY
 	EVENT_FOCUS_CHANGE        EventType = C.GDK_FOCUS_CHANGE
 	EVENT_CONFIGURE           EventType = C.GDK_CONFIGURE
 	EVENT_MAP                 EventType = C.GDK_MAP
@@ -469,7 +469,6 @@ const (
 // gdk_get_display_arg_name().
 // gdk_notify_startup_complete().
 // gdk_notify_startup_complete_with_id().
-// gdk_set_allowed_backends().
 // gdk_get_program_class().
 // gdk_set_program_class().
 // gdk_get_display(). deprecated since version 3.8
@@ -484,6 +483,13 @@ const (
 // gdk_error_trap_pop(). deprecated
 // gdk_error_trap_pop_ignored(). deprecated
 
+// SetAllowedBackends is a wrapper around gdk_set_allowed_backends
+func SetAllowedBackends(backends string) {
+	cstr := C.CString(backends)
+	defer C.free(unsafe.Pointer(cstr))
+	C.gdk_set_allowed_backends((*C.gchar)(cstr))
+}
+
 /*
  * GdkAtom
  */
@@ -539,6 +545,47 @@ func marshalDevice(p uintptr) (interface{}, error) {
 	return &Device{obj}, nil
 }
 
+func toDevice(d *C.GdkDevice) (*Device, error) {
+	obj := &glib.Object{glib.ToGObject(unsafe.Pointer(d))}
+	return &Device{obj}, nil
+}
+
+func (v *Device) GetPosition(screen **Screen, x, y *int) error {
+	cs := (**C.GdkScreen)(unsafe.Pointer(uintptr(0)))
+	if screen != nil {
+		var cval *C.GdkScreen
+		cs = &cval
+	}
+
+	cx := (*C.gint)(unsafe.Pointer(uintptr(0)))
+	if x != nil {
+		var cval C.gint
+		cx = &cval
+	}
+
+	cy := (*C.gint)(unsafe.Pointer(uintptr(0)))
+	if y != nil {
+		var cval C.gint
+		cy = &cval
+	}
+	C.gdk_device_get_position(v.native(), cs, cx, cy)
+
+	if cs != (**C.GdkScreen)(unsafe.Pointer(uintptr(0))) {
+		ms, err := toScreen(*cs)
+		if err != nil {
+			return err
+		}
+		*screen = ms
+	}
+	if cx != (*C.gint)(unsafe.Pointer(uintptr(0))) {
+		*x = int(*cx)
+	}
+	if cy != (*C.gint)(unsafe.Pointer(uintptr(0))) {
+		*y = int(*cy)
+	}
+	return nil
+}
+
 // TODO:
 // gdk_device_get_name().
 // gdk_device_get_source().
@@ -557,7 +604,6 @@ func marshalDevice(p uintptr) (interface{}, error) {
 // gdk_device_get_n_keys().
 // gdk_device_warp().
 // gdk_device_get_state().
-// gdk_device_get_position().
 // gdk_device_get_window_at_position().
 // gdk_device_get_window_at_position_double().
 // gdk_device_get_history().
@@ -891,18 +937,225 @@ func (v *Display) NotifyStartupComplete(startupID string) {
 /*
  * GdkDisplayManager
  */
+// DisplayManager is a representation of GDK's GdkDisplayManager.
+type DisplayManager struct {
+	*glib.Object
+}
+
+// native returns a pointer to the underlying GdkDisplayManager.
+func (v *DisplayManager) native() *C.GdkDisplayManager {
+	if v == nil || v.GObject == nil {
+		return nil
+	}
+	p := unsafe.Pointer(v.GObject)
+	return C.toGdkDisplayManager(p)
+}
+
+// Native returns a pointer to the underlying GdkDisplayManager.
+func (v *DisplayManager) Native() uintptr {
+	return uintptr(unsafe.Pointer(v.native()))
+}
+
+func marshalDisplayManager(p uintptr) (interface{}, error) {
+	c := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
+	obj := &glib.Object{glib.ToGObject(unsafe.Pointer(c))}
+	return &DisplayManager{obj}, nil
+}
+
+func wrapDisplayManager(obj *glib.Object) *DisplayManager {
+	if obj == nil {
+		return nil
+	}
+	return &DisplayManager{obj}
+}
+
+// DisplayManagerGet is a wrapper around gdk_display_manager_get().
+func DisplayManagerGet() (*DisplayManager, error) {
+	c := C.gdk_display_manager_get()
+	if c == nil {
+		return nil, nilPtrErr
+	}
+	obj := &glib.Object{glib.ToGObject(unsafe.Pointer(c))}
+	return &DisplayManager{obj}, nil
+}
+
+// GetDefaultDisplay is a wrapper around gdk_display_manager_get_default_display().
+func (v *DisplayManager) GetDefaultDisplay() (*Display, error) {
+	c := C.gdk_display_manager_get_default_display(v.native())
+	if c == nil {
+		return nil, nilPtrErr
+	}
+	obj := &glib.Object{glib.ToGObject(unsafe.Pointer(c))}
+	return &Display{obj}, nil
+}
+
+// SetDefaultDisplay is a wrapper around gdk_display_manager_set_default_display().
+func (v *DisplayManager) SetDefaultDisplay(display *Display) {
+	C.gdk_display_manager_set_default_display(v.native(), display.native())
+}
+
+// ListDisplays is a wrapper around gdk_display_manager_list_displays().
+func (v *DisplayManager) ListDisplays() *[]Display {
+
+	clist := C.gdk_display_manager_list_displays(v.native())
+	if clist == nil {
+		return nil
+	}
+	dlist := glib.WrapSList(uintptr(unsafe.Pointer(clist)))
+	defer dlist.Free()
+
+	var displays = make([]Display, 0, dlist.Length())
+	for ; dlist.DataRaw() != nil; dlist = dlist.Next() {
+		d := (*C.GdkDisplay)(dlist.DataRaw())
+		obj := &glib.Object{glib.ToGObject(unsafe.Pointer(d))}
+		displays = append(displays, Display{obj})
+	}
+	return &displays
+}
+
+// OpenDisplay is a representation of gdk_display_manager_open_display().
+func (v *DisplayManager) OpenDisplay(name string) (*Display, error) {
+	cstr := (*C.gchar)(C.CString(name))
+	defer C.free(unsafe.Pointer(cstr))
+
+	c := C.gdk_display_manager_open_display(v.native(), cstr)
+	if c == nil {
+		return nil, nilPtrErr
+	}
+	obj := &glib.Object{glib.ToGObject(unsafe.Pointer(c))}
+	return &Display{obj}, nil
+}
+
+/*
+ * GdkKeymap
+ */
+
+type Keymap struct {
+	*glib.Object
+}
+
+// native returns a pointer to the underlying GdkKeymap.
+func (v *Keymap) native() *C.GdkKeymap {
+	if v == nil || v.GObject == nil {
+		return nil
+	}
+	p := unsafe.Pointer(v.GObject)
+	return C.toGdkKeymap(p)
+}
+
+// Native returns a pointer to the underlying GdkKeymap.
+func (v *Keymap) Native() uintptr {
+	return uintptr(unsafe.Pointer(v.native()))
+}
+
+func marshalKeymap(p uintptr) (interface{}, error) {
+	c := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
+	obj := &glib.Object{glib.ToGObject(unsafe.Pointer(c))}
+	return &Keymap{obj}, nil
+}
+
+func wrapKeymap(obj *glib.Object) *Keymap {
+	return &Keymap{obj}
+}
+
+// GetKeymap is a wrapper around gdk_keymap_get_for_display().
+func (v *Display) GetKeymap() (*Keymap, error) {
+	c := C.gdk_keymap_get_for_display(v.native())
+	if c == nil {
+		return nil, nilPtrErr
+	}
+	obj := &glib.Object{glib.ToGObject(unsafe.Pointer(c))}
+	return &Keymap{obj}, nil
+}
+
+// TranslateKeyboardState is a wrapper around gdk_keymap_translate_keyboard_state().
+func (v *Keymap) TranslateKeyboardState(hardwareKeycode uint, state ModifierType, group int) (bool, *uint, *int, *int, *ModifierType) {
+
+	var cKeyval C.guint
+	var keyval *uint
+	var cEffectiveGroup, cLevel C.gint
+	var effectiveGroup, level *int
+	var cConsumedModifiers C.GdkModifierType
+	var consumedModifiers *ModifierType
+
+	c := C.gdk_keymap_translate_keyboard_state(
+		v.native(),
+		C.guint(hardwareKeycode),
+		C.GdkModifierType(state),
+		C.gint(group),
+		&cKeyval,
+		&cEffectiveGroup,
+		&cLevel,
+		&cConsumedModifiers,
+	)
+
+	if &cKeyval == nil {
+		keyval = nil
+	} else {
+		*keyval = uint(cKeyval)
+	}
+	if &cEffectiveGroup == nil {
+		effectiveGroup = nil
+	} else {
+		*effectiveGroup = int(cEffectiveGroup)
+	}
+	if &cLevel == nil {
+		level = nil
+	} else {
+		*level = int(cLevel)
+	}
+	if &cConsumedModifiers == nil {
+		consumedModifiers = nil
+	} else {
+		*consumedModifiers = ModifierType(cConsumedModifiers)
+	}
+
+	return gobool(c), keyval, effectiveGroup, level, consumedModifiers
+}
+
+// HaveBidiLayouts is a wrapper around gdk_keymap_have_bidi_layouts().
+func (v *Keymap) HaveBidiLayouts() bool {
+	return gobool(C.gdk_keymap_have_bidi_layouts(v.native()))
+}
+
+// GetCapsLockState is a wrapper around gdk_keymap_get_caps_lock_state().
+func (v *Keymap) GetCapsLockState() bool {
+	return gobool(C.gdk_keymap_get_caps_lock_state(v.native()))
+}
+
+// GetNumLockState is a wrapper around gdk_keymap_get_num_lock_state().
+func (v *Keymap) GetNumLockState() bool {
+	return gobool(C.gdk_keymap_get_num_lock_state(v.native()))
+}
+
+// GetModifierState is a wrapper around gdk_keymap_get_modifier_state().
+func (v *Keymap) GetModifierState() uint {
+	return uint(C.gdk_keymap_get_modifier_state(v.native()))
+}
+
+// TODO:
+// gdk_keymap_get_default(). deprecated since 3.22
+// gdk_keymap_get_direction().
+// gdk_keymap_add_virtual_modifiers().
+// gdk_keymap_map_virtual_modifiers().
+// gdk_keymap_get_modifier_mask().
+
+/*
+ * GdkKeymapKey
+ */
 
 // TODO:
-// gdk_display_manager_get().
-// gdk_display_manager_get_default_display().
-// gdk_display_manager_set_default_display().
-// gdk_display_manager_list_displays().
-// gdk_display_manager_open_display().
+// gdk_keymap_lookup_key().
+// gdk_keymap_get_entries_for_keyval().
+// gdk_keymap_get_entries_for_keycode().
 
 /*
  * GDK Keyval
  */
 
+// TODO:
+// gdk_keyval_name().
+
 // KeyvalFromName() is a wrapper around gdk_keyval_from_name().
 func KeyvalFromName(keyvalName string) uint {
 	str := (*C.gchar)(C.CString(keyvalName))
@@ -910,6 +1163,7 @@ func KeyvalFromName(keyvalName string) uint {
 	return uint(C.gdk_keyval_from_name(str))
 }
 
+// KeyvalConvertCase is a wrapper around gdk_keyval_convert_case().
 func KeyvalConvertCase(v uint) (lower, upper uint) {
 	var l, u C.guint
 	l = 0
@@ -918,26 +1172,32 @@ func KeyvalConvertCase(v uint) (lower, upper uint) {
 	return uint(l), uint(u)
 }
 
+// KeyvalIsLower is a wrapper around gdk_keyval_is_lower().
 func KeyvalIsLower(v uint) bool {
 	return gobool(C.gdk_keyval_is_lower(C.guint(v)))
 }
 
+// KeyvalIsUpper is a wrapper around gdk_keyval_is_upper().
 func KeyvalIsUpper(v uint) bool {
 	return gobool(C.gdk_keyval_is_upper(C.guint(v)))
 }
 
+// KeyvalToLower is a wrapper around gdk_keyval_to_lower().
 func KeyvalToLower(v uint) uint {
 	return uint(C.gdk_keyval_to_lower(C.guint(v)))
 }
 
+// KeyvalToUpper is a wrapper around gdk_keyval_to_upper().
 func KeyvalToUpper(v uint) uint {
 	return uint(C.gdk_keyval_to_upper(C.guint(v)))
 }
 
+// KeyvalToUnicode is a wrapper around gdk_keyval_to_unicode().
 func KeyvalToUnicode(v uint) rune {
 	return rune(C.gdk_keyval_to_unicode(C.guint(v)))
 }
 
+// UnicodeToKeyval is a wrapper around gdk_unicode_to_keyval().
 func UnicodeToKeyval(v rune) uint {
 	return uint(C.gdk_unicode_to_keyval(C.guint32(v)))
 }
@@ -972,8 +1232,11 @@ func marshalDragContext(p uintptr) (interface{}, error) {
 }
 
 func (v *DragContext) ListTargets() *glib.List {
-	c := C.gdk_drag_context_list_targets(v.native())
-	return glib.WrapList(uintptr(unsafe.Pointer(c)))
+	clist := C.gdk_drag_context_list_targets(v.native())
+	if clist == nil {
+		return nil
+	}
+	return glib.WrapList(uintptr(unsafe.Pointer(clist)))
 }
 
 /*
@@ -1066,9 +1329,9 @@ func (v *EventButton) YRoot() float64 {
 	return float64(c)
 }
 
-func (v *EventButton) Button() uint {
+func (v *EventButton) Button() Button {
 	c := v.native().button
-	return uint(c)
+	return Button(c)
 }
 
 func (v *EventButton) State() uint {
@@ -1099,11 +1362,6 @@ func (v *EventButton) MotionValRoot() (float64, float64) {
 	return float64(x), float64(y)
 }
 
-func (v *EventButton) ButtonVal() uint {
-	c := v.native().button
-	return uint(c)
-}
-
 /*
  * GdkEventKey
  */
@@ -1146,6 +1404,11 @@ func (v *EventKey) KeyVal() uint {
 	return uint(c)
 }
 
+func (v *EventKey) HardwareKeyCode() uint16 {
+	c := v.native().hardware_keycode
+	return uint16(c)
+}
+
 func (v *EventKey) Type() EventType {
 	c := v.native()._type
 	return EventType(c)
@@ -1511,6 +1774,7 @@ func (v *EventConfigure) Height() int {
 /*
  * GdkGravity
  */
+
 type Gravity int
 
 const (
@@ -1532,637 +1796,216 @@ func marshalGravity(p uintptr) (interface{}, error) {
 }
 
 /*
- * GdkPixbuf
+ * GdkRGBA
  */
-
-// Pixbuf is a representation of GDK's GdkPixbuf.
-type Pixbuf struct {
-	*glib.Object
+// To create a GdkRGBA you have to use NewRGBA function.
+type RGBA struct {
+	rgba *C.GdkRGBA
 }
 
-// native returns a pointer to the underlying GdkPixbuf.
-func (v *Pixbuf) native() *C.GdkPixbuf {
-	if v == nil || v.GObject == nil {
-		return nil
-	}
-	p := unsafe.Pointer(v.GObject)
-	return C.toGdkPixbuf(p)
+func marshalRGBA(p uintptr) (interface{}, error) {
+	c := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
+	return WrapRGBA(unsafe.Pointer(c)), nil
 }
 
-// Native returns a pointer to the underlying GdkPixbuf.
-func (v *Pixbuf) Native() uintptr {
-	return uintptr(unsafe.Pointer(v.native()))
+func WrapRGBA(p unsafe.Pointer) *RGBA {
+	return wrapRGBA((*C.GdkRGBA)(p))
 }
 
-func (v *Pixbuf) NativePrivate() *C.GdkPixbuf {
-	if v == nil || v.GObject == nil {
+func wrapRGBA(cRgba *C.GdkRGBA) *RGBA {
+	if cRgba == nil {
 		return nil
 	}
-	p := unsafe.Pointer(v.GObject)
-	return C.toGdkPixbuf(p)
-}
-
-func marshalPixbuf(p uintptr) (interface{}, error) {
-	c := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
-	obj := &glib.Object{glib.ToGObject(unsafe.Pointer(c))}
-	return &Pixbuf{obj}, nil
-}
-
-// GetColorspace is a wrapper around gdk_pixbuf_get_colorspace().
-func (v *Pixbuf) GetColorspace() Colorspace {
-	c := C.gdk_pixbuf_get_colorspace(v.native())
-	return Colorspace(c)
-}
-
-// GetNChannels is a wrapper around gdk_pixbuf_get_n_channels().
-func (v *Pixbuf) GetNChannels() int {
-	c := C.gdk_pixbuf_get_n_channels(v.native())
-	return int(c)
-}
-
-// GetHasAlpha is a wrapper around gdk_pixbuf_get_has_alpha().
-func (v *Pixbuf) GetHasAlpha() bool {
-	c := C.gdk_pixbuf_get_has_alpha(v.native())
-	return gobool(c)
-}
-
-// GetBitsPerSample is a wrapper around gdk_pixbuf_get_bits_per_sample().
-func (v *Pixbuf) GetBitsPerSample() int {
-	c := C.gdk_pixbuf_get_bits_per_sample(v.native())
-	return int(c)
-}
-
-// GetPixels is a wrapper around gdk_pixbuf_get_pixels_with_length().
-// A Go slice is used to represent the underlying Pixbuf data array, one
-// byte per channel.
-func (v *Pixbuf) GetPixels() (channels []byte) {
-	var length C.guint
-	c := C.gdk_pixbuf_get_pixels_with_length(v.native(), &length)
-	sliceHeader := (*reflect.SliceHeader)(unsafe.Pointer(&channels))
-	sliceHeader.Data = uintptr(unsafe.Pointer(c))
-	sliceHeader.Len = int(length)
-	sliceHeader.Cap = int(length)
-
-	// To make sure the slice doesn't outlive the Pixbuf, add a reference
-	v.Ref()
-	runtime.SetFinalizer(&channels, func(_ *[]byte) {
-		v.Unref()
-	})
-	return
-}
-
-// GetWidth is a wrapper around gdk_pixbuf_get_width().
-func (v *Pixbuf) GetWidth() int {
-	c := C.gdk_pixbuf_get_width(v.native())
-	return int(c)
-}
-
-// GetHeight is a wrapper around gdk_pixbuf_get_height().
-func (v *Pixbuf) GetHeight() int {
-	c := C.gdk_pixbuf_get_height(v.native())
-	return int(c)
-}
-
-// GetRowstride is a wrapper around gdk_pixbuf_get_rowstride().
-func (v *Pixbuf) GetRowstride() int {
-	c := C.gdk_pixbuf_get_rowstride(v.native())
-	return int(c)
-}
-
-// GetByteLength is a wrapper around gdk_pixbuf_get_byte_length().
-func (v *Pixbuf) GetByteLength() int {
-	c := C.gdk_pixbuf_get_byte_length(v.native())
-	return int(c)
-}
-
-// GetOption is a wrapper around gdk_pixbuf_get_option().  ok is true if
-// the key has an associated value.
-func (v *Pixbuf) GetOption(key string) (value string, ok bool) {
-	cstr := C.CString(key)
-	defer C.free(unsafe.Pointer(cstr))
-	c := C.gdk_pixbuf_get_option(v.native(), (*C.gchar)(cstr))
-	if c == nil {
-		return "", false
-	}
-	return C.GoString((*C.char)(c)), true
-}
-
-// TODO:
-// gdk_pixbuf_set_option().
-// gdk_pixbuf_remove_option().
-// gdk_pixbuf_get_options().
-// gdk_pixbuf_copy_options().
-// gdk_pixbuf_read_pixels().
-
-// PixbufNew is a wrapper around gdk_pixbuf_new().
-func PixbufNew(colorspace Colorspace, hasAlpha bool, bitsPerSample, width, height int) (*Pixbuf, error) {
-	c := C.gdk_pixbuf_new(C.GdkColorspace(colorspace), gbool(hasAlpha),
-		C.int(bitsPerSample), C.int(width), C.int(height))
-	if c == nil {
-		return nil, nilPtrErr
-	}
-
-	obj := &glib.Object{glib.ToGObject(unsafe.Pointer(c))}
-	p := &Pixbuf{obj}
-	//obj.Ref()
-	runtime.SetFinalizer(p, func(_ interface{}) { obj.Unref() })
-	return p, nil
-}
-
-// PixbufCopy is a wrapper around gdk_pixbuf_copy().
-func PixbufCopy(v *Pixbuf) (*Pixbuf, error) {
-	c := C.gdk_pixbuf_copy(v.native())
-	if c == nil {
-		return nil, nilPtrErr
-	}
-
-	obj := &glib.Object{glib.ToGObject(unsafe.Pointer(c))}
-	p := &Pixbuf{obj}
-	//obj.Ref()
-	runtime.SetFinalizer(p, func(_ interface{}) { obj.Unref() })
-	return p, nil
+	return &RGBA{cRgba}
 }
 
-// PixbufNewFromFile is a wrapper around gdk_pixbuf_new_from_file().
-func PixbufNewFromFile(filename string) (*Pixbuf, error) {
-	cstr := C.CString(filename)
-	defer C.free(unsafe.Pointer(cstr))
-
-	var err *C.GError
-	c := C.gdk_pixbuf_new_from_file((*C.char)(cstr), &err)
-	if c == nil {
-		defer C.g_error_free(err)
-		return nil, errors.New(C.GoString((*C.char)(err.message)))
-	}
-
-	obj := &glib.Object{glib.ToGObject(unsafe.Pointer(c))}
-	p := &Pixbuf{obj}
-	//obj.Ref()
-	runtime.SetFinalizer(p, func(_ interface{}) { obj.Unref() })
-	return p, nil
-}
-
-// PixbufNewFromFileAtSize is a wrapper around gdk_pixbuf_new_from_file_at_size().
-func PixbufNewFromFileAtSize(filename string, width, height int) (*Pixbuf, error) {
-	cstr := C.CString(filename)
-	defer C.free(unsafe.Pointer(cstr))
-
-	var err *C.GError = nil
-	c := C.gdk_pixbuf_new_from_file_at_size(cstr, C.int(width), C.int(height), &err)
-	if err != nil {
-		defer C.g_error_free(err)
-		return nil, errors.New(C.GoString((*C.char)(err.message)))
-	}
-
-	if c == nil {
-		return nil, nilPtrErr
-	}
-
-	obj := &glib.Object{glib.ToGObject(unsafe.Pointer(c))}
-	p := &Pixbuf{obj}
-	//obj.Ref()
-	runtime.SetFinalizer(p, func(_ interface{}) { obj.Unref() })
-	return p, nil
-}
-
-// PixbufNewFromFileAtScale is a wrapper around gdk_pixbuf_new_from_file_at_scale().
-func PixbufNewFromFileAtScale(filename string, width, height int, preserveAspectRatio bool) (*Pixbuf, error) {
-	cstr := C.CString(filename)
-	defer C.free(unsafe.Pointer(cstr))
-
-	var err *C.GError = nil
-	c := C.gdk_pixbuf_new_from_file_at_scale(cstr, C.int(width), C.int(height),
-		gbool(preserveAspectRatio), &err)
-	if err != nil {
-		defer C.g_error_free(err)
-		return nil, errors.New(C.GoString((*C.char)(err.message)))
-	}
-
-	if c == nil {
-		return nil, nilPtrErr
-	}
-
-	obj := &glib.Object{glib.ToGObject(unsafe.Pointer(c))}
-	p := &Pixbuf{obj}
-	//obj.Ref()
-	runtime.SetFinalizer(p, func(_ interface{}) { obj.Unref() })
-	return p, nil
-}
-
-// ScaleSimple is a wrapper around gdk_pixbuf_scale_simple().
-func (v *Pixbuf) ScaleSimple(destWidth, destHeight int, interpType InterpType) (*Pixbuf, error) {
-	c := C.gdk_pixbuf_scale_simple(v.native(), C.int(destWidth),
-		C.int(destHeight), C.GdkInterpType(interpType))
-	if c == nil {
-		return nil, nilPtrErr
-	}
-
-	obj := &glib.Object{glib.ToGObject(unsafe.Pointer(c))}
-	p := &Pixbuf{obj}
-	//obj.Ref()
-	runtime.SetFinalizer(p, func(_ interface{}) { obj.Unref() })
-	return p, nil
-}
-
-// RotateSimple is a wrapper around gdk_pixbuf_rotate_simple().
-func (v *Pixbuf) RotateSimple(angle PixbufRotation) (*Pixbuf, error) {
-	c := C.gdk_pixbuf_rotate_simple(v.native(), C.GdkPixbufRotation(angle))
-	if c == nil {
-		return nil, nilPtrErr
-	}
-
-	obj := &glib.Object{glib.ToGObject(unsafe.Pointer(c))}
-	p := &Pixbuf{obj}
-	//obj.Ref()
-	runtime.SetFinalizer(p, func(_ interface{}) { obj.Unref() })
-	return p, nil
-}
-
-// ApplyEmbeddedOrientation is a wrapper around gdk_pixbuf_apply_embedded_orientation().
-func (v *Pixbuf) ApplyEmbeddedOrientation() (*Pixbuf, error) {
-	c := C.gdk_pixbuf_apply_embedded_orientation(v.native())
-	if c == nil {
-		return nil, nilPtrErr
+func NewRGBA(values ...float64) *RGBA {
+	cRgba := new(C.GdkRGBA)
+	for i, value := range values {
+		switch i {
+		case 0:
+			cRgba.red = C.gdouble(value)
+		case 1:
+			cRgba.green = C.gdouble(value)
+		case 2:
+			cRgba.blue = C.gdouble(value)
+		case 3:
+			cRgba.alpha = C.gdouble(value)
+		}
 	}
-
-	obj := &glib.Object{glib.ToGObject(unsafe.Pointer(c))}
-	p := &Pixbuf{obj}
-	//obj.Ref()
-	runtime.SetFinalizer(p, func(_ interface{}) { obj.Unref() })
-	return p, nil
+	return wrapRGBA(cRgba)
 }
 
-// Flip is a wrapper around gdk_pixbuf_flip().
-func (v *Pixbuf) Flip(horizontal bool) (*Pixbuf, error) {
-	c := C.gdk_pixbuf_flip(v.native(), gbool(horizontal))
-	if c == nil {
-		return nil, nilPtrErr
-	}
-
-	obj := &glib.Object{glib.ToGObject(unsafe.Pointer(c))}
-	p := &Pixbuf{obj}
-	//obj.Ref()
-	runtime.SetFinalizer(p, func(_ interface{}) { obj.Unref() })
-	return p, nil
-}
-
-// SaveJPEG is a wrapper around gdk_pixbuf_save().
-// Quality is a number between 0...100
-func (v *Pixbuf) SaveJPEG(path string, quality int) error {
-	cpath := C.CString(path)
-	cquality := C.CString(strconv.Itoa(quality))
-	defer C.free(unsafe.Pointer(cpath))
-	defer C.free(unsafe.Pointer(cquality))
-
-	var err *C.GError
-	c := C._gdk_pixbuf_save_jpeg(v.native(), cpath, &err, cquality)
-	if !gobool(c) {
-		defer C.g_error_free(err)
-		return errors.New(C.GoString((*C.char)(err.message)))
-	}
-
-	return nil
+func (c *RGBA) Floats() []float64 {
+	return []float64{
+		float64(c.rgba.red),
+		float64(c.rgba.green),
+		float64(c.rgba.blue),
+		float64(c.rgba.alpha)}
 }
 
-// SavePNG is a wrapper around gdk_pixbuf_save().
-// Compression is a number between 0...9
-func (v *Pixbuf) SavePNG(path string, compression int) error {
-	cpath := C.CString(path)
-	ccompression := C.CString(strconv.Itoa(compression))
-	defer C.free(unsafe.Pointer(cpath))
-	defer C.free(unsafe.Pointer(ccompression))
-
-	var err *C.GError
-	c := C._gdk_pixbuf_save_png(v.native(), cpath, &err, ccompression)
-	if !gobool(c) {
-		defer C.g_error_free(err)
-		return errors.New(C.GoString((*C.char)(err.message)))
-	}
-	return nil
+func (c *RGBA) Native() uintptr {
+	return uintptr(unsafe.Pointer(c.rgba))
 }
 
-// PixbufGetFileInfo is a wrapper around gdk_pixbuf_get_file_info().
-// TODO: need to wrap the returned format to GdkPixbufFormat.
-func PixbufGetFileInfo(filename string) (format interface{}, width, height int) {
-	cstr := C.CString(filename)
-	defer C.free(unsafe.Pointer(cstr))
-	var cw, ch C.gint
-	format = C.gdk_pixbuf_get_file_info((*C.gchar)(cstr), &cw, &ch)
-	// TODO: need to wrap the returned format to GdkPixbufFormat.
-	return format, int(cw), int(ch)
+// SetColors sets all colors values in the RGBA.
+func (c *RGBA) SetColors(r, g, b, a float64) {
+	c.rgba.red = C.gdouble(r)
+	c.rgba.green = C.gdouble(g)
+	c.rgba.blue = C.gdouble(b)
+	c.rgba.alpha = C.gdouble(a)
 }
 
 /*
- * GdkPixbufAnimation
+ * The following methods (Get/Set) are made for
+ * more convenient use of the GdkRGBA object
  */
-
-// PixbufAnimation is a representation of GDK's GdkPixbufAnimation.
-type PixbufAnimation struct {
-	*glib.Object
+// GetRed get red value from the RGBA.
+func (c *RGBA) GetRed() float64 {
+	return float64(c.rgba.red)
 }
 
-// native returns a pointer to the underlying GdkPixbufAnimation.
-func (v *PixbufAnimation) native() *C.GdkPixbufAnimation {
-	if v == nil || v.GObject == nil {
-		return nil
-	}
-	p := unsafe.Pointer(v.GObject)
-	return C.toGdkPixbufAnimation(p)
+// GetGreen get green value from the RGBA.
+func (c *RGBA) GetGreen() float64 {
+	return float64(c.rgba.green)
 }
 
-func (v *PixbufAnimation) NativePrivate() *C.GdkPixbufAnimation {
-	if v == nil || v.GObject == nil {
-		return nil
-	}
-	p := unsafe.Pointer(v.GObject)
-	return C.toGdkPixbufAnimation(p)
+// GetBlue get blue value from the RGBA.
+func (c *RGBA) GetBlue() float64 {
+	return float64(c.rgba.blue)
 }
 
-func marshalPixbufAnimation(p uintptr) (interface{}, error) {
-	c := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
-	obj := &glib.Object{glib.ToGObject(unsafe.Pointer(c))}
-	return &PixbufAnimation{obj}, nil
+// GetAlpha get alpha value from the RGBA.
+func (c *RGBA) GetAlpha() float64 {
+	return float64(c.rgba.alpha)
 }
 
-// PixbufAnimationNewFromFile is a wrapper around gdk_pixbuf_animation_new_from_file().
-func PixbufAnimationNewFromFile(filename string) (*PixbufAnimation, error) {
-	cstr := C.CString(filename)
-	defer C.free(unsafe.Pointer(cstr))
-
-	var err *C.GError
-	c := C.gdk_pixbuf_animation_new_from_file((*C.char)(cstr), &err)
-	if c == nil {
-		defer C.g_error_free(err)
-		return nil, errors.New(C.GoString((*C.char)(err.message)))
-	}
-
-	obj := &glib.Object{glib.ToGObject(unsafe.Pointer(c))}
-	p := &PixbufAnimation{obj}
-	runtime.SetFinalizer(p, func(_ interface{}) { obj.Unref() })
-	return p, nil
+// SetRed set red value in the RGBA.
+func (c *RGBA) SetRed(red float64) {
+	c.rgba.red = C.gdouble(red)
 }
 
-/*
- * GdkPixbufLoader
- */
-
-// PixbufLoader is a representation of GDK's GdkPixbufLoader.
-// Users of PixbufLoader are expected to call Close() when they are finished.
-type PixbufLoader struct {
-	*glib.Object
+// SetGreen set green value in the RGBA.
+func (c *RGBA) SetGreen(green float64) {
+	c.rgba.green = C.gdouble(green)
 }
 
-// native() returns a pointer to the underlying GdkPixbufLoader.
-func (v *PixbufLoader) native() *C.GdkPixbufLoader {
-	if v == nil || v.GObject == nil {
-		return nil
-	}
-	p := unsafe.Pointer(v.GObject)
-	return C.toGdkPixbufLoader(p)
+// SetBlue set blue value in the RGBA.
+func (c *RGBA) SetBlue(blue float64) {
+	c.rgba.blue = C.gdouble(blue)
 }
 
-// PixbufLoaderNew() is a wrapper around gdk_pixbuf_loader_new().
-func PixbufLoaderNew() (*PixbufLoader, error) {
-	c := C.gdk_pixbuf_loader_new()
-	if c == nil {
-		return nil, nilPtrErr
-	}
-
-	obj := &glib.Object{glib.ToGObject(unsafe.Pointer(c))}
-	p := &PixbufLoader{obj}
-	obj.Ref()
-	runtime.SetFinalizer(p, func(_ interface{}) { obj.Unref() })
-	return p, nil
+// SetAlpha set alpha value in the RGBA.
+func (c *RGBA) SetAlpha(alpha float64) {
+	c.rgba.alpha = C.gdouble(alpha)
 }
 
-// PixbufLoaderNewWithType() is a wrapper around gdk_pixbuf_loader_new_with_type().
-func PixbufLoaderNewWithType(t string) (*PixbufLoader, error) {
-	var err *C.GError
-
-	cstr := C.CString(t)
+// Parse is a representation of gdk_rgba_parse().
+func (c *RGBA) Parse(spec string) bool {
+	cstr := (*C.gchar)(C.CString(spec))
 	defer C.free(unsafe.Pointer(cstr))
 
-	c := C.gdk_pixbuf_loader_new_with_type((*C.char)(cstr), &err)
-	if err != nil {
-		defer C.g_error_free(err)
-		return nil, errors.New(C.GoString((*C.char)(err.message)))
-	}
-
-	if c == nil {
-		return nil, nilPtrErr
-	}
-
-	return &PixbufLoader{glib.Take(unsafe.Pointer(c))}, nil
-}
-
-// Write() is a wrapper around gdk_pixbuf_loader_write().  The
-// function signature differs from the C equivalent to satisify the
-// io.Writer interface.
-func (v *PixbufLoader) Write(data []byte) (int, error) {
-	// n is set to 0 on error, and set to len(data) otherwise.
-	// This is a tiny hacky to satisfy io.Writer and io.WriteCloser,
-	// which would allow access to all io and ioutil goodies,
-	// and play along nice with go environment.
-
-	if len(data) == 0 {
-		return 0, nil
-	}
-
-	var err *C.GError
-	c := C.gdk_pixbuf_loader_write(v.native(),
-		(*C.guchar)(unsafe.Pointer(&data[0])), C.gsize(len(data)),
-		&err)
-
-	if !gobool(c) {
-		defer C.g_error_free(err)
-		return 0, errors.New(C.GoString((*C.char)(err.message)))
-	}
-
-	return len(data), nil
+	return gobool(C.gdk_rgba_parse(c.rgba, cstr))
 }
 
-func (v *PixbufLoader) WriteAndReturnPixbuf(data []byte) (*Pixbuf, error) {
-
-	if len(data) == 0 {
-		return nil, errors.New("no data")
-	}
-
-	var err *C.GError
-	c := C.gdk_pixbuf_loader_write(v.native(), (*C.guchar)(unsafe.Pointer(&data[0])), C.gsize(len(data)), &err)
-
-	if !gobool(c) {
-		defer C.g_error_free(err)
-		return nil, errors.New(C.GoString((*C.char)(err.message)))
-	}
-
-	v.Close()
-
-	c2 := C.gdk_pixbuf_loader_get_pixbuf(v.native())
-	if c2 == nil {
-		return nil, nilPtrErr
-	}
-
-	obj := &glib.Object{glib.ToGObject(unsafe.Pointer(c2))}
-	p := &Pixbuf{obj}
-	//obj.Ref() // Don't call Ref here, gdk_pixbuf_loader_get_pixbuf already did that for us.
-	runtime.SetFinalizer(p, func(_ interface{}) { obj.Unref() })
-
-	return p, nil
+// String is a representation of gdk_rgba_to_string().
+func (c *RGBA) String() string {
+	return C.GoString((*C.char)(C.gdk_rgba_to_string(c.rgba)))
 }
 
-// Close is a wrapper around gdk_pixbuf_loader_close().  An error is
-// returned instead of a bool like the native C function to support the
-// io.Closer interface.
-func (v *PixbufLoader) Close() error {
-	var err *C.GError
-
-	if ok := gobool(C.gdk_pixbuf_loader_close(v.native(), &err)); !ok {
-		defer C.g_error_free(err)
-		return errors.New(C.GoString((*C.char)(err.message)))
-	}
-	return nil
+// free is a representation of gdk_rgba_free().
+func (c *RGBA) free() {
+	C.gdk_rgba_free(c.rgba)
 }
 
-// SetSize is a wrapper around gdk_pixbuf_loader_set_size().
-func (v *PixbufLoader) SetSize(width, height int) {
-	C.gdk_pixbuf_loader_set_size(v.native(), C.int(width), C.int(height))
-}
+// Copy is a representation of gdk_rgba_copy().
+func (c *RGBA) Copy() (*RGBA, error) {
+	cRgba := C.gdk_rgba_copy(c.rgba)
 
-// GetPixbuf is a wrapper around gdk_pixbuf_loader_get_pixbuf().
-func (v *PixbufLoader) GetPixbuf() (*Pixbuf, error) {
-	c := C.gdk_pixbuf_loader_get_pixbuf(v.native())
 	if c == nil {
 		return nil, nilPtrErr
 	}
+	obj := wrapRGBA(cRgba)
 
-	obj := &glib.Object{glib.ToGObject(unsafe.Pointer(c))}
-	p := &Pixbuf{obj}
-	//obj.Ref() // Don't call Ref here, gdk_pixbuf_loader_get_pixbuf already did that for us.
-	runtime.SetFinalizer(p, func(_ interface{}) { obj.Unref() })
-	return p, nil
+	runtime.SetFinalizer(obj, (*RGBA).free)
+	return obj, nil
 }
 
-// GetAnimation is a wrapper around gdk_pixbuf_loader_get_animation().
-func (v *PixbufLoader) GetAnimation() (*PixbufAnimation, error) {
-	c := C.gdk_pixbuf_loader_get_animation(v.native())
-	if c == nil {
-		return nil, nilPtrErr
-	}
-
-	obj := &glib.Object{glib.ToGObject(unsafe.Pointer(c))}
-	p := &PixbufAnimation{obj}
-	runtime.SetFinalizer(p, func(_ interface{}) { obj.Unref() })
-	return p, nil
+// Equal is a representation of gdk_rgba_equal().
+func (c *RGBA) Equal(rgba *RGBA) bool {
+	return gobool(C.gdk_rgba_equal(
+		C.gconstpointer(c.rgba),
+		C.gconstpointer(rgba.rgba)))
 }
 
-// Convenient function like above for Pixbuf. Write data, close loader and return PixbufAnimation.
-func (v *PixbufLoader) WriteAndReturnPixbufAnimation(data []byte) (*PixbufAnimation, error) {
-
-	if len(data) == 0 {
-		return nil, errors.New("no data")
-	}
-
-	var err *C.GError
-	c := C.gdk_pixbuf_loader_write(v.native(), (*C.guchar)(unsafe.Pointer(&data[0])), C.gsize(len(data)), &err)
-
-	if !gobool(c) {
-		defer C.g_error_free(err)
-		return nil, errors.New(C.GoString((*C.char)(err.message)))
-	}
-
-	v.Close()
-
-	c2 := C.gdk_pixbuf_loader_get_animation(v.native())
-	if c2 == nil {
-		return nil, nilPtrErr
-	}
-
-	obj := &glib.Object{glib.ToGObject(unsafe.Pointer(c2))}
-	p := &PixbufAnimation{obj}
-	runtime.SetFinalizer(p, func(_ interface{}) { obj.Unref() })
-
-	return p, nil
+// Hash is a representation of gdk_rgba_hash().
+func (c *RGBA) Hash() uint {
+	return uint(C.gdk_rgba_hash(C.gconstpointer(c.rgba)))
 }
 
 /*
- * GdkRGBA
+ * GdkPoint
  */
 
-type RGBA struct {
-	rgba *C.GdkRGBA
+// Point is a representation of GDK's GdkPoint type.
+type Point struct {
+	GdkPoint C.GdkPoint
 }
 
-func marshalRGBA(p uintptr) (interface{}, error) {
-	c := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
-	return WrapRGBA(unsafe.Pointer(c)), nil
+func WrapPoint(p uintptr) *Point {
+	return wrapPoint((*C.GdkPoint)(unsafe.Pointer(p)))
 }
 
-func WrapRGBA(p unsafe.Pointer) *RGBA {
-	return wrapRGBA((*C.GdkRGBA)(p))
+func wrapPoint(obj *C.GdkPoint) *Point {
+	if obj == nil {
+		return nil
+	}
+	return &Point{*obj}
 }
 
-func wrapRGBA(obj *C.GdkRGBA) *RGBA {
-	return &RGBA{obj}
+// Native() returns a pointer to the underlying GdkPoint.
+func (v *Point) native() *C.GdkPoint {
+	return &v.GdkPoint
 }
 
-func NewRGBA(values ...float64) *RGBA {
-	cval := C.GdkRGBA{}
-	c := &RGBA{&cval}
-	if len(values) > 0 {
-		c.rgba.red = C.gdouble(values[0])
-	}
-	if len(values) > 1 {
-		c.rgba.green = C.gdouble(values[1])
-	}
-	if len(values) > 2 {
-		c.rgba.blue = C.gdouble(values[2])
-	}
-	if len(values) > 3 {
-		c.rgba.alpha = C.gdouble(values[3])
-	}
-	return c
+// PointNew helper function to create a GdkPoint
+func PointNew(x, y int) *Point {
+	var p C.GdkPoint
+	p.x = C.gint(x)
+	p.y = C.gint(y)
+	return &Point{p}
 }
 
-func (c *RGBA) Floats() []float64 {
-	return []float64{float64(c.rgba.red), float64(c.rgba.green), float64(c.rgba.blue), float64(c.rgba.alpha)}
+// GetPointInt helper function to get GdkPoint values
+func (v *Point) GetPointInt() (x, y int) {
+	return int(v.native().x), int(v.native().y)
 }
 
-// SetColors sets all colors values in the RGBA.
-func (c *RGBA) SetColors(r, g, b, a float64) {
-	c.rgba.red = C.gdouble(r)
-	c.rgba.green = C.gdouble(g)
-	c.rgba.blue = C.gdouble(b)
-	c.rgba.alpha = C.gdouble(a)
+// SetPointInt helper function to set GdkPoint values
+func (v *Point) SetPointInt(x, y int) {
+	v.native().x = C.gint(x)
+	v.native().y = C.gint(y)
 }
 
-func (c *RGBA) Native() uintptr {
-	return uintptr(unsafe.Pointer(c.rgba))
+// GetX returns x field of the underlying GdkPoint.
+func (v *Point) GetX() int {
+	return int(v.native().x)
 }
 
-// Parse is a representation of gdk_rgba_parse().
-func (c *RGBA) Parse(spec string) bool {
-	cstr := (*C.gchar)(C.CString(spec))
-	defer C.free(unsafe.Pointer(cstr))
-
-	return gobool(C.gdk_rgba_parse(c.rgba, cstr))
+// SetX sets x field of the underlying GdkPoint.
+func (v *Point) SetX(x int) {
+	v.native().x = C.gint(x)
 }
 
-// String is a representation of gdk_rgba_to_string().
-func (c *RGBA) String() string {
-	return C.GoString((*C.char)(C.gdk_rgba_to_string(c.rgba)))
+// GetY returns y field of the underlying GdkPoint.
+func (v *Point) GetY() int {
+	return int(v.native().y)
 }
 
-// TODO:
-// GdkRGBA * 	gdk_rgba_copy ()
-// void 	gdk_rgba_free ()
-// gboolean 	gdk_rgba_equal ()
-// guint 	gdk_rgba_hash ()
-
-/*
- * GdkRGBA
- */
-
-
+// SetY sets y field of the underlying GdkPoint.
+func (v *Point) SetY(y int) {
+	v.native().y = C.gint(y)
+}
 
 /*
  * GdkRectangle
@@ -2189,6 +2032,46 @@ func (r *Rectangle) native() *C.GdkRectangle {
 	return &r.GdkRectangle
 }
 
+// RectangleIntersect is a wrapper around gdk_rectangle_intersect().
+func (v *Rectangle) RectangleIntersect(rect *Rectangle) (*Rectangle, bool) {
+	r := new(C.GdkRectangle)
+	c := C.gdk_rectangle_intersect(v.native(), rect.native(), r)
+	return wrapRectangle(r), gobool(c)
+}
+
+// RectangleUnion is a wrapper around gdk_rectangle_union().
+func (v *Rectangle) RectangleUnion(rect *Rectangle) *Rectangle {
+	r := new(C.GdkRectangle)
+	C.gdk_rectangle_union(v.native(), rect.native(), r)
+	return wrapRectangle(r)
+}
+
+// RectangleNew helper function to create a GdkRectanlge
+func RectangleNew(x, y, width, height int) *Rectangle {
+	var r C.GdkRectangle
+	r.x = C.int(x)
+	r.y = C.int(y)
+	r.width = C.int(width)
+	r.height = C.int(height)
+	return &Rectangle{r}
+}
+
+// SetRectangleInt helper function to set GdkRectanlge values
+func (v *Rectangle) SetRectangleInt(x, y, width, height int) {
+	v.native().x = C.int(x)
+	v.native().y = C.int(y)
+	v.native().width = C.int(width)
+	v.native().height = C.int(height)
+}
+
+// GetRectangleInt helper function to get GdkRectanlge values
+func (v *Rectangle) GetRectangleInt() (x, y, width, height int) {
+	return int(v.native().x),
+		int(v.native().y),
+		int(v.native().width),
+		int(v.native().height)
+}
+
 // GetX returns x field of the underlying GdkRectangle.
 func (r *Rectangle) GetX() int {
 	return int(r.native().x)
@@ -2390,13 +2273,92 @@ func marshalVisual(p uintptr) (interface{}, error) {
 	return &Visual{obj}, nil
 }
 
-// TODO:
-// gdk_visual_get_blue_pixel_details().
-// gdk_visual_get_depth().
-// gdk_visual_get_green_pixel_details().
-// gdk_visual_get_red_pixel_details().
-// gdk_visual_get_visual_type().
-// gdk_visual_get_screen().
+// GetBluePixelDetails is a wrapper around gdk_visual_get_blue_pixel_details().
+func (v *Visual) GetBluePixelDetails() (*uint32, *int, *int) {
+	var (
+		m                *uint32 = nil
+		s, p             *int    = nil, nil
+		mask             C.guint32
+		shift, precision C.gint
+	)
+	C.gdk_visual_get_blue_pixel_details(v.native(), &mask, &shift, &precision)
+	if &mask != nil {
+		m = new(uint32)
+		*m = uint32(mask)
+	}
+	if &shift != nil {
+		s = new(int)
+		*s = int(shift)
+	}
+	if &precision != nil {
+		p = new(int)
+		*p = int(precision)
+	}
+	return m, s, p
+}
+
+// GetDepth is a wrapper around gdk_visual_get_depth().
+func (v *Visual) GetDepth() int {
+	return int(C.gdk_visual_get_depth(v.native()))
+}
+
+// GetGreenPixelDetails is a wrapper around gdk_visual_get_green_pixel_details().
+func (v *Visual) GetGreenPixelDetails() (*uint32, *int, *int) {
+	var (
+		m                *uint32 = nil
+		s, p             *int    = nil, nil
+		mask             C.guint32
+		shift, precision C.gint
+	)
+	C.gdk_visual_get_green_pixel_details(v.native(), &mask, &shift, &precision)
+	if &mask != nil {
+		m = new(uint32)
+		*m = uint32(mask)
+	}
+	if &shift != nil {
+		s = new(int)
+		*s = int(shift)
+	}
+	if &precision != nil {
+		p = new(int)
+		*p = int(precision)
+	}
+	return m, s, p
+}
+
+// GetRedPixelDetails is a wrapper around gdk_visual_get_red_pixel_details().
+func (v *Visual) GetRedPixelDetails() (*uint32, *int, *int) {
+	var (
+		m                *uint32 = nil
+		s, p             *int    = nil, nil
+		mask             C.guint32
+		shift, precision C.gint
+	)
+	C.gdk_visual_get_red_pixel_details(v.native(), &mask, &shift, &precision)
+	if &mask != nil {
+		m = new(uint32)
+		*m = uint32(mask)
+	}
+	if &shift != nil {
+		s = new(int)
+		*s = int(shift)
+	}
+	if &precision != nil {
+		p = new(int)
+		*p = int(precision)
+	}
+	return m, s, p
+}
+
+// GetVisualType is a wrapper around gdk_visual_get_visual_type().
+func (v *Visual) GetVisualType() VisualType {
+	return VisualType(C.gdk_visual_get_visual_type(v.native()))
+}
+
+// GetScreen is a wrapper around gdk_visual_get_screen().
+func (v *Visual) GetScreen() (*Screen, error) {
+	return toScreen(C.gdk_visual_get_screen(v.native()))
+}
 
 /*
  * GdkWindow
@@ -2436,6 +2398,18 @@ func (v *Window) WindowGetHeight() (height int) {
 	return int(C.gdk_window_get_height(v.native()))
 }
 
+// CreateSimilarSurface is a wrapper around gdk_window_create_similar_surface().
+func (v *Window) CreateSimilarSurface(content cairo.Content, w, h int) (*cairo.Surface, error) {
+	surface := C.gdk_window_create_similar_surface(v.native(), C.cairo_content_t(content), C.gint(w), C.gint(h))
+
+	status := cairo.Status(C.cairo_surface_status(surface))
+	if status != cairo.STATUS_SUCCESS {
+		return nil, cairo.ErrorStatus(status)
+	}
+
+	return cairo.NewSurface(uintptr(unsafe.Pointer(surface)), false), nil
+}
+
 //PixbufGetFromWindow is a wrapper around gdk_pixbuf_get_from_window()
 func (v *Window) PixbufGetFromWindow(x, y, w, h int) (*Pixbuf, error) {
 	c := C.gdk_pixbuf_get_from_window(v.native(), C.gint(x), C.gint(y), C.gint(w), C.gint(h))
@@ -2450,8 +2424,30 @@ func (v *Window) PixbufGetFromWindow(x, y, w, h int) (*Pixbuf, error) {
 	return p, nil
 }
 
-// TODO:
-// gdk_pixbuf_get_from_surface().
+// GetDevicePosition is a wrapper around gdk_window_get_device_position()
+func (v *Window) GetDevicePosition(d *Device) (*Window, int, int, ModifierType) {
+	var x C.gint
+	var y C.gint
+	var mt C.GdkModifierType
+	underneathWindow := C.gdk_window_get_device_position(v.native(), d.native(), &x, &y, &mt)
+	obj := &glib.Object{glib.ToGObject(unsafe.Pointer(underneathWindow))}
+	rw := &Window{obj}
+	runtime.SetFinalizer(rw, func(_ interface{}) { obj.Unref() })
+	return rw, int(x), int(y), ModifierType(mt)
+}
+
+func PixbufGetFromSurface(surface *cairo.Surface, src_x, src_y, width, height int) (*Pixbuf, error) {
+	c := C.gdk_pixbuf_get_from_surface((*C.cairo_surface_t)(unsafe.Pointer(surface.Native())), C.gint(src_x), C.gint(src_y), C.gint(width), C.gint(height))
+	if c == nil {
+		return nil, nilPtrErr
+	}
+
+	obj := &glib.Object{glib.ToGObject(unsafe.Pointer(c))}
+	p := &Pixbuf{obj}
+	//obj.Ref()
+	runtime.SetFinalizer(p, func(_ interface{}) { obj.Unref() })
+	return p, nil
+}
 
 func marshalWindow(p uintptr) (interface{}, error) {
 	c := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
diff --git a/vendor/github.com/gotk3/gotk3/gdk/gdk.go.h b/vendor/github.com/gotk3/gotk3/gdk/gdk.go.h
index e7e0b3d0f7fc..cfa1a34ecbce 100644
--- a/vendor/github.com/gotk3/gotk3/gdk/gdk.go.h
+++ b/vendor/github.com/gotk3/gotk3/gdk/gdk.go.h
@@ -19,90 +19,30 @@
 #include <stdlib.h>
 
 // Type Casting
-static GdkAtom
-toGdkAtom(void *p)
-{
-	return ((GdkAtom)p);
-}
+static GdkAtom toGdkAtom(void *p) { return ((GdkAtom)p); }
 
-static GdkDevice *
-toGdkDevice(void *p)
-{
-	return (GDK_DEVICE(p));
-}
+static GdkDevice *toGdkDevice(void *p) { return (GDK_DEVICE(p)); }
 
-static GdkCursor *
-toGdkCursor(void *p)
-{
-	return (GDK_CURSOR(p));
-}
+static GdkCursor *toGdkCursor(void *p) { return (GDK_CURSOR(p)); }
 
-static GdkDeviceManager *
-toGdkDeviceManager(void *p)
-{
-	return (GDK_DEVICE_MANAGER(p));
+static GdkDeviceManager *toGdkDeviceManager(void *p) {
+  return (GDK_DEVICE_MANAGER(p));
 }
 
-static GdkDisplay *
-toGdkDisplay(void *p)
-{
-	return (GDK_DISPLAY(p));
-}
+static GdkDisplay *toGdkDisplay(void *p) { return (GDK_DISPLAY(p)); }
 
-static GdkDragContext *
-toGdkDragContext(void *p)
-{
-	return (GDK_DRAG_CONTEXT(p));
-}
+static GdkDisplayManager *toGdkDisplayManager(void *p) { return (GDK_DISPLAY_MANAGER(p)); }
 
-static GdkPixbuf *
-toGdkPixbuf(void *p)
-{
-	return (GDK_PIXBUF(p));
-}
+static GdkKeymap *toGdkKeymap(void *p) { return (GDK_KEYMAP(p)); }
 
-static GdkPixbufAnimation *
-toGdkPixbufAnimation(void *p)
-{
-	return (GDK_PIXBUF_ANIMATION(p));
+static GdkDragContext *toGdkDragContext(void *p) {
+  return (GDK_DRAG_CONTEXT(p));
 }
 
-static gboolean
-_gdk_pixbuf_save_png(GdkPixbuf *pixbuf,
-const char *filename, GError ** err, const char *compression)
-{
-	return gdk_pixbuf_save(pixbuf, filename, "png", err, "compression", compression, NULL);
-}
+static GdkScreen *toGdkScreen(void *p) { return (GDK_SCREEN(p)); }
 
-static gboolean
-_gdk_pixbuf_save_jpeg(GdkPixbuf *pixbuf,
-const char *filename, GError ** err, const char *quality)
-{
-	return gdk_pixbuf_save(pixbuf, filename, "jpeg", err, "quality", quality, NULL);
-}
+static GdkVisual *toGdkVisual(void *p) { return (GDK_VISUAL(p)); }
 
-static GdkPixbufLoader *
-toGdkPixbufLoader(void *p)
-{
-	return (GDK_PIXBUF_LOADER(p));
-}
-
-static GdkScreen *
-toGdkScreen(void *p)
-{
-	return (GDK_SCREEN(p));
-}
-
-static GdkVisual *
-toGdkVisual(void *p)
-{
-	return (GDK_VISUAL(p));
-}
-
-static GdkWindow *
-toGdkWindow(void *p)
-{
-	return (GDK_WINDOW(p));
-}
+static GdkWindow *toGdkWindow(void *p) { return (GDK_WINDOW(p)); }
 
-static inline gchar** next_gcharptr(gchar** s) { return (s+1); }
+static inline gchar **next_gcharptr(gchar **s) { return (s + 1); }
diff --git a/vendor/github.com/gotk3/gotk3/gdk/gdk_deprecated_since_3_10.go b/vendor/github.com/gotk3/gotk3/gdk/gdk_deprecated_since_3_10.go
index 441afaf6c449..a969098c2d81 100644
--- a/vendor/github.com/gotk3/gotk3/gdk/gdk_deprecated_since_3_10.go
+++ b/vendor/github.com/gotk3/gotk3/gdk/gdk_deprecated_since_3_10.go
@@ -19,7 +19,7 @@
 // 3.8 or earlier.  To target an earlier build build, use the build tag
 // gtk_MAJOR_MINOR.  For example, to target GTK 3.8, run
 // 'go build -tags gtk_3_8'.
-// +build gtk_3_6 gtk_3_8
+// +build gtk_3_6 gtk_3_8 gtk_deprecated
 
 package gdk
 
diff --git a/vendor/github.com/gotk3/gotk3/gdk/gdk_deprecated_since_3_16.go b/vendor/github.com/gotk3/gotk3/gdk/gdk_deprecated_since_3_16.go
index b2dd3301576a..091d01548e4f 100644
--- a/vendor/github.com/gotk3/gotk3/gdk/gdk_deprecated_since_3_16.go
+++ b/vendor/github.com/gotk3/gotk3/gdk/gdk_deprecated_since_3_16.go
@@ -1,4 +1,4 @@
-//+build gtk_3_6 gtk_3_8 gtk_3_10 gtk_3_12 gtk_3_14
+//+build gtk_3_6 gtk_3_8 gtk_3_10 gtk_3_12 gtk_3_14 gtk_deprecated
 
 package gdk
 
diff --git a/vendor/github.com/gotk3/gotk3/gdk/gdk_deprecated_since_3_20.go b/vendor/github.com/gotk3/gotk3/gdk/gdk_deprecated_since_3_20.go
index 66f444a0d3db..07fc74ad5306 100644
--- a/vendor/github.com/gotk3/gotk3/gdk/gdk_deprecated_since_3_20.go
+++ b/vendor/github.com/gotk3/gotk3/gdk/gdk_deprecated_since_3_20.go
@@ -1,4 +1,4 @@
-//+build gtk_3_6 gtk_3_8 gtk_3_10 gtk_3_12 gtk_3_14 gtk_3_16 gtk_3_18
+//+build gtk_3_6 gtk_3_8 gtk_3_10 gtk_3_12 gtk_3_14 gtk_3_16 gtk_3_18 gtk_deprecated
 
 package gdk
 
diff --git a/vendor/github.com/gotk3/gotk3/gdk/gdk_deprecated_since_3_22.go b/vendor/github.com/gotk3/gotk3/gdk/gdk_deprecated_since_3_22.go
index 1ca97b329734..fabcaf62ff62 100644
--- a/vendor/github.com/gotk3/gotk3/gdk/gdk_deprecated_since_3_22.go
+++ b/vendor/github.com/gotk3/gotk3/gdk/gdk_deprecated_since_3_22.go
@@ -1,4 +1,4 @@
-//+build gtk_3_6 gtk_3_8 gtk_3_10 gtk_3_12 gtk_3_14 gtk_3_16 gtk_3_18 gtk_3_20
+//+build gtk_3_6 gtk_3_8 gtk_3_10 gtk_3_12 gtk_3_14 gtk_3_16 gtk_3_18 gtk_3_20 gtk_deprecated
 
 package gdk
 
diff --git a/vendor/github.com/gotk3/gotk3/gdk/gdk_since_3_10.go b/vendor/github.com/gotk3/gotk3/gdk/gdk_since_3_10.go
index a1c01553c77b..f941b0ab605c 100644
--- a/vendor/github.com/gotk3/gotk3/gdk/gdk_since_3_10.go
+++ b/vendor/github.com/gotk3/gotk3/gdk/gdk_since_3_10.go
@@ -3,5 +3,48 @@
 
 package gdk
 
+// #cgo pkg-config: gdk-3.0 glib-2.0 gobject-2.0
+// #include <gdk/gdk.h>
+// #include "gdk.go.h"
+import "C"
+import (
+	"runtime"
+	"unsafe"
+
+	"github.com/gotk3/gotk3/cairo"
+)
+
 // TODO:
 // gdk_device_get_position_double().
+
+// GetScaleFactor is a wrapper around gdk_window_get_scale_factor().
+func (v *Window) GetScaleFactor() int {
+	return int(C.gdk_window_get_scale_factor(v.native()))
+}
+
+// CreateSimilarImageSurface is a wrapper around gdk_window_create_similar_image_surface().
+func (v *Window) CreateSimilarImageSurface(format cairo.Format, w, h, scale int) (*cairo.Surface, error) {
+	surface := C.gdk_window_create_similar_image_surface(v.native(), C.cairo_format_t(format), C.gint(w), C.gint(h), C.gint(scale))
+
+	status := cairo.Status(C.cairo_surface_status(surface))
+	if status != cairo.STATUS_SUCCESS {
+		return nil, cairo.ErrorStatus(status)
+	}
+
+	return cairo.NewSurface(uintptr(unsafe.Pointer(surface)), false), nil
+}
+
+// CairoSurfaceCreateFromPixbuf is a wrapper around gdk_cairo_surface_create_from_pixbuf().
+func CairoSurfaceCreateFromPixbuf(pixbuf *Pixbuf, scale int, window *Window) (*cairo.Surface, error) {
+	v := C.gdk_cairo_surface_create_from_pixbuf(pixbuf.native(), C.gint(scale), window.native())
+
+	status := cairo.Status(C.cairo_surface_status(v))
+	if status != cairo.STATUS_SUCCESS {
+		return nil, cairo.ErrorStatus(status)
+	}
+
+	surface := cairo.WrapSurface(uintptr(unsafe.Pointer(v)))
+	runtime.SetFinalizer(surface, (*cairo.Surface).Close)
+
+	return surface, nil
+}
diff --git a/vendor/github.com/gotk3/gotk3/gdk/gdk_since_3_16.go.h b/vendor/github.com/gotk3/gotk3/gdk/gdk_since_3_16.go.h
index fe2bf33da245..03add62e5166 100644
--- a/vendor/github.com/gotk3/gotk3/gdk/gdk_since_3_16.go.h
+++ b/vendor/github.com/gotk3/gotk3/gdk/gdk_since_3_16.go.h
@@ -19,8 +19,4 @@
 #include <stdlib.h>
 
 // Type Casting
-static GdkGLContext *
-toGdkGLContext(void *p)
-{
-  return (GDK_GL_CONTEXT(p));
-}
\ No newline at end of file
+static GdkGLContext *toGdkGLContext(void *p) { return (GDK_GL_CONTEXT(p)); }
\ No newline at end of file
diff --git a/vendor/github.com/gotk3/gotk3/gdk/gdk_since_3_18.go b/vendor/github.com/gotk3/gotk3/gdk/gdk_since_3_18.go
new file mode 100644
index 000000000000..b26ebf2ac6cc
--- /dev/null
+++ b/vendor/github.com/gotk3/gotk3/gdk/gdk_since_3_18.go
@@ -0,0 +1,32 @@
+// Same copyright and license as the rest of the files in this project
+
+// +build !gtk_3_6,!gtk_3_8,!gtk_3_10,!gtk_3_12,!gtk_3_14,!gtk_3_16
+// Supports building with gtk 3.18+
+
+package gdk
+
+// #include <gdk/gdk.h>
+import "C"
+
+/*
+ * GdkKeymap
+ */
+
+// GetScrollLockState is a wrapper around gdk_keymap_get_scroll_lock_state().
+func (v *Keymap) GetScrollLockState() bool {
+	return gobool(C.gdk_keymap_get_scroll_lock_state(v.native()))
+}
+
+/*
+ * GdkWindow
+ */
+
+// SetPassThrough is a wrapper around gdk_window_set_pass_through().
+func (v *Window) SetPassThrough(passThrough bool) {
+	C.gdk_window_set_pass_through(v.native(), gbool(passThrough))
+}
+
+// GetPassThrough is a wrapper around gdk_window_get_pass_through().
+func (v *Window) GetPassThrough() bool {
+	return gobool(C.gdk_window_get_pass_through(v.native()))
+}
diff --git a/vendor/github.com/gotk3/gotk3/gdk/gdk_since_3_20.go b/vendor/github.com/gotk3/gotk3/gdk/gdk_since_3_20.go
index beab4560c1c2..15fc6d98f102 100644
--- a/vendor/github.com/gotk3/gotk3/gdk/gdk_since_3_20.go
+++ b/vendor/github.com/gotk3/gotk3/gdk/gdk_since_3_20.go
@@ -3,7 +3,14 @@
 
 package gdk
 
+import (
+	"unsafe"
+
+	"github.com/gotk3/gotk3/glib"
+)
+
 // #include <gdk/gdk.h>
+// #include "gdk_since_3_20.go.h"
 import "C"
 
 /*
@@ -19,9 +26,11 @@ func (v *GLContext) IsLegacy() bool {
  * GdkDisplay
  */
 
-// gdk_display_get_default_seat().
-// gdk_display_list_seats().
+func (v *Display) GetDefaultSeat() (*Seat, error) {
+	return toSeat(C.gdk_display_get_default_seat(v.native()))
+}
 
+// gdk_display_list_seats().
 
 /*
  * GdkDevice
@@ -30,3 +39,51 @@ func (v *GLContext) IsLegacy() bool {
 // TODO:
 // gdk_device_get_axes().
 // gdk_device_get_seat().
+
+/*
+ * GdkSeat
+ */
+
+type Seat struct {
+	*glib.Object
+}
+
+func (v *Seat) native() *C.GdkSeat {
+	if v == nil || v.GObject == nil {
+		return nil
+	}
+	p := unsafe.Pointer(v.GObject)
+	return C.toGdkSeat(p)
+}
+
+// Native returns a pointer to the underlying GdkCursor.
+func (v *Seat) Native() uintptr {
+	return uintptr(unsafe.Pointer(v.native()))
+}
+
+func marshalSeat(p uintptr) (interface{}, error) {
+	c := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
+	obj := &glib.Object{glib.ToGObject(unsafe.Pointer(c))}
+	return &Seat{obj}, nil
+}
+
+func toSeat(s *C.GdkSeat) (*Seat, error) {
+	if s == nil {
+		return nil, nilPtrErr
+	}
+	obj := &glib.Object{glib.ToGObject(unsafe.Pointer(s))}
+	return &Seat{obj}, nil
+}
+
+func (v *Seat) GetPointer() (*Device, error) {
+	return toDevice(C.gdk_seat_get_pointer(v.native()))
+}
+
+/*
+ * GdkRectangle
+ */
+
+// RectangleEqual is a wrapper around gdk_rectangle_equal().
+func (v *Rectangle) RectangleEqual(rect *Rectangle) bool {
+	return gobool(C.gdk_rectangle_equal(v.native(), rect.native()))
+}
diff --git a/vendor/github.com/gotk3/gotk3/gdk/gdk_since_3_20.go.h b/vendor/github.com/gotk3/gotk3/gdk/gdk_since_3_20.go.h
new file mode 100644
index 000000000000..8475e5ffde5f
--- /dev/null
+++ b/vendor/github.com/gotk3/gotk3/gdk/gdk_since_3_20.go.h
@@ -0,0 +1,21 @@
+/*
+ * Copyright (c) 2013-2014 Conformal Systems <info@conformal.com>
+ *
+ * This file originated from: http://opensource.conformal.com/
+ *
+ * Permission to use, copy, modify, and distribute this software for any
+ * purpose with or without fee is hereby granted, provided that the above
+ * copyright notice and this permission notice appear in all copies.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
+ * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
+ * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
+ * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
+ * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
+ * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
+ * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ */
+
+//#include <stdlib.h>
+
+static GdkSeat *toGdkSeat(void *p) { return ((GdkSeat *)p); }
\ No newline at end of file
diff --git a/vendor/github.com/gotk3/gotk3/gdk/gdk_since_3_22.go b/vendor/github.com/gotk3/gotk3/gdk/gdk_since_3_22.go
index 4c10d7487be7..f07e963129f8 100644
--- a/vendor/github.com/gotk3/gotk3/gdk/gdk_since_3_22.go
+++ b/vendor/github.com/gotk3/gotk3/gdk/gdk_since_3_22.go
@@ -28,6 +28,15 @@ import (
 	"github.com/gotk3/gotk3/glib"
 )
 
+func init() {
+
+	tm := []glib.TypeMarshaler{
+		{glib.Type(C.gdk_subpixel_layout_get_type()), marshalSubpixelLayout},
+	}
+
+	glib.RegisterGValueMarshalers(tm)
+}
+
 /*
  * Constants
  */
@@ -35,6 +44,23 @@ import (
 // TODO:
 // GdkSeatCapabilities
 
+// SubpixelLayout is a representation of GDK's GdkSubpixelLayout.
+type SubpixelLayout int
+
+const (
+	SUBPIXEL_LAYOUT_UNKNOWN        SubpixelLayout = C.GDK_SUBPIXEL_LAYOUT_UNKNOWN
+	SUBPIXEL_LAYOUT_NONE           SubpixelLayout = C.GDK_SUBPIXEL_LAYOUT_NONE
+	SUBPIXEL_LAYOUT_HORIZONTAL_RGB SubpixelLayout = C.GDK_SUBPIXEL_LAYOUT_HORIZONTAL_RGB
+	SUBPIXEL_LAYOUT_HORIZONTAL_BGR SubpixelLayout = C.GDK_SUBPIXEL_LAYOUT_HORIZONTAL_BGR
+	SUBPIXEL_LAYOUT_VERTICAL_RGB   SubpixelLayout = C.GDK_SUBPIXEL_LAYOUT_VERTICAL_RGB
+	SUBPIXEL_LAYOUT_VERTICAL_BGR   SubpixelLayout = C.GDK_SUBPIXEL_LAYOUT_VERTICAL_BGR
+)
+
+func marshalSubpixelLayout(p uintptr) (interface{}, error) {
+	c := C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))
+	return SubpixelLayout(c), nil
+}
+
 /*
  * GdkDisplay
  */
@@ -133,13 +159,69 @@ func toMonitor(s *C.GdkMonitor) (*Monitor, error) {
 	return &Monitor{obj}, nil
 }
 
+// GetDisplay is a wrapper around gdk_monitor_get_display().
+func (v *Monitor) GetDisplay() (*Display, error) {
+	return toDisplay(C.gdk_monitor_get_display(v.native()))
+}
+
 // GetGeometry is a wrapper around gdk_monitor_get_geometry().
 func (v *Monitor) GetGeometry() *Rectangle {
 	var rect C.GdkRectangle
 
 	C.gdk_monitor_get_geometry(v.native(), &rect)
 
-	return WrapRectangle(uintptr(unsafe.Pointer(&rect)))
+	return wrapRectangle(&rect)
+}
+
+// GetWorkarea is a wrapper around gdk_monitor_get_workarea().
+func (v *Monitor) GetWorkarea() *Rectangle {
+	var rect C.GdkRectangle
+
+	C.gdk_monitor_get_workarea(v.native(), &rect)
+
+	return wrapRectangle(&rect)
+}
+
+// GetWidthMM is a wrapper around gdk_monitor_get_width_mm().
+func (v *Monitor) GetWidthMM() int {
+	return int(C.gdk_monitor_get_width_mm(v.native()))
+}
+
+// GetHeightMM is a wrapper around gdk_monitor_get_height_mm().
+func (v *Monitor) GetHeightMM() int {
+	return int(C.gdk_monitor_get_height_mm(v.native()))
+}
+
+// GetManufacturer is a wrapper around gdk_monitor_get_manufacturer().
+func (v *Monitor) GetManufacturer() string {
+	// transfer none: don't free data after the code is done.
+	return C.GoString(C.gdk_monitor_get_manufacturer(v.native()))
+}
+
+// GetModel is a wrapper around gdk_monitor_get_model().
+func (v *Monitor) GetModel() string {
+	// transfer none: don't free data after the code is done.
+	return C.GoString(C.gdk_monitor_get_model(v.native()))
+}
+
+// GetScaleFactor is a wrapper around gdk_monitor_get_scale_factor().
+func (v *Monitor) GetScaleFactor() int {
+	return int(C.gdk_monitor_get_scale_factor(v.native()))
+}
+
+// GetRefreshRate is a wrapper around gdk_monitor_get_refresh_rate().
+func (v *Monitor) GetRefreshRate() int {
+	return int(C.gdk_monitor_get_refresh_rate(v.native()))
+}
+
+// GetSubpixelLayout is a wrapper around gdk_monitor_get_subpixel_layout().
+func (v *Monitor) GetSubpixelLayout() SubpixelLayout {
+	return SubpixelLayout(C.gdk_monitor_get_subpixel_layout(v.native()))
+}
+
+// IsPrimary is a wrapper around gdk_monitor_is_primary().
+func (v *Monitor) IsPrimary() bool {
+	return gobool(C.gdk_monitor_is_primary(v.native()))
 }
 
 /*
diff --git a/vendor/github.com/gotk3/gotk3/gdk/gdk_since_3_22.go.h b/vendor/github.com/gotk3/gotk3/gdk/gdk_since_3_22.go.h
index 478c1a1271df..c065b67eed46 100644
--- a/vendor/github.com/gotk3/gotk3/gdk/gdk_since_3_22.go.h
+++ b/vendor/github.com/gotk3/gotk3/gdk/gdk_since_3_22.go.h
@@ -19,8 +19,4 @@
 //#include <stdlib.h>
 
 // Type Casting
-static GdkMonitor *
-toGdkMonitor(void *p)
-{
-    return (GDK_MONITOR(p));
-}
+static GdkMonitor *toGdkMonitor(void *p) { return (GDK_MONITOR(p)); }
diff --git a/vendor/github.com/gotk3/gotk3/gdk/gdk_since_3_8.go b/vendor/github.com/gotk3/gotk3/gdk/gdk_since_3_8.go
index 3357c53968d6..0cfa80268d9c 100644
--- a/vendor/github.com/gotk3/gotk3/gdk/gdk_since_3_8.go
+++ b/vendor/github.com/gotk3/gotk3/gdk/gdk_since_3_8.go
@@ -48,14 +48,14 @@ func init() {
 type ClockPhase int
 
 const (
-	PHASE_NONE          ClockPhase = C.GDK_FRAME_CLOCK_PHASE_NONE         
-	PHASE_FLUSH_EVENTS  ClockPhase = C.GDK_FRAME_CLOCK_PHASE_FLUSH_EVENTS 
-	PHASE_BEFORE_PAINT  ClockPhase = C.GDK_FRAME_CLOCK_PHASE_BEFORE_PAINT 
-	PHASE_UPDATE        ClockPhase = C.GDK_FRAME_CLOCK_PHASE_UPDATE       
-	PHASE_LAYOUT        ClockPhase = C.GDK_FRAME_CLOCK_PHASE_LAYOUT       
-	PHASE_PAINT         ClockPhase = C.GDK_FRAME_CLOCK_PHASE_PAINT        
+	PHASE_NONE          ClockPhase = C.GDK_FRAME_CLOCK_PHASE_NONE
+	PHASE_FLUSH_EVENTS  ClockPhase = C.GDK_FRAME_CLOCK_PHASE_FLUSH_EVENTS
+	PHASE_BEFORE_PAINT  ClockPhase = C.GDK_FRAME_CLOCK_PHASE_BEFORE_PAINT
+	PHASE_UPDATE        ClockPhase = C.GDK_FRAME_CLOCK_PHASE_UPDATE
+	PHASE_LAYOUT        ClockPhase = C.GDK_FRAME_CLOCK_PHASE_LAYOUT
+	PHASE_PAINT         ClockPhase = C.GDK_FRAME_CLOCK_PHASE_PAINT
 	PHASE_RESUME_EVENTS ClockPhase = C.GDK_FRAME_CLOCK_PHASE_RESUME_EVENTS
-	PHASE_AFTER_PAINT   ClockPhase = C.GDK_FRAME_CLOCK_PHASE_AFTER_PAINT  
+	PHASE_AFTER_PAINT   ClockPhase = C.GDK_FRAME_CLOCK_PHASE_AFTER_PAINT
 )
 
 func marshalClockPhase(p uintptr) (interface{}, error) {
@@ -142,12 +142,13 @@ func (v *FrameClock) GetCurrentTimings() (*FrameTimings, error) {
 // GetRefreshInfo is a wrapper around gdk_frame_clock_get_refresh_info().
 func (v *FrameClock) GetRefreshInfo(baseTime int64) (int64, int64) {
 	var cr, cp (*C.gint64)
-	defer C.free(unsafe.Pointer(cr)); defer C.free(unsafe.Pointer(cp))
+	defer C.free(unsafe.Pointer(cr))
+	defer C.free(unsafe.Pointer(cp))
 	b := C.gint64(baseTime)
-	
+
 	C.gdk_frame_clock_get_refresh_info(v.native(), b, cr, cp)
 	r, p := int64(*cr), int64(*cp)
-	return r,p
+	return r, p
 }
 
 // RequestPhase is a wrapper around gdk_frame_clock_request_phase().
@@ -178,7 +179,7 @@ func (v *FrameTimings) Native() uintptr {
 	return uintptr(unsafe.Pointer(v.native()))
 }
 
-func wrapFrameTimings(ptr unsafe.Pointer) (*FrameTimings) {
+func wrapFrameTimings(ptr unsafe.Pointer) *FrameTimings {
 	obj := &glib.Object{glib.ToGObject(ptr)}
 	return &FrameTimings{obj}
 }
diff --git a/vendor/github.com/gotk3/gotk3/gdk/gdk_since_3_8.go.h b/vendor/github.com/gotk3/gotk3/gdk/gdk_since_3_8.go.h
index 42082f7a2cab..3417821e39f6 100644
--- a/vendor/github.com/gotk3/gotk3/gdk/gdk_since_3_8.go.h
+++ b/vendor/github.com/gotk3/gotk3/gdk/gdk_since_3_8.go.h
@@ -19,14 +19,8 @@
 #include <stdlib.h>
 
 // Type Casting
-static GdkFrameClock *
-toGdkFrameClock(void *p)
-{
-	return (GDK_FRAME_CLOCK(p));
-}
+static GdkFrameClock *toGdkFrameClock(void *p) { return (GDK_FRAME_CLOCK(p)); }
 
-static GdkFrameTimings *
-toGdkFrameTimings(void *p)
-{
-	return ((GdkFrameTimings*)p);
+static GdkFrameTimings *toGdkFrameTimings(void *p) {
+  return ((GdkFrameTimings *)p);
 }
\ No newline at end of file
diff --git a/vendor/github.com/gotk3/gotk3/gdk/pixbuf.go b/vendor/github.com/gotk3/gotk3/gdk/pixbuf.go
new file mode 100644
index 000000000000..a803e8a28515
--- /dev/null
+++ b/vendor/github.com/gotk3/gotk3/gdk/pixbuf.go
@@ -0,0 +1,668 @@
+// Same copyright and license as the rest of the files in this project
+
+package gdk
+
+// #cgo pkg-config: gdk-3.0 glib-2.0 gobject-2.0
+// #include <gdk/gdk.h>
+// #include "gdk.go.h"
+// #include "pixbuf.go.h"
+import "C"
+import (
+	"errors"
+	"reflect"
+	"runtime"
+	"strconv"
+	"unsafe"
+
+	"github.com/gotk3/gotk3/glib"
+)
+
+func init() {
+	tm := []glib.TypeMarshaler{
+		// Enums
+		{glib.Type(C.gdk_pixbuf_alpha_mode_get_type()), marshalPixbufAlphaMode},
+
+		// Objects/Interfaces
+		{glib.Type(C.gdk_pixbuf_get_type()), marshalPixbuf},
+		{glib.Type(C.gdk_pixbuf_animation_get_type()), marshalPixbufAnimation},
+		{glib.Type(C.gdk_pixbuf_loader_get_type()), marshalPixbufLoader},
+	}
+	glib.RegisterGValueMarshalers(tm)
+}
+
+/*
+ * Constants
+ */
+
+// TODO:
+// GdkPixbufError
+
+// PixbufRotation is a representation of GDK's GdkPixbufRotation.
+type PixbufRotation int
+
+const (
+	PIXBUF_ROTATE_NONE             PixbufRotation = C.GDK_PIXBUF_ROTATE_NONE
+	PIXBUF_ROTATE_COUNTERCLOCKWISE PixbufRotation = C.GDK_PIXBUF_ROTATE_COUNTERCLOCKWISE
+	PIXBUF_ROTATE_UPSIDEDOWN       PixbufRotation = C.GDK_PIXBUF_ROTATE_UPSIDEDOWN
+	PIXBUF_ROTATE_CLOCKWISE        PixbufRotation = C.GDK_PIXBUF_ROTATE_CLOCKWISE
+)
+
+// PixbufAlphaMode is a representation of GDK's GdkPixbufAlphaMode.
+type PixbufAlphaMode int
+
+const (
+	GDK_PIXBUF_ALPHA_BILEVEL PixbufAlphaMode = C.GDK_PIXBUF_ALPHA_BILEVEL
+	GDK_PIXBUF_ALPHA_FULL    PixbufAlphaMode = C.GDK_PIXBUF_ALPHA_FULL
+)
+
+func marshalPixbufAlphaMode(p uintptr) (interface{}, error) {
+	c := C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))
+	return PixbufAlphaMode(c), nil
+}
+
+/*
+ * GdkPixbuf
+ */
+
+// PixbufGetType is a wrapper around gdk_pixbuf_get_type().
+func PixbufGetType() glib.Type {
+	return glib.Type(C.gdk_pixbuf_get_type())
+}
+
+// Pixbuf is a representation of GDK's GdkPixbuf.
+type Pixbuf struct {
+	*glib.Object
+}
+
+// native returns a pointer to the underlying GdkPixbuf.
+func (v *Pixbuf) native() *C.GdkPixbuf {
+	if v == nil || v.GObject == nil {
+		return nil
+	}
+	p := unsafe.Pointer(v.GObject)
+	return C.toGdkPixbuf(p)
+}
+
+// Native returns a pointer to the underlying GdkPixbuf.
+func (v *Pixbuf) Native() uintptr {
+	return uintptr(unsafe.Pointer(v.native()))
+}
+
+func (v *Pixbuf) NativePrivate() *C.GdkPixbuf {
+	if v == nil || v.GObject == nil {
+		return nil
+	}
+	p := unsafe.Pointer(v.GObject)
+	return C.toGdkPixbuf(p)
+}
+
+func marshalPixbuf(p uintptr) (interface{}, error) {
+	c := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
+	obj := &glib.Object{glib.ToGObject(unsafe.Pointer(c))}
+	return &Pixbuf{obj}, nil
+}
+
+// PixbufNew is a wrapper around gdk_pixbuf_new().
+func PixbufNew(colorspace Colorspace, hasAlpha bool, bitsPerSample, width, height int) (*Pixbuf, error) {
+	c := C.gdk_pixbuf_new(C.GdkColorspace(colorspace), gbool(hasAlpha),
+		C.int(bitsPerSample), C.int(width), C.int(height))
+	if c == nil {
+		return nil, nilPtrErr
+	}
+
+	obj := &glib.Object{glib.ToGObject(unsafe.Pointer(c))}
+	p := &Pixbuf{obj}
+	//obj.Ref()
+	runtime.SetFinalizer(p, func(_ interface{}) { obj.Unref() })
+	return p, nil
+}
+
+// File Loading
+
+// PixbufNewFromFile is a wrapper around gdk_pixbuf_new_from_file().
+func PixbufNewFromFile(filename string) (*Pixbuf, error) {
+	cstr := C.CString(filename)
+	defer C.free(unsafe.Pointer(cstr))
+
+	var err *C.GError
+	c := C.gdk_pixbuf_new_from_file((*C.char)(cstr), &err)
+	if c == nil {
+		defer C.g_error_free(err)
+		return nil, errors.New(C.GoString((*C.char)(err.message)))
+	}
+
+	obj := &glib.Object{glib.ToGObject(unsafe.Pointer(c))}
+	p := &Pixbuf{obj}
+	//obj.Ref()
+	runtime.SetFinalizer(p, func(_ interface{}) { obj.Unref() })
+	return p, nil
+}
+
+// Image Data in Memory
+
+// PixbufNewFromData is a wrapper around gdk_pixbuf_new_from_data().
+func PixbufNewFromData(pixbufData []byte, cs Colorspace, hasAlpha bool, bitsPerSample, width, height, rowStride int) (*Pixbuf, error) {
+	arrayPtr := (*C.guchar)(unsafe.Pointer(&pixbufData[0]))
+
+	c := C.gdk_pixbuf_new_from_data(
+		arrayPtr,
+		C.GdkColorspace(cs),
+		gbool(hasAlpha),
+		C.int(bitsPerSample),
+		C.int(width),
+		C.int(height),
+		C.int(rowStride),
+		nil, // TODO: missing support for GdkPixbufDestroyNotify
+		nil,
+	)
+
+	if c == nil {
+		return nil, nilPtrErr
+	}
+
+	obj := &glib.Object{glib.ToGObject(unsafe.Pointer(c))}
+	p := &Pixbuf{obj}
+	//obj.Ref()
+	runtime.SetFinalizer(p, func(_ interface{}) { obj.Unref() })
+
+	return p, nil
+}
+
+// PixbufNewFromDataOnly is a convenient alternative to PixbufNewFromData() and also a wrapper around gdk_pixbuf_new_from_data().
+func PixbufNewFromDataOnly(pixbufData []byte) (*Pixbuf, error) {
+	pixbufLoader, err := PixbufLoaderNew()
+	if err != nil {
+		return nil, err
+	}
+	return pixbufLoader.WriteAndReturnPixbuf(pixbufData)
+}
+
+// PixbufNewFromResource is a wrapper around gdk_pixbuf_new_from_resource()
+func PixbufNewFromResource(resourcePath string) (*Pixbuf, error) {
+	var gerr *C.GError
+
+	cstr := C.CString(resourcePath)
+	defer C.free(unsafe.Pointer(cstr))
+
+	c := C.gdk_pixbuf_new_from_resource((*C.gchar)(cstr), &gerr)
+
+	if gerr != nil {
+		defer C.g_error_free(gerr)
+		return nil, errors.New(C.GoString(gerr.message))
+	}
+
+	obj := glib.Take(unsafe.Pointer(c))
+	return &Pixbuf{obj}, nil
+}
+
+// PixbufNewFromResourceAtScale is a wrapper around gdk_pixbuf_new_from_resource_at_scale()
+func PixbufNewFromResourceAtScale(resourcePath string, width, height int, preserveAspectRatio bool) (*Pixbuf, error) {
+	var gerr *C.GError
+
+	cstr := C.CString(resourcePath)
+	defer C.free(unsafe.Pointer(cstr))
+
+	cPreserveAspectRatio := gbool(preserveAspectRatio)
+
+	c := C.gdk_pixbuf_new_from_resource_at_scale(
+		(*C.gchar)(cstr),
+		C.gint(width),
+		C.gint(height),
+		C.gboolean(cPreserveAspectRatio),
+		&gerr,
+	)
+
+	if gerr != nil {
+		defer C.g_error_free(gerr)
+		return nil, errors.New(C.GoString(gerr.message))
+	}
+
+	obj := glib.Take(unsafe.Pointer(c))
+	return &Pixbuf{obj}, nil
+}
+
+// TODO:
+// gdk_pixbuf_new_from_xpm_data().
+// gdk_pixbuf_new_subpixbuf()
+
+// PixbufCopy is a wrapper around gdk_pixbuf_copy().
+func PixbufCopy(v *Pixbuf) (*Pixbuf, error) {
+	c := C.gdk_pixbuf_copy(v.native())
+	if c == nil {
+		return nil, nilPtrErr
+	}
+
+	obj := &glib.Object{glib.ToGObject(unsafe.Pointer(c))}
+	p := &Pixbuf{obj}
+	//obj.Ref()
+	runtime.SetFinalizer(p, func(_ interface{}) { obj.Unref() })
+	return p, nil
+}
+
+// The GdkPixbuf Structure
+
+// GetColorspace is a wrapper around gdk_pixbuf_get_colorspace().
+func (v *Pixbuf) GetColorspace() Colorspace {
+	c := C.gdk_pixbuf_get_colorspace(v.native())
+	return Colorspace(c)
+}
+
+// GetNChannels is a wrapper around gdk_pixbuf_get_n_channels().
+func (v *Pixbuf) GetNChannels() int {
+	c := C.gdk_pixbuf_get_n_channels(v.native())
+	return int(c)
+}
+
+// GetHasAlpha is a wrapper around gdk_pixbuf_get_has_alpha().
+func (v *Pixbuf) GetHasAlpha() bool {
+	c := C.gdk_pixbuf_get_has_alpha(v.native())
+	return gobool(c)
+}
+
+// GetBitsPerSample is a wrapper around gdk_pixbuf_get_bits_per_sample().
+func (v *Pixbuf) GetBitsPerSample() int {
+	c := C.gdk_pixbuf_get_bits_per_sample(v.native())
+	return int(c)
+}
+
+// GetPixels is a wrapper around gdk_pixbuf_get_pixels_with_length().
+// A Go slice is used to represent the underlying Pixbuf data array, one
+// byte per channel.
+func (v *Pixbuf) GetPixels() (channels []byte) {
+	var length C.guint
+	c := C.gdk_pixbuf_get_pixels_with_length(v.native(), &length)
+	sliceHeader := (*reflect.SliceHeader)(unsafe.Pointer(&channels))
+	sliceHeader.Data = uintptr(unsafe.Pointer(c))
+	sliceHeader.Len = int(length)
+	sliceHeader.Cap = int(length)
+
+	// To make sure the slice doesn't outlive the Pixbuf, add a reference
+	v.Ref()
+	runtime.SetFinalizer(&channels, func(_ *[]byte) {
+		v.Unref()
+	})
+	return
+}
+
+// GetWidth is a wrapper around gdk_pixbuf_get_width().
+func (v *Pixbuf) GetWidth() int {
+	c := C.gdk_pixbuf_get_width(v.native())
+	return int(c)
+}
+
+// GetHeight is a wrapper around gdk_pixbuf_get_height().
+func (v *Pixbuf) GetHeight() int {
+	c := C.gdk_pixbuf_get_height(v.native())
+	return int(c)
+}
+
+// GetRowstride is a wrapper around gdk_pixbuf_get_rowstride().
+func (v *Pixbuf) GetRowstride() int {
+	c := C.gdk_pixbuf_get_rowstride(v.native())
+	return int(c)
+}
+
+// GetOption is a wrapper around gdk_pixbuf_get_option().  ok is true if
+// the key has an associated value.
+func (v *Pixbuf) GetOption(key string) (value string, ok bool) {
+	cstr := C.CString(key)
+	defer C.free(unsafe.Pointer(cstr))
+	c := C.gdk_pixbuf_get_option(v.native(), (*C.gchar)(cstr))
+	if c == nil {
+		return "", false
+	}
+	return C.GoString((*C.char)(c)), true
+}
+
+// Scaling
+
+// ScaleSimple is a wrapper around gdk_pixbuf_scale_simple().
+func (v *Pixbuf) ScaleSimple(destWidth, destHeight int, interpType InterpType) (*Pixbuf, error) {
+	c := C.gdk_pixbuf_scale_simple(v.native(), C.int(destWidth),
+		C.int(destHeight), C.GdkInterpType(interpType))
+	if c == nil {
+		return nil, nilPtrErr
+	}
+
+	obj := &glib.Object{glib.ToGObject(unsafe.Pointer(c))}
+	p := &Pixbuf{obj}
+	//obj.Ref()
+	runtime.SetFinalizer(p, func(_ interface{}) { obj.Unref() })
+	return p, nil
+}
+
+// Scale is a wrapper around gdk_pixbuf_scale().
+func (v *Pixbuf) Scale(dest *Pixbuf, destX, destY, destWidth, destHeight int, offsetX, offsetY, scaleX, scaleY float64, interpType InterpType) {
+	C.gdk_pixbuf_scale(
+		v.native(),
+		dest.native(),
+		C.int(destX),
+		C.int(destY),
+		C.int(destWidth),
+		C.int(destHeight),
+		C.double(offsetX),
+		C.double(offsetY),
+		C.double(scaleX),
+		C.double(scaleY),
+		C.GdkInterpType(interpType),
+	)
+}
+
+// Composite is a wrapper around gdk_pixbuf_composite().
+func (v *Pixbuf) Composite(dest *Pixbuf, destX, destY, destWidth, destHeight int, offsetX, offsetY, scaleX, scaleY float64, interpType InterpType, overallAlpha int) {
+	C.gdk_pixbuf_composite(
+		v.native(),
+		dest.native(),
+		C.int(destX),
+		C.int(destY),
+		C.int(destWidth),
+		C.int(destHeight),
+		C.double(offsetX),
+		C.double(offsetY),
+		C.double(scaleX),
+		C.double(scaleY),
+		C.GdkInterpType(interpType),
+		C.int(overallAlpha),
+	)
+}
+
+// TODO:
+// gdk_pixbuf_composite_color_simple().
+// gdk_pixbuf_composite_color().
+
+// Utilities
+
+// TODO:
+// gdk_pixbuf_copy_area().
+// gdk_pixbuf_saturate_and_pixelate().
+
+// Fill is a wrapper around gdk_pixbuf_fill(). The given pixel is an RGBA value.
+func (v *Pixbuf) Fill(pixel uint32) {
+	C.gdk_pixbuf_fill(v.native(), C.guint32(pixel))
+}
+
+// AddAlpha is a wrapper around gdk_pixbuf_add_alpha(). If substituteColor is
+// true, then the color specified by r, g and b will be assigned zero opacity.
+func (v *Pixbuf) AddAlpha(substituteColor bool, r, g, b uint8) *Pixbuf {
+	c := C.gdk_pixbuf_add_alpha(v.native(), gbool(substituteColor), C.guchar(r), C.guchar(g), C.guchar(b))
+
+	obj := &glib.Object{glib.ToGObject(unsafe.Pointer(c))}
+	p := &Pixbuf{obj}
+	runtime.SetFinalizer(p, func(_ interface{}) { obj.Unref() })
+
+	return p
+}
+
+// File saving
+
+// TODO:
+// gdk_pixbuf_savev().
+// gdk_pixbuf_save().
+
+// SaveJPEG is a convenience wrapper around gdk_pixbuf_save() for saving image as jpeg file.
+// Quality is a number between 0...100
+func (v *Pixbuf) SaveJPEG(path string, quality int) error {
+	cpath := C.CString(path)
+	cquality := C.CString(strconv.Itoa(quality))
+	defer C.free(unsafe.Pointer(cpath))
+	defer C.free(unsafe.Pointer(cquality))
+
+	var err *C.GError
+	c := C._gdk_pixbuf_save_jpeg(v.native(), cpath, &err, cquality)
+	if !gobool(c) {
+		defer C.g_error_free(err)
+		return errors.New(C.GoString((*C.char)(err.message)))
+	}
+
+	return nil
+}
+
+// SavePNG is a convenience wrapper around gdk_pixbuf_save() for saving image as png file.
+// Compression is a number between 0...9
+func (v *Pixbuf) SavePNG(path string, compression int) error {
+	cpath := C.CString(path)
+	ccompression := C.CString(strconv.Itoa(compression))
+	defer C.free(unsafe.Pointer(cpath))
+	defer C.free(unsafe.Pointer(ccompression))
+
+	var err *C.GError
+	c := C._gdk_pixbuf_save_png(v.native(), cpath, &err, ccompression)
+	if !gobool(c) {
+		defer C.g_error_free(err)
+		return errors.New(C.GoString((*C.char)(err.message)))
+	}
+	return nil
+}
+
+/*
+ * PixbufFormat
+ */
+
+type PixbufFormat struct {
+	format *C.GdkPixbufFormat
+}
+
+// native returns a pointer to the underlying GdkPixbuf.
+func (v *PixbufFormat) native() *C.GdkPixbufFormat {
+	if v == nil {
+		return nil
+	}
+
+	return v.format
+}
+
+func wrapPixbufFormat(obj *C.GdkPixbufFormat) *PixbufFormat {
+	return &PixbufFormat{obj}
+}
+
+// Native returns a pointer to the underlying GdkPixbuf.
+func (v *PixbufFormat) Native() uintptr {
+	return uintptr(unsafe.Pointer(v.native()))
+}
+
+/*
+ * GdkPixbufAnimation
+ */
+
+// PixbufAnimation is a representation of GDK's GdkPixbufAnimation.
+type PixbufAnimation struct {
+	*glib.Object
+}
+
+// native returns a pointer to the underlying GdkPixbufAnimation.
+func (v *PixbufAnimation) native() *C.GdkPixbufAnimation {
+	if v == nil || v.GObject == nil {
+		return nil
+	}
+	p := unsafe.Pointer(v.GObject)
+	return C.toGdkPixbufAnimation(p)
+}
+
+func (v *PixbufAnimation) NativePrivate() *C.GdkPixbufAnimation {
+	if v == nil || v.GObject == nil {
+		return nil
+	}
+	p := unsafe.Pointer(v.GObject)
+	return C.toGdkPixbufAnimation(p)
+}
+
+func (v *PixbufAnimation) GetStaticImage() *Pixbuf {
+	c := C.gdk_pixbuf_animation_get_static_image(v.native())
+	obj := &glib.Object{glib.ToGObject(unsafe.Pointer(c))}
+	p := &Pixbuf{obj}
+
+	// Add a reference so the pixbuf doesn't outlive the parent pixbuf
+	// animation.
+	v.Ref()
+	runtime.SetFinalizer(p, func(*Pixbuf) { v.Unref() })
+
+	return p
+}
+
+func marshalPixbufAnimation(p uintptr) (interface{}, error) {
+	c := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
+	obj := &glib.Object{glib.ToGObject(unsafe.Pointer(c))}
+	return &PixbufAnimation{obj}, nil
+}
+
+// PixbufAnimationNewFromFile is a wrapper around gdk_pixbuf_animation_new_from_file().
+func PixbufAnimationNewFromFile(filename string) (*PixbufAnimation, error) {
+	cstr := C.CString(filename)
+	defer C.free(unsafe.Pointer(cstr))
+
+	var err *C.GError
+	c := C.gdk_pixbuf_animation_new_from_file((*C.char)(cstr), &err)
+	if c == nil {
+		defer C.g_error_free(err)
+		return nil, errors.New(C.GoString((*C.char)(err.message)))
+	}
+
+	obj := &glib.Object{glib.ToGObject(unsafe.Pointer(c))}
+	p := &PixbufAnimation{obj}
+	runtime.SetFinalizer(p, func(_ interface{}) { obj.Unref() })
+	return p, nil
+}
+
+// TODO:
+// gdk_pixbuf_animation_new_from_resource().
+
+/*
+ * GdkPixbufLoader
+ */
+
+// PixbufLoader is a representation of GDK's GdkPixbufLoader.
+// Users of PixbufLoader are expected to call Close() when they are finished.
+type PixbufLoader struct {
+	*glib.Object
+}
+
+// native() returns a pointer to the underlying GdkPixbufLoader.
+func (v *PixbufLoader) native() *C.GdkPixbufLoader {
+	if v == nil || v.GObject == nil {
+		return nil
+	}
+	p := unsafe.Pointer(v.GObject)
+	return C.toGdkPixbufLoader(p)
+}
+
+func marshalPixbufLoader(p uintptr) (interface{}, error) {
+	c := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
+	obj := &glib.Object{glib.ToGObject(unsafe.Pointer(c))}
+	return &PixbufLoader{obj}, nil
+}
+
+// PixbufLoaderNew() is a wrapper around gdk_pixbuf_loader_new().
+func PixbufLoaderNew() (*PixbufLoader, error) {
+	c := C.gdk_pixbuf_loader_new()
+	if c == nil {
+		return nil, nilPtrErr
+	}
+	return &PixbufLoader{glib.AssumeOwnership(unsafe.Pointer(c))}, nil
+}
+
+// PixbufLoaderNewWithType() is a wrapper around gdk_pixbuf_loader_new_with_type().
+func PixbufLoaderNewWithType(t string) (*PixbufLoader, error) {
+	var err *C.GError
+
+	cstr := C.CString(t)
+	defer C.free(unsafe.Pointer(cstr))
+
+	c := C.gdk_pixbuf_loader_new_with_type((*C.char)(cstr), &err)
+	if err != nil {
+		defer C.g_error_free(err)
+		return nil, errors.New(C.GoString((*C.char)(err.message)))
+	}
+
+	if c == nil {
+		return nil, nilPtrErr
+	}
+
+	return &PixbufLoader{glib.AssumeOwnership(unsafe.Pointer(c))}, nil
+}
+
+// Write() is a wrapper around gdk_pixbuf_loader_write().  The
+// function signature differs from the C equivalent to satisify the
+// io.Writer interface.
+func (v *PixbufLoader) Write(data []byte) (int, error) {
+	// n is set to 0 on error, and set to len(data) otherwise.
+	// This is a tiny hacky to satisfy io.Writer and io.WriteCloser,
+	// which would allow access to all io and ioutil goodies,
+	// and play along nice with go environment.
+
+	if len(data) == 0 {
+		return 0, nil
+	}
+
+	var err *C.GError
+	c := C.gdk_pixbuf_loader_write(v.native(),
+		(*C.guchar)(unsafe.Pointer(&data[0])), C.gsize(len(data)),
+		&err)
+
+	if !gobool(c) {
+		defer C.g_error_free(err)
+		return 0, errors.New(C.GoString((*C.char)(err.message)))
+	}
+
+	return len(data), nil
+}
+
+// Convenient function like above for Pixbuf. Write data, close loader and return Pixbuf.
+func (v *PixbufLoader) WriteAndReturnPixbuf(data []byte) (*Pixbuf, error) {
+	_, err := v.Write(data)
+	if err != nil {
+		return nil, err
+	}
+
+	if err := v.Close(); err != nil {
+		return nil, err
+	}
+
+	return v.GetPixbuf()
+}
+
+// Close is a wrapper around gdk_pixbuf_loader_close().  An error is
+// returned instead of a bool like the native C function to support the
+// io.Closer interface.
+func (v *PixbufLoader) Close() error {
+	var err *C.GError
+
+	if ok := gobool(C.gdk_pixbuf_loader_close(v.native(), &err)); !ok {
+		defer C.g_error_free(err)
+		return errors.New(C.GoString((*C.char)(err.message)))
+	}
+	return nil
+}
+
+// GetPixbuf is a wrapper around gdk_pixbuf_loader_get_pixbuf().
+func (v *PixbufLoader) GetPixbuf() (*Pixbuf, error) {
+	c := C.gdk_pixbuf_loader_get_pixbuf(v.native())
+	if c == nil {
+		return nil, nilPtrErr
+	}
+
+	return &Pixbuf{glib.Take(unsafe.Pointer(c))}, nil
+}
+
+// GetAnimation is a wrapper around gdk_pixbuf_loader_get_animation().
+func (v *PixbufLoader) GetAnimation() (*PixbufAnimation, error) {
+	c := C.gdk_pixbuf_loader_get_animation(v.native())
+	if c == nil {
+		return nil, nilPtrErr
+	}
+
+	return &PixbufAnimation{glib.Take(unsafe.Pointer(c))}, nil
+}
+
+// Convenient function like above for Pixbuf. Write data, close loader and return PixbufAnimation.
+func (v *PixbufLoader) WriteAndReturnPixbufAnimation(data []byte) (*PixbufAnimation, error) {
+	_, err := v.Write(data)
+	if err != nil {
+		return nil, err
+	}
+
+	if err := v.Close(); err != nil {
+		return nil, err
+	}
+
+	return v.GetAnimation()
+}
diff --git a/vendor/github.com/gotk3/gotk3/gdk/pixbuf.go.h b/vendor/github.com/gotk3/gotk3/gdk/pixbuf.go.h
new file mode 100644
index 000000000000..618b34e4f330
--- /dev/null
+++ b/vendor/github.com/gotk3/gotk3/gdk/pixbuf.go.h
@@ -0,0 +1,26 @@
+// Same copyright and license as the rest of the files in this project
+
+#include <stdlib.h>
+
+static GdkPixbuf *toGdkPixbuf(void *p) { return (GDK_PIXBUF(p)); }
+
+static GdkPixbufAnimation *toGdkPixbufAnimation(void *p) {
+  return (GDK_PIXBUF_ANIMATION(p));
+}
+static gboolean
+
+_gdk_pixbuf_save_png(GdkPixbuf *pixbuf, const char *filename, GError **err,
+                     const char *compression) {
+  return gdk_pixbuf_save(pixbuf, filename, "png", err, "compression",
+                         compression, NULL);
+}
+
+static gboolean _gdk_pixbuf_save_jpeg(GdkPixbuf *pixbuf, const char *filename,
+                                      GError **err, const char *quality) {
+  return gdk_pixbuf_save(pixbuf, filename, "jpeg", err, "quality", quality,
+                         NULL);
+}
+
+static GdkPixbufLoader *toGdkPixbufLoader(void *p) {
+  return (GDK_PIXBUF_LOADER(p));
+}
diff --git a/vendor/github.com/gotk3/gotk3/gdk/pixbuf_deprecated_since_2_32.go b/vendor/github.com/gotk3/gotk3/gdk/pixbuf_deprecated_since_2_32.go
new file mode 100644
index 000000000000..9bed35a523d2
--- /dev/null
+++ b/vendor/github.com/gotk3/gotk3/gdk/pixbuf_deprecated_since_2_32.go
@@ -0,0 +1,16 @@
+// Same copyright and license as the rest of the files in this project
+
+//+build gdk_pixbuf_2_2 gdk_pixbuf_2_4 gdk_pixbuf_2_6 gdk_pixbuf_2_8 gdk_pixbuf_2_12 gdk_pixbuf_2_14 gdk_pixbuf_2_24 gdk_pixbuf_2_26 gdk_pixbuf_2_28 gdk_pixbuf_2_30 gdk_pixbuf_deprecated
+
+package gdk
+
+// #cgo pkg-config: gdk-3.0 glib-2.0 gobject-2.0
+// #include <gdk/gdk.h>
+// #include "gdk.go.h"
+// #include "pixbuf.go.h"
+import "C"
+
+// Image Data in Memory
+
+// TODO:
+// gdk_pixbuf_new_from_inline().
diff --git a/vendor/github.com/gotk3/gotk3/gdk/pixbuf_since_2_12.go b/vendor/github.com/gotk3/gotk3/gdk/pixbuf_since_2_12.go
new file mode 100644
index 000000000000..1c67505391f3
--- /dev/null
+++ b/vendor/github.com/gotk3/gotk3/gdk/pixbuf_since_2_12.go
@@ -0,0 +1,33 @@
+// Same copyright and license as the rest of the files in this project
+
+// +build !gdk_pixbuf_2_2,!gdk_pixbuf_2_4,!gdk_pixbuf_2_6,!gdk_pixbuf_2_8
+
+package gdk
+
+// #cgo pkg-config: gdk-3.0 glib-2.0 gobject-2.0
+// #include <gdk/gdk.h>
+// #include "gdk.go.h"
+// #include "pixbuf.go.h"
+import "C"
+import (
+	"runtime"
+	"unsafe"
+
+	"github.com/gotk3/gotk3/glib"
+)
+
+// Utilities
+
+// ApplyEmbeddedOrientation is a wrapper around gdk_pixbuf_apply_embedded_orientation().
+func (v *Pixbuf) ApplyEmbeddedOrientation() (*Pixbuf, error) {
+	c := C.gdk_pixbuf_apply_embedded_orientation(v.native())
+	if c == nil {
+		return nil, nilPtrErr
+	}
+
+	obj := &glib.Object{glib.ToGObject(unsafe.Pointer(c))}
+	p := &Pixbuf{obj}
+	//obj.Ref()
+	runtime.SetFinalizer(p, func(_ interface{}) { obj.Unref() })
+	return p, nil
+}
diff --git a/vendor/github.com/gotk3/gotk3/gdk/pixbuf_since_2_14.go b/vendor/github.com/gotk3/gotk3/gdk/pixbuf_since_2_14.go
new file mode 100644
index 000000000000..bd5030d2cfdc
--- /dev/null
+++ b/vendor/github.com/gotk3/gotk3/gdk/pixbuf_since_2_14.go
@@ -0,0 +1,23 @@
+// Same copyright and license as the rest of the files in this project
+
+// +build !gdk_pixbuf_2_2,!gdk_pixbuf_2_4,!gdk_pixbuf_2_6,!gdk_pixbuf_2_8,!gdk_pixbuf_2_12
+
+package gdk
+
+// #cgo pkg-config: gdk-3.0 glib-2.0 gobject-2.0
+// #include <gdk/gdk.h>
+// #include "gdk.go.h"
+// #include "pixbuf.go.h"
+import "C"
+
+// File Loading
+
+// TODO:
+// gdk_pixbuf_new_from_stream().
+// gdk_pixbuf_new_from_stream_async().
+// gdk_pixbuf_new_from_stream_at_scale().
+
+// File saving
+
+// TODO:
+// gdk_pixbuf_save_to_stream().
diff --git a/vendor/github.com/gotk3/gotk3/gdk/gdk_pixbuf_format.go b/vendor/github.com/gotk3/gotk3/gdk/pixbuf_since_2_2.go
similarity index 67%
rename from vendor/github.com/gotk3/gotk3/gdk/gdk_pixbuf_format.go
rename to vendor/github.com/gotk3/gotk3/gdk/pixbuf_since_2_2.go
index 3bcb9b5acd85..8c1a8eaec832 100644
--- a/vendor/github.com/gotk3/gotk3/gdk/gdk_pixbuf_format.go
+++ b/vendor/github.com/gotk3/gotk3/gdk/pixbuf_since_2_2.go
@@ -1,7 +1,11 @@
+// Same copyright and license as the rest of the files in this project
+
 package gdk
 
+// #cgo pkg-config: gdk-3.0 glib-2.0 gobject-2.0
 // #include <gdk/gdk.h>
 // #include "gdk.go.h"
+// #include "pixbuf.go.h"
 import "C"
 import (
 	"unsafe"
@@ -9,39 +13,55 @@ import (
 	"github.com/gotk3/gotk3/glib"
 )
 
-type PixbufFormat struct {
-	format *C.GdkPixbufFormat
+// The GdkPixbuf Structure
+
+// TODO:
+// gdk_pixbuf_set_option().
+
+/*
+ * GdkPixbufLoader
+ */
+
+// SetSize is a wrapper around gdk_pixbuf_loader_set_size().
+func (v *PixbufLoader) SetSize(width, height int) {
+	C.gdk_pixbuf_loader_set_size(v.native(), C.int(width), C.int(height))
 }
 
-// native returns a pointer to the underlying GdkPixbuf.
-func (v *PixbufFormat) native() *C.GdkPixbufFormat {
-	if v == nil {
-		return nil
+/*
+ * PixbufFormat
+ */
+
+// PixbufGetFormats is a wrapper around gdk_pixbuf_get_formats().
+func PixbufGetFormats() []*PixbufFormat {
+	l := (*C.struct__GSList)(C.gdk_pixbuf_get_formats())
+	formats := glib.WrapSList(uintptr(unsafe.Pointer(l)))
+	if formats == nil {
+		return nil // no error. A nil list is considered to be empty.
 	}
 
-	return v.format
-}
+	// "The structures themselves are owned by GdkPixbuf". Free the list only.
+	defer formats.Free()
+
+	ret := make([]*PixbufFormat, 0, formats.Length())
+	formats.Foreach(func(item interface{}) {
+		ret = append(ret, &PixbufFormat{item.(*C.GdkPixbufFormat)})
+	})
 
-// Native returns a pointer to the underlying GdkPixbuf.
-func (v *PixbufFormat) Native() uintptr {
-	return uintptr(unsafe.Pointer(v.native()))
+	return ret
 }
 
+// GetName is a wrapper around gdk_pixbuf_format_get_name().
 func (f *PixbufFormat) GetName() (string, error) {
 	c := C.gdk_pixbuf_format_get_name(f.native())
 	return C.GoString((*C.char)(c)), nil
 }
 
+// GetDescription is a wrapper around gdk_pixbuf_format_get_description().
 func (f *PixbufFormat) GetDescription() (string, error) {
 	c := C.gdk_pixbuf_format_get_description(f.native())
 	return C.GoString((*C.char)(c)), nil
 }
 
-func (f *PixbufFormat) GetLicense() (string, error) {
-	c := C.gdk_pixbuf_format_get_license(f.native())
-	return C.GoString((*C.char)(c)), nil
-}
-
 // GetMimeTypes is a wrapper around gdk_pixbuf_format_get_mime_types().
 func (f *PixbufFormat) GetMimeTypes() []string {
 	var types []string
@@ -70,20 +90,8 @@ func (f *PixbufFormat) GetExtensions() []string {
 	return extensions
 }
 
-func PixbufGetFormats() []*PixbufFormat {
-	l := (*C.struct__GSList)(C.gdk_pixbuf_get_formats())
-	formats := glib.WrapSList(uintptr(unsafe.Pointer(l)))
-	if formats == nil {
-		return nil // no error. A nil list is considered to be empty.
-	}
-
-	// "The structures themselves are owned by GdkPixbuf". Free the list only.
-	defer formats.Free()
-
-	ret := make([]*PixbufFormat, 0, formats.Length())
-	formats.Foreach(func(ptr unsafe.Pointer) {
-		ret = append(ret, &PixbufFormat{(*C.GdkPixbufFormat)(ptr)})
-	})
-
-	return ret
+// GetLicense is a wrapper around gdk_pixbuf_format_get_license().
+func (f *PixbufFormat) GetLicense() (string, error) {
+	c := C.gdk_pixbuf_format_get_license(f.native())
+	return C.GoString((*C.char)(c)), nil
 }
diff --git a/vendor/github.com/gotk3/gotk3/gdk/pixbuf_since_2_22.go b/vendor/github.com/gotk3/gotk3/gdk/pixbuf_since_2_22.go
new file mode 100644
index 000000000000..3446ad096259
--- /dev/null
+++ b/vendor/github.com/gotk3/gotk3/gdk/pixbuf_since_2_22.go
@@ -0,0 +1,18 @@
+// Same copyright and license as the rest of the files in this project
+
+// +build !gdk_pixbuf_2_2,!gdk_pixbuf_2_4,!gdk_pixbuf_2_6,!gdk_pixbuf_2_8,!gdk_pixbuf_2_12,!gdk_pixbuf_2_14
+
+package gdk
+
+// #cgo pkg-config: gdk-3.0 glib-2.0 gobject-2.0
+// #include <gdk/gdk.h>
+// #include "gdk.go.h"
+// #include "pixbuf.go.h"
+import "C"
+
+/*
+ * PixbufFormat
+ */
+
+// TODO:
+// gdk_pixbuf_format_copy().
diff --git a/vendor/github.com/gotk3/gotk3/gdk/pixbuf_since_2_24.go b/vendor/github.com/gotk3/gotk3/gdk/pixbuf_since_2_24.go
new file mode 100644
index 000000000000..c94d5232a09b
--- /dev/null
+++ b/vendor/github.com/gotk3/gotk3/gdk/pixbuf_since_2_24.go
@@ -0,0 +1,23 @@
+// Same copyright and license as the rest of the files in this project
+
+// +build !gdk_pixbuf_2_2,!gdk_pixbuf_2_4,!gdk_pixbuf_2_6,!gdk_pixbuf_2_8,!gdk_pixbuf_2_12,!gdk_pixbuf_2_14,!gdk_pixbuf_2_22
+
+package gdk
+
+// #cgo pkg-config: gdk-3.0 glib-2.0 gobject-2.0
+// #include <gdk/gdk.h>
+// #include "gdk.go.h"
+// #include "pixbuf.go.h"
+import "C"
+
+// File Loading
+
+// TODO:
+// gdk_pixbuf_new_from_stream_finish().
+// gdk_pixbuf_new_from_stream_at_scale_async().
+
+// File saving
+
+// TODO:
+// gdk_pixbuf_save_to_stream_async().
+// gdk_pixbuf_save_to_stream_finish().
diff --git a/vendor/github.com/gotk3/gotk3/gdk/pixbuf_since_2_26.go b/vendor/github.com/gotk3/gotk3/gdk/pixbuf_since_2_26.go
new file mode 100644
index 000000000000..1a17a12cdedd
--- /dev/null
+++ b/vendor/github.com/gotk3/gotk3/gdk/pixbuf_since_2_26.go
@@ -0,0 +1,25 @@
+// Same copyright and license as the rest of the files in this project
+
+// +build !gdk_pixbuf_2_2,!gdk_pixbuf_2_4,!gdk_pixbuf_2_6,!gdk_pixbuf_2_8,!gdk_pixbuf_2_12,!gdk_pixbuf_2_14,!gdk_pixbuf_2_22,!gdk_pixbuf_2_24
+
+package gdk
+
+// #cgo pkg-config: gdk-3.0 glib-2.0 gobject-2.0
+// #include <gdk/gdk.h>
+// #include "gdk.go.h"
+// #include "pixbuf.go.h"
+import "C"
+
+// File Loading
+
+// TODO:
+// gdk_pixbuf_new_from_resource().
+// gdk_pixbuf_new_from_resource_at_scale().
+
+// The GdkPixbuf Structure
+
+// GetByteLength is a wrapper around gdk_pixbuf_get_byte_length().
+func (v *Pixbuf) GetByteLength() int {
+	c := C.gdk_pixbuf_get_byte_length(v.native())
+	return int(c)
+}
diff --git a/vendor/github.com/gotk3/gotk3/gdk/pixbuf_since_2_32.go b/vendor/github.com/gotk3/gotk3/gdk/pixbuf_since_2_32.go
new file mode 100644
index 000000000000..2fced1fe4e78
--- /dev/null
+++ b/vendor/github.com/gotk3/gotk3/gdk/pixbuf_since_2_32.go
@@ -0,0 +1,68 @@
+// Same copyright and license as the rest of the files in this project
+
+// +build !gdk_pixbuf_2_2,!gdk_pixbuf_2_4,!gdk_pixbuf_2_6,!gdk_pixbuf_2_8,!gdk_pixbuf_2_12,!gdk_pixbuf_2_14,!gdk_pixbuf_2_22,!gdk_pixbuf_2_24,!gdk_pixbuf_2_26,!gdk_pixbuf_2_28,!gdk_pixbuf_2_30
+
+package gdk
+
+// #cgo pkg-config: gdk-3.0 glib-2.0 gobject-2.0
+// #include <gdk/gdk.h>
+// #include "gdk.go.h"
+// #include "pixbuf.go.h"
+import "C"
+import (
+	"runtime"
+	"unsafe"
+
+	"github.com/gotk3/gotk3/glib"
+)
+
+// Image Data in Memory
+
+// PixbufNewFromBytes is a wrapper around gdk_pixbuf_new_from_bytes().
+// see go package "encoding/base64"
+func PixbufNewFromBytes(pixbufData []byte, cs Colorspace, hasAlpha bool, bitsPerSample, width, height, rowStride int) (*Pixbuf, error) {
+	arrayPtr := (*C.GBytes)(unsafe.Pointer(&pixbufData[0]))
+
+	c := C.gdk_pixbuf_new_from_bytes(
+		arrayPtr,
+		C.GdkColorspace(cs),
+		gbool(hasAlpha),
+		C.int(bitsPerSample),
+		C.int(width),
+		C.int(height),
+		C.int(rowStride),
+	)
+
+	if c == nil {
+		return nil, nilPtrErr
+	}
+
+	obj := &glib.Object{glib.ToGObject(unsafe.Pointer(c))}
+	p := &Pixbuf{obj}
+	//obj.Ref()
+	runtime.SetFinalizer(p, func(_ interface{}) { obj.Unref() })
+
+	return p, nil
+}
+
+// PixbufNewFromBytesOnly is a convenient alternative to PixbufNewFromBytes() and also a wrapper around gdk_pixbuf_new_from_bytes().
+// see go package "encoding/base64"
+func PixbufNewFromBytesOnly(pixbufData []byte) (*Pixbuf, error) {
+	pixbufLoader, err := PixbufLoaderNew()
+	if err != nil {
+		return nil, err
+	}
+	return pixbufLoader.WriteAndReturnPixbuf(pixbufData)
+}
+
+// File loading
+
+// TODO:
+// gdk_pixbuf_get_file_info_async().
+// gdk_pixbuf_get_file_info_finish().
+
+// The GdkPixbuf Structure
+
+// TODO:
+// gdk_pixbuf_get_options().
+// gdk_pixbuf_read_pixels().
diff --git a/vendor/github.com/gotk3/gotk3/gdk/pixbuf_since_2_36.go b/vendor/github.com/gotk3/gotk3/gdk/pixbuf_since_2_36.go
new file mode 100644
index 000000000000..d423582dd109
--- /dev/null
+++ b/vendor/github.com/gotk3/gotk3/gdk/pixbuf_since_2_36.go
@@ -0,0 +1,23 @@
+// Same copyright and license as the rest of the files in this project
+
+// +build !gdk_pixbuf_2_2,!gdk_pixbuf_2_4,!gdk_pixbuf_2_6,!gdk_pixbuf_2_8,!gdk_pixbuf_2_12,!gdk_pixbuf_2_14,!gdk_pixbuf_2_22,!gdk_pixbuf_2_24,!gdk_pixbuf_2_26,!gdk_pixbuf_2_28,!gdk_pixbuf_2_30,!gdk_pixbuf_2_32
+
+package gdk
+
+// #cgo pkg-config: gdk-3.0 glib-2.0 gobject-2.0
+// #include <gdk/gdk.h>
+// #include "gdk.go.h"
+// #include "pixbuf.go.h"
+import "C"
+
+// File saving
+
+// TODO:
+// gdk_pixbuf_save_to_streamv().
+// gdk_pixbuf_save_to_streamv_async().
+
+// The GdkPixbuf Structure
+
+// TODO:
+// gdk_pixbuf_remove_option().
+// gdk_pixbuf_copy_options().
diff --git a/vendor/github.com/gotk3/gotk3/gdk/pixbuf_since_2_4.go b/vendor/github.com/gotk3/gotk3/gdk/pixbuf_since_2_4.go
new file mode 100644
index 000000000000..b0e90cf768e6
--- /dev/null
+++ b/vendor/github.com/gotk3/gotk3/gdk/pixbuf_since_2_4.go
@@ -0,0 +1,143 @@
+// Same copyright and license as the rest of the files in this project
+
+// +build !gdk_pixbuf_2_2
+
+package gdk
+
+// #cgo pkg-config: gdk-3.0 glib-2.0 gobject-2.0 gmodule-2.0
+// #include <glib.h>
+// #include <gmodule.h>
+// #include <gdk/gdk.h>
+// #include "gdk.go.h"
+// #include "pixbuf.go.h"
+// #include "pixbuf_since_2_4.go.h"
+import "C"
+import (
+	"errors"
+	"io"
+	"reflect"
+	"runtime"
+	"strconv"
+	"unsafe"
+
+	"github.com/gotk3/gotk3/glib"
+	"github.com/gotk3/gotk3/internal/callback"
+)
+
+// File saving
+
+//export goPixbufSaveCallback
+func goPixbufSaveCallback(buf *C.gchar, count C.gsize, gerr **C.GError, id C.gpointer) C.gboolean {
+	v := callback.Get(uintptr(id))
+
+	if v == nil {
+		C._pixbuf_error_set_callback_not_found(gerr)
+		return C.FALSE
+	}
+
+	var bytes []byte
+	header := (*reflect.SliceHeader)((unsafe.Pointer(&bytes)))
+	header.Cap = int(count)
+	header.Len = int(count)
+	header.Data = uintptr(unsafe.Pointer(buf))
+
+	_, err := v.(io.Writer).Write(bytes)
+	if err != nil {
+		cerr := C.CString(err.Error())
+		defer C.free(unsafe.Pointer(cerr))
+
+		C._pixbuf_error_set(gerr, cerr)
+		return C.FALSE
+	}
+
+	return C.TRUE
+}
+
+// WritePNG is a convenience wrapper around gdk_pixbuf_save_to_callback() for
+// saving images using a streaming callback API. Compression is a number from 0
+// to 9.
+func (v *Pixbuf) WritePNG(w io.Writer, compression int) error {
+	ccompression := C.CString(strconv.Itoa(compression))
+	defer C.free(unsafe.Pointer(ccompression))
+
+	id := callback.Assign(w)
+
+	var err *C.GError
+	c := C._gdk_pixbuf_save_png_writer(v.native(), C.gpointer(id), &err, ccompression)
+
+	callback.Delete(id)
+
+	if !gobool(c) {
+		defer C.g_error_free(err)
+		return errors.New(C.GoString((*C.char)(err.message)))
+	}
+
+	return nil
+}
+
+// WriteJPEG is a convenience wrapper around gdk_pixbuf_save_to_callback() for
+// saving images using a streaming callback API. Quality is a number from 0 to
+// 100.
+func (v *Pixbuf) WriteJPEG(w io.Writer, quality int) error {
+	cquality := C.CString(strconv.Itoa(quality))
+	defer C.free(unsafe.Pointer(cquality))
+
+	id := callback.Assign(w)
+
+	var err *C.GError
+	c := C._gdk_pixbuf_save_jpeg_writer(v.native(), C.gpointer(id), &err, cquality)
+
+	callback.Delete(id)
+
+	if !gobool(c) {
+		defer C.g_error_free(err)
+		return errors.New(C.GoString((*C.char)(err.message)))
+	}
+
+	return nil
+}
+
+// TODO:
+// GdkPixbufSaveFunc
+// gdk_pixbuf_save_to_callback().
+// gdk_pixbuf_save_to_callbackv().
+// gdk_pixbuf_save_to_buffer().
+// gdk_pixbuf_save_to_bufferv().
+
+// File Loading
+
+// PixbufNewFromFileAtSize is a wrapper around gdk_pixbuf_new_from_file_at_size().
+func PixbufNewFromFileAtSize(filename string, width, height int) (*Pixbuf, error) {
+	cstr := C.CString(filename)
+	defer C.free(unsafe.Pointer(cstr))
+
+	var err *C.GError = nil
+	c := C.gdk_pixbuf_new_from_file_at_size(cstr, C.int(width), C.int(height), &err)
+	if err != nil {
+		defer C.g_error_free(err)
+		return nil, errors.New(C.GoString((*C.char)(err.message)))
+	}
+
+	if c == nil {
+		return nil, nilPtrErr
+	}
+
+	obj := &glib.Object{glib.ToGObject(unsafe.Pointer(c))}
+	p := &Pixbuf{obj}
+	//obj.Ref()
+	runtime.SetFinalizer(p, func(_ interface{}) { obj.Unref() })
+	return p, nil
+}
+
+// PixbufGetFileInfo is a wrapper around gdk_pixbuf_get_file_info().
+func PixbufGetFileInfo(filename string) (*PixbufFormat, int, int, error) {
+	cstr := C.CString(filename)
+	defer C.free(unsafe.Pointer(cstr))
+	var cw, ch C.gint
+	format := C.gdk_pixbuf_get_file_info((*C.gchar)(cstr), &cw, &ch)
+	if format == nil {
+		return nil, -1, -1, nilPtrErr
+	}
+	// The returned PixbufFormat value is owned by Pixbuf and should not be freed.
+	return wrapPixbufFormat(format), int(cw), int(ch), nil
+}
diff --git a/vendor/github.com/gotk3/gotk3/gdk/pixbuf_since_2_4.go.h b/vendor/github.com/gotk3/gotk3/gdk/pixbuf_since_2_4.go.h
new file mode 100644
index 000000000000..f4f5ee9ff172
--- /dev/null
+++ b/vendor/github.com/gotk3/gotk3/gdk/pixbuf_since_2_4.go.h
@@ -0,0 +1,34 @@
+// Same copyright and license as the rest of the files in this project
+
+#include <stdlib.h>
+
+extern gboolean goPixbufSaveCallback(gchar *buf, gsize count, GError **error,
+                                     gpointer data);
+
+static inline gboolean _gdk_pixbuf_save_png_writer(GdkPixbuf *pixbuf,
+                                                   gpointer callback_id,
+                                                   GError **err,
+                                                   const char *compression) {
+  return gdk_pixbuf_save_to_callback(
+      pixbuf, (GdkPixbufSaveFunc)(goPixbufSaveCallback), callback_id, "png",
+      err, "compression", compression, NULL);
+}
+
+static inline gboolean _gdk_pixbuf_save_jpeg_writer(GdkPixbuf *pixbuf,
+                                                    gpointer callback_id,
+                                                    GError **err,
+                                                    const char *quality) {
+  return gdk_pixbuf_save_to_callback(
+      pixbuf, (GdkPixbufSaveFunc)(goPixbufSaveCallback), callback_id, "jpeg",
+      err, "quality", quality, NULL);
+}
+
+static inline void _pixbuf_error_set_callback_not_found(GError **err) {
+  GQuark domain = g_quark_from_static_string("go error");
+  g_set_error_literal(err, domain, 1, "pixbuf callback not found");
+}
+
+static inline void _pixbuf_error_set(GError **err, char *message) {
+  GQuark domain = g_quark_from_static_string("go error");
+  g_set_error_literal(err, domain, 1, message);
+}
diff --git a/vendor/github.com/gotk3/gotk3/gdk/pixbuf_since_2_6.go b/vendor/github.com/gotk3/gotk3/gdk/pixbuf_since_2_6.go
new file mode 100644
index 000000000000..f52ade50f0b1
--- /dev/null
+++ b/vendor/github.com/gotk3/gotk3/gdk/pixbuf_since_2_6.go
@@ -0,0 +1,74 @@
+// Same copyright and license as the rest of the files in this project
+
+// +build !gdk_pixbuf_2_2,!gdk_pixbuf_2_4
+
+package gdk
+
+// #cgo pkg-config: gdk-3.0 glib-2.0 gobject-2.0
+// #include <gdk/gdk.h>
+// #include "gdk.go.h"
+// #include "pixbuf.go.h"
+import "C"
+import (
+	"errors"
+	"runtime"
+	"unsafe"
+
+	"github.com/gotk3/gotk3/glib"
+)
+
+// File Loading
+
+// PixbufNewFromFileAtScale is a wrapper around gdk_pixbuf_new_from_file_at_scale().
+func PixbufNewFromFileAtScale(filename string, width, height int, preserveAspectRatio bool) (*Pixbuf, error) {
+	cstr := C.CString(filename)
+	defer C.free(unsafe.Pointer(cstr))
+
+	var err *C.GError = nil
+	c := C.gdk_pixbuf_new_from_file_at_scale(cstr, C.int(width), C.int(height),
+		gbool(preserveAspectRatio), &err)
+	if err != nil {
+		defer C.g_error_free(err)
+		return nil, errors.New(C.GoString((*C.char)(err.message)))
+	}
+
+	if c == nil {
+		return nil, nilPtrErr
+	}
+
+	obj := &glib.Object{glib.ToGObject(unsafe.Pointer(c))}
+	p := &Pixbuf{obj}
+	//obj.Ref()
+	runtime.SetFinalizer(p, func(_ interface{}) { obj.Unref() })
+	return p, nil
+}
+
+// Scaling
+
+// RotateSimple is a wrapper around gdk_pixbuf_rotate_simple().
+func (v *Pixbuf) RotateSimple(angle PixbufRotation) (*Pixbuf, error) {
+	c := C.gdk_pixbuf_rotate_simple(v.native(), C.GdkPixbufRotation(angle))
+	if c == nil {
+		return nil, nilPtrErr
+	}
+
+	obj := &glib.Object{glib.ToGObject(unsafe.Pointer(c))}
+	p := &Pixbuf{obj}
+	//obj.Ref()
+	runtime.SetFinalizer(p, func(_ interface{}) { obj.Unref() })
+	return p, nil
+}
+
+// Flip is a wrapper around gdk_pixbuf_flip().
+func (v *Pixbuf) Flip(horizontal bool) (*Pixbuf, error) {
+	c := C.gdk_pixbuf_flip(v.native(), gbool(horizontal))
+	if c == nil {
+		return nil, nilPtrErr
+	}
+
+	obj := &glib.Object{glib.ToGObject(unsafe.Pointer(c))}
+	p := &Pixbuf{obj}
+	//obj.Ref()
+	runtime.SetFinalizer(p, func(_ interface{}) { obj.Unref() })
+	return p, nil
+}
diff --git a/vendor/github.com/gotk3/gotk3/gdk/testing.go b/vendor/github.com/gotk3/gotk3/gdk/testing.go
index 8726ab850a10..be74a7accd4e 100644
--- a/vendor/github.com/gotk3/gotk3/gdk/testing.go
+++ b/vendor/github.com/gotk3/gotk3/gdk/testing.go
@@ -19,7 +19,7 @@ func TestRenderSync(window *Window) {
 // buttonPressRelease: either GDK_BUTTON_PRESS or GDK_BUTTON_RELEASE
 //
 // This is a wrapper around gdk_test_simulate_button().
-func TestSimulateButton(window *Window, x, y int, button uint, modifiers ModifierType, buttonPressRelease EventType) bool {
+func TestSimulateButton(window *Window, x, y int, button Button, modifiers ModifierType, buttonPressRelease EventType) bool {
 	return gobool(C.gdk_test_simulate_button(window.native(), C.gint(x), C.gint(y), C.guint(button), C.GdkModifierType(modifiers), C.GdkEventType(buttonPressRelease)))
 }
 
diff --git a/vendor/github.com/gotk3/gotk3/glib/application.go b/vendor/github.com/gotk3/gotk3/glib/application.go
index 81ad34ec91af..a60cdb95f631 100644
--- a/vendor/github.com/gotk3/gotk3/glib/application.go
+++ b/vendor/github.com/gotk3/gotk3/glib/application.go
@@ -94,23 +94,6 @@ func (v *Application) SetFlags(flags ApplicationFlags) {
 	C.g_application_set_flags(v.native(), C.GApplicationFlags(flags))
 }
 
-// Only available in GLib 2.42+
-// // GetResourceBasePath is a wrapper around g_application_get_resource_base_path().
-// func (v *Application) GetResourceBasePath() string {
-// 	c := C.g_application_get_resource_base_path(v.native())
-
-// 	return C.GoString((*C.char)(c))
-// }
-
-// Only available in GLib 2.42+
-// // SetResourceBasePath is a wrapper around g_application_set_resource_base_path().
-// func (v *Application) SetResourceBasePath(bp string) {
-// 	cstr1 := (*C.gchar)(C.CString(bp))
-// 	defer C.free(unsafe.Pointer(cstr1))
-
-// 	C.g_application_set_resource_base_path(v.native(), cstr1)
-// }
-
 // GetDbusObjectPath is a wrapper around g_application_get_dbus_object_path().
 func (v *Application) GetDbusObjectPath() string {
 	c := C.g_application_get_dbus_object_path(v.native())
@@ -202,12 +185,6 @@ func (v *Application) Run(args []string) int {
 	return int(C.g_application_run(v.native(), C.int(len(args)), cargs))
 }
 
-// Only available in GLib 2.44+
-// // GetIsBusy is a wrapper around g_application_get_is_busy().
-// func (v *Application) GetIsBusy() bool {
-// 	return gobool(C.g_application_get_is_busy(v.native()))
-// }
-
 // void 	g_application_bind_busy_property ()
 // void 	g_application_unbind_busy_property ()
 // gboolean 	g_application_register () // requires GCancellable
diff --git a/vendor/github.com/gotk3/gotk3/glib/cast.go b/vendor/github.com/gotk3/gotk3/glib/cast.go
new file mode 100644
index 000000000000..a73ed63596f4
--- /dev/null
+++ b/vendor/github.com/gotk3/gotk3/glib/cast.go
@@ -0,0 +1,7 @@
+package glib
+
+type WrapFn interface{}
+
+var WrapMap = map[string]WrapFn{
+	"GMenu": wrapMenuModel,
+}
\ No newline at end of file
diff --git a/vendor/github.com/gotk3/gotk3/glib/connect.go b/vendor/github.com/gotk3/gotk3/glib/connect.go
index 9cd9a0eacd1f..453675e25355 100644
--- a/vendor/github.com/gotk3/gotk3/glib/connect.go
+++ b/vendor/github.com/gotk3/gotk3/glib/connect.go
@@ -5,112 +5,148 @@ package glib
 // #include "glib.go.h"
 import "C"
 import (
-	"errors"
 	"reflect"
 	"unsafe"
+
+	"github.com/gotk3/gotk3/internal/closure"
 )
 
 /*
  * Events
  */
 
+// SignalHandle is the ID of a signal handler.
 type SignalHandle uint
 
-func (v *Object) connectClosure(after bool, detailedSignal string, f interface{}, userData ...interface{}) (SignalHandle, error) {
-	if len(userData) > 1 {
-		return 0, errors.New("userData len must be 0 or 1")
-	}
-
-	cstr := C.CString(detailedSignal)
-	defer C.free(unsafe.Pointer(cstr))
-
-	closure, err := ClosureNew(f, userData...)
-	if err != nil {
-		return 0, err
-	}
-
-	C._g_closure_add_finalize_notifier(closure)
-
-	c := C.g_signal_connect_closure(C.gpointer(v.native()),
-		(*C.gchar)(cstr), closure, gbool(after))
-	handle := SignalHandle(c)
-
-	// Map the signal handle to the closure.
-	signals[handle] = closure
-
-	return handle, nil
+// Connect is a wrapper around g_signal_connect_closure(). f must be a function
+// with at least one parameter matching the type it is connected to.
+//
+// It is optional to list the rest of the required types from Gtk, as values
+// that don't fit into the function parameter will simply be ignored; however,
+// extraneous types will trigger a runtime panic. Arguments for f must be a
+// matching Go equivalent type for the C callback, or an interface type which
+// the value may be packed in. If the type is not suitable, a runtime panic will
+// occur when the signal is emitted.
+//
+// Circular References
+//
+// To prevent circular references, prefer declaring Connect functions like so:
+//
+//    obj.Connect(func(obj *ObjType) { obj.Do() })
+//
+// Instead of directly referencing the object from outside like so:
+//
+//    obj.Connect(func() { obj.Do() })
+//
+// When using Connect, beware of referencing variables outside the closure that
+// may cause a circular reference that prevents both Go from garbage collecting
+// the callback and GTK from successfully unreferencing its values.
+//
+// Below is an example piece of code that is considered "leaky":
+//
+//    type ChatBox struct {
+//        gtk.TextView
+//        Loader *gdk.PixbufLoader
+//
+//        State State
+//    }
+//
+//    func (box *ChatBox) Method() {
+//        box.Loader.Connect("size-allocate", func(loader *gdk.PixbufLoader) {
+//            // Here, we're dereferencing box to get the state, which might
+//            // keep box alive along with the PixbufLoader, causing a circular
+//            // reference.
+//            loader.SetSize(box.State.Width, box.State.Height)
+//        })
+//    }
+//
+// There are many solutions to fix the above piece of code. For example,
+// box.Loader could be discarded manually immediately after it's done by setting
+// it to nil, or the signal handle could be disconnected manually, or box could
+// be set to nil after its first call in the callback.
+func (v *Object) Connect(detailedSignal string, f interface{}) SignalHandle {
+	return v.connectClosure(false, detailedSignal, f)
 }
 
-// Connect is a wrapper around g_signal_connect_closure().  f must be
-// a function with a signaure matching the callback signature for
-// detailedSignal.  userData must either 0 or 1 elements which can
-// be optionally passed to f.  If f takes less arguments than it is
-// passed from the GLib runtime, the extra arguments are ignored.
-//
-// Arguments for f must be a matching Go equivalent type for the
-// C callback, or an interface type which the value may be packed in.
-// If the type is not suitable, a runtime panic will occur when the
-// signal is emitted.
-func (v *Object) Connect(detailedSignal string, f interface{}, userData ...interface{}) (SignalHandle, error) {
-	return v.connectClosure(false, detailedSignal, f, userData...)
+// ConnectAfter is a wrapper around g_signal_connect_closure(). The difference
+// between Connect and ConnectAfter is that the latter will be invoked after the
+// default handler, not before. For more information, refer to Connect.
+func (v *Object) ConnectAfter(detailedSignal string, f interface{}) SignalHandle {
+	return v.connectClosure(true, detailedSignal, f)
 }
 
-// ConnectAfter is a wrapper around g_signal_connect_closure().  f must be
-// a function with a signaure matching the callback signature for
-// detailedSignal.  userData must either 0 or 1 elements which can
-// be optionally passed to f.  If f takes less arguments than it is
-// passed from the GLib runtime, the extra arguments are ignored.
-//
-// Arguments for f must be a matching Go equivalent type for the
-// C callback, or an interface type which the value may be packed in.
-// If the type is not suitable, a runtime panic will occur when the
-// signal is emitted.
+// ClosureCheckReceiver, if true, will make GLib check for every single
+// closure's first argument to ensure that it is correct, otherwise it will
+// panic with a message warning about the possible circular references. The
+// receiver in this case is most often the first argument of the callback.
 //
-// The difference between Connect and ConnectAfter is that the latter
-// will be invoked after the default handler, not before.
-func (v *Object) ConnectAfter(detailedSignal string, f interface{}, userData ...interface{}) (SignalHandle, error) {
-	return v.connectClosure(true, detailedSignal, f, userData...)
-}
+// This constant can be changed by using go.mod's replace directive for
+// debugging purposes.
+const ClosureCheckReceiver = false
+
+func (v *Object) connectClosure(after bool, detailedSignal string, f interface{}) SignalHandle {
+	fs := closure.NewFuncStack(f, 2)
+
+	if ClosureCheckReceiver {
+		// This is a bit slow, but we could be careful.
+		objValue, err := v.goValue()
+		if err == nil {
+			fsType := fs.Func.Type()
+			if fsType.NumIn() < 1 {
+				fs.Panicf("callback should have the object receiver to avoid circular references")
+			}
+			objType := reflect.TypeOf(objValue)
+			if first := fsType.In(0); !objType.ConvertibleTo(first) {
+				fs.Panicf("receiver not convertible to expected type %s, got %s", objType, first)
+			}
+		}
+
+		// Allow the type check to fail if we can't get a value marshaler. This
+		// rarely happens, but it might, and we want to at least allow working
+		// around it.
+	}
 
-// ClosureNew creates a new GClosure and adds its callback function
-// to the internally-maintained map. It's exported for visibility to other
-// gotk3 packages and shouldn't be used in application code.
-func ClosureNew(f interface{}, marshalData ...interface{}) (*C.GClosure, error) {
-	// Create a reflect.Value from f.  This is called when the
-	// returned GClosure runs.
-	rf := reflect.ValueOf(f)
+	cstr := C.CString(detailedSignal)
+	defer C.free(unsafe.Pointer(cstr))
 
-	// Create closure context which points to the reflected func.
-	cc := closureContext{rf: rf}
+	gclosure := ClosureNewFunc(fs)
+	c := C.g_signal_connect_closure(C.gpointer(v.native()), (*C.gchar)(cstr), gclosure, gbool(after))
 
-	// Closures can only be created from funcs.
-	if rf.Type().Kind() != reflect.Func {
-		return nil, errors.New("value is not a func")
-	}
+	// TODO: There's a slight race condition here, where
+	// g_signal_connect_closure may trigger signal callbacks before the signal
+	// is registered. It is therefore ideal to have another intermediate ID to
+	// pass into the connect function. This is not a big issue though, since
+	// there isn't really any guarantee that signals should arrive until after
+	// the Connect functions return successfully.
+	closure.RegisterSignal(uint(c), unsafe.Pointer(gclosure))
 
-	if len(marshalData) > 0 {
-		cc.userData = reflect.ValueOf(marshalData[0])
-	}
+	return SignalHandle(c)
+}
 
-	c := C._g_closure_new()
+// ClosureNew creates a new GClosure and adds its callback function to the
+// internal registry. It's exported for visibility to other gotk3 packages and
+// should not be used in a regular application.
+func ClosureNew(f interface{}) *C.GClosure {
+	return ClosureNewFunc(closure.NewFuncStack(f, 2))
+}
 
-	// Associate the GClosure with rf.  rf will be looked up in this
-	// map by the closure when the closure runs.
-	closures.Lock()
-	closures.m[c] = cc
-	closures.Unlock()
+// ClosureNewFunc creates a new GClosure and adds its callback function to the
+// internal registry. It's exported for visibility to other gotk3 packages; it
+// cannot be used in application code, as package closure is part of the
+// internals.
+func ClosureNewFunc(funcStack closure.FuncStack) *C.GClosure {
+	gclosure := C._g_closure_new()
+	closure.Assign(unsafe.Pointer(gclosure), funcStack)
 
-	return c, nil
+	return gclosure
 }
 
-// removeClosure removes a closure from the internal closures map.  This is
+// removeClosure removes a closure from the internal closures map. This is
 // needed to prevent a leak where Go code can access the closure context
 // (along with rf and userdata) even after an object has been destroyed and
 // the GClosure is invalidated and will never run.
 //
 //export removeClosure
-func removeClosure(_ C.gpointer, closure *C.GClosure) {
-	closures.Lock()
-	delete(closures.m, closure)
-	closures.Unlock()
+func removeClosure(_ C.gpointer, gclosure *C.GClosure) {
+	closure.Delete(unsafe.Pointer(gclosure))
 }
diff --git a/vendor/github.com/gotk3/gotk3/glib/gaction.go b/vendor/github.com/gotk3/gotk3/glib/gaction.go
index 94bc32ec9cf4..7fcfdcffd210 100644
--- a/vendor/github.com/gotk3/gotk3/glib/gaction.go
+++ b/vendor/github.com/gotk3/gotk3/glib/gaction.go
@@ -5,7 +5,19 @@ package glib
 // #include <glib-object.h>
 // #include "glib.go.h"
 import "C"
-import "unsafe"
+import (
+	"unsafe"
+)
+
+func init() {
+	tm := []TypeMarshaler{
+		// Objects/Interfaces
+		{Type(C.g_simple_action_get_type()), marshalSimpleAction},
+		{Type(C.g_action_get_type()), marshalAction},
+		{Type(C.g_property_action_get_type()), marshalPropertyAction},
+	}
+	RegisterGValueMarshalers(tm)
+}
 
 // Action is a representation of glib's GAction GInterface.
 type Action struct {
@@ -33,7 +45,13 @@ func (v *Action) toAction() *Action {
 }
 
 // gboolean g_action_parse_detailed_name (const gchar *detailed_name, gchar **action_name, GVariant **target_value, GError **error);
-// gchar * g_action_print_detailed_name (const gchar *action_name, GVariant *target_value);
+
+// ActionPrintDetailedName is a wrapper around g_action_print_detailed_name().
+func ActionPrintDetailedName(action_name string, target_value *Variant) string {
+	cstr := C.CString(action_name)
+	defer C.free(unsafe.Pointer(cstr))
+	return C.GoString((*C.char)(C.g_action_print_detailed_name((*C.gchar)(cstr), target_value.native())))
+}
 
 // native() returns a pointer to the underlying GAction.
 func (v *Action) native() *C.GAction {
@@ -174,12 +192,6 @@ func (v *SimpleAction) SetState(value *Variant) {
 	C.g_simple_action_set_state(v.native(), value.native())
 }
 
-// SetStateHint is a wrapper around g_simple_action_set_state_hint
-// GLib 2.44 only (currently no build tags, so commented out)
-/*func (v *SimpleAction) SetStateHint(stateHint *Variant) {
-	C.g_simple_action_set_state_hint(v.native(), stateHint.native())
-}*/
-
 // PropertyAction is a representation of GPropertyAction
 type PropertyAction struct {
 	Action
diff --git a/vendor/github.com/gotk3/gotk3/glib/gasyncresult.go b/vendor/github.com/gotk3/gotk3/glib/gasyncresult.go
new file mode 100644
index 000000000000..e3826f091913
--- /dev/null
+++ b/vendor/github.com/gotk3/gotk3/glib/gasyncresult.go
@@ -0,0 +1,73 @@
+package glib
+
+// #include <gio/gio.h>
+// #include <glib.h>
+// #include <glib-object.h>
+// #include "glib.go.h"
+import "C"
+import (
+	"errors"
+	"unsafe"
+)
+
+// IAsyncResult is an interface representation of AsyncResult,
+// used to avoid duplication when embedding the type in a wrapper of another GObject-based type.
+type IAsyncResult interface {
+	GetUserData() uintptr
+	GetSourceObject() *Object
+	IsTagged(sourceTag uintptr) bool
+	LegacyPropagateError() error
+}
+
+// AsyncReadyCallback is a representation of GAsyncReadyCallback
+type AsyncReadyCallback func(object *Object, res *AsyncResult)
+
+// AsyncResult is a representation of GIO's GAsyncResult.
+type AsyncResult struct {
+	*Object
+}
+
+// native() returns a pointer to the underlying GAsyncResult.
+func (v *AsyncResult) native() *C.GAsyncResult {
+	if v == nil || v.GObject == nil {
+		return nil
+	}
+	return C.toGAsyncResult(unsafe.Pointer(v.GObject))
+}
+
+func wrapAsyncResult(obj *Object) *AsyncResult {
+	return &AsyncResult{obj}
+}
+
+// GetUserData is a wrapper around g_async_result_get_user_data()
+func (v *AsyncResult) GetUserData() uintptr {
+	c := C.g_async_result_get_user_data(v.native())
+	return uintptr(unsafe.Pointer(c))
+}
+
+// GetSourceObject is a wrapper around g_async_result_get_source_object
+func (v *AsyncResult) GetSourceObject() *Object {
+	obj := C.g_async_result_get_source_object(v.native())
+	if obj == nil {
+		return nil
+	}
+	return wrapObject(unsafe.Pointer(obj))
+}
+
+// IsTagged is a wrapper around g_async_result_is_tagged
+func (v *AsyncResult) IsTagged(sourceTag uintptr) bool {
+	c := C.g_async_result_is_tagged(v.native(), C.gpointer(sourceTag))
+	return gobool(c)
+}
+
+// LegacyPropagateError is a wrapper around g_async_result_legacy_propagate_error
+func (v *AsyncResult) LegacyPropagateError() error {
+	var err *C.GError
+	c := C.g_async_result_legacy_propagate_error(v.native(), &err)
+	isSimpleAsyncResult := gobool(c)
+	if isSimpleAsyncResult {
+		defer C.g_error_free(err)
+		return errors.New(C.GoString((*C.char)(err.message)))
+	}
+	return nil
+}
diff --git a/vendor/github.com/gotk3/gotk3/glib/gcancellable.go b/vendor/github.com/gotk3/gotk3/glib/gcancellable.go
new file mode 100644
index 000000000000..097df4f64235
--- /dev/null
+++ b/vendor/github.com/gotk3/gotk3/glib/gcancellable.go
@@ -0,0 +1,83 @@
+package glib
+
+// #include <gio/gio.h>
+// #include <glib.h>
+// #include <glib-object.h>
+// #include "glib.go.h"
+import "C"
+import (
+	"errors"
+	"unsafe"
+)
+
+// Cancellable is a representation of GIO's GCancellable.
+type Cancellable struct {
+	*Object
+}
+
+// native returns a pointer to the underlying GCancellable.
+func (v *Cancellable) native() *C.GCancellable {
+	if v == nil || v.GObject == nil {
+		return nil
+	}
+	return C.toCancellable(unsafe.Pointer(v.GObject))
+}
+
+func marshalCancellable(p uintptr) (interface{}, error) {
+	c := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
+	return wrapCancellable(wrapObject(unsafe.Pointer(c))), nil
+}
+
+func wrapCancellable(obj *Object) *Cancellable {
+	return &Cancellable{obj}
+}
+
+// CancellableNew is a wrapper around g_cancellable_new().
+func CancellableNew() (*Cancellable, error) {
+	c := C.g_cancellable_new()
+	if c == nil {
+		return nil, nilPtrErr
+	}
+	return wrapCancellable(wrapObject(unsafe.Pointer(c))), nil
+}
+
+// IsCancelled is a wrapper around g_cancellable_is_cancelled().
+func (v *Cancellable) IsCancelled() bool {
+	c := C.g_cancellable_is_cancelled(v.native())
+	return gobool(c)
+}
+
+// SetErrorIfCancelled is a wrapper around g_cancellable_set_error_if_cancelled().
+func (v *Cancellable) SetErrorIfCancelled() error {
+	var err *C.GError
+	c := C.g_cancellable_set_error_if_cancelled(v.native(), &err)
+	cancelled := gobool(c)
+	if cancelled {
+		defer C.g_error_free(err)
+		return errors.New(C.GoString((*C.char)(err.message)))
+	}
+	return nil
+}
+
+// GetFD is a wrapper around g_cancellable_get_fd().
+func (v *Cancellable) GetFD() int {
+	c := C.g_cancellable_get_fd(v.native())
+	return int(c)
+}
+
+// MakePollFD is a wrapper around g_cancellable_make_pollfd().
+// func (v *Cancellable) MakePollFD(pollFD *PollFD) bool {
+// 	c := C.g_cancellable_make_pollfd(v.native(), )
+// 	return gobool(c)
+// }
+
+// ReleaseFD is a wrapper around g_cancellable_release_fd().
+func (v *Cancellable) ReleaseFD() {
+	C.g_cancellable_release_fd(v.native())
+}
+
+// SourceNew is a wrapper around g_cancellable_source_new().
+func (v *Cancellable) SourceNew() *Source {
+	c := C.g_cancellable_source_new(v.native())
+	return wrapSource(c)
+}
diff --git a/vendor/github.com/gotk3/gotk3/glib/gfile.go b/vendor/github.com/gotk3/gotk3/glib/gfile.go
index 6eee9156d041..8b68ba39c65a 100644
--- a/vendor/github.com/gotk3/gotk3/glib/gfile.go
+++ b/vendor/github.com/gotk3/gotk3/glib/gfile.go
@@ -4,33 +4,364 @@ package glib
 // #include <glib.h>
 // #include <glib-object.h>
 // #include "glib.go.h"
+// #include "gfile.go.h"
 import "C"
-import "unsafe"
+import (
+	"errors"
+	"unsafe"
+)
 
+func init() {
+
+	tm := []TypeMarshaler{
+		{Type(C.g_file_get_type()), marshalFile},
+		{Type(C.g_file_input_stream_get_type()), marshalFileInputStream},
+		{Type(C.g_file_output_stream_get_type()), marshalFileOutputStream},
+	}
+
+	RegisterGValueMarshalers(tm)
+}
+
+func goString(cstr *C.gchar) string {
+	return C.GoString((*C.char)(cstr))
+}
+
+/*
+ * GFile
+ */
+
+// File is a representation of GIO's GFile.
 type File struct {
-  *Object
+	*Object
 }
 
-// Native() returns a pointer to the underlying GFile.
-func (v *File ) Native() *C.GFile  {
+// native returns a pointer to the underlying GFile.
+func (v *File) native() *C.GFile {
 	if v == nil || v.GObject == nil {
 		return nil
 	}
-	return C.toGFile(unsafe.Pointer(v.GObject))
+	p := unsafe.Pointer(v.GObject)
+	return C.toGFile(p)
+}
+
+// NativePrivate: to be used inside Gotk3 only.
+func (v *File) NativePrivate() *C.GFile {
+	if v == nil || v.GObject == nil {
+		return nil
+	}
+	p := unsafe.Pointer(v.GObject)
+	return C.toGFile(p)
+}
+
+// Native returns a pointer to the underlying GFile.
+func (v *File) Native() uintptr {
+	return uintptr(unsafe.Pointer(v.native()))
+}
+
+func marshalFile(p uintptr) (interface{}, error) {
+	c := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
+	obj := Take(unsafe.Pointer(c))
+	return wrapFile(obj), nil
+}
+
+func wrapFile(obj *Object) *File {
+	return &File{obj}
 }
 
 // FileNew is a wrapper around g_file_new_for_path().
-func FileNew(title string) *File {
-	cstr1 := (*C.char)(C.CString(title))
-	defer C.free(unsafe.Pointer(cstr1))
+// To avoid breaking previous implementation of GFile ...
+func FileNew(path string) *File {
+	f, e := FileNewForPath(path)
+	if e != nil {
+		return nil
+	}
+	return f
+}
 
-	c := C.g_file_new_for_path(cstr1)
+// FileNewForPath is a wrapper around g_file_new_for_path().
+func FileNewForPath(path string) (*File, error) {
+	cstr := (*C.char)(C.CString(path))
+	defer C.free(unsafe.Pointer(cstr))
+
+	c := C.g_file_new_for_path(cstr)
 	if c == nil {
+		return nil, nilPtrErr
+	}
+	return wrapFile(Take(unsafe.Pointer(c))), nil
+}
+
+// TODO g_file_*** and more
+/*
+void 	(*GFileProgressCallback) ()
+gboolean 	(*GFileReadMoreCallback) ()
+void 	(*GFileMeasureProgressCallback) ()
+GFile * 	g_file_new_for_uri ()
+GFile * 	g_file_new_for_commandline_arg ()
+GFile * 	g_file_new_for_commandline_arg_and_cwd ()
+GFile * 	g_file_new_tmp ()
+GFile * 	g_file_parse_name ()
+GFile * 	g_file_new_build_filename ()
+GFile * 	g_file_dup ()
+guint 	g_file_hash ()
+gboolean 	g_file_equal ()
+char * 	g_file_get_basename ()
+*/
+
+/*
+char *
+g_file_get_path (GFile *file);
+*/
+// GetPath is a wrapper around g_file_get_path().
+func (v *File) GetPath() string {
+	var s string
+	if c := C.g_file_get_path(v.native()); c != nil {
+		s = C.GoString(c)
+		defer C.g_free((C.gpointer)(c))
+	}
+
+	return s
+}
+
+/*
+const char * 	g_file_peek_path ()
+char * 	g_file_get_uri ()
+char * 	g_file_get_parse_name ()
+GFile * 	g_file_get_parent ()
+gboolean 	g_file_has_parent ()
+GFile * 	g_file_get_child ()
+GFile * 	g_file_get_child_for_display_name ()
+gboolean 	g_file_has_prefix ()
+char * 	g_file_get_relative_path ()
+GFile * 	g_file_resolve_relative_path ()
+gboolean 	g_file_is_native ()
+gboolean 	g_file_has_uri_scheme ()
+char * 	g_file_get_uri_scheme ()
+*/
+
+/*
+GFileInputStream *
+g_file_read (GFile *file,
+             GCancellable *cancellable,
+             GError **error);
+*/
+// Read is a wrapper around g_file_read().
+// Object.Unref() must be used after use
+func (v *File) Read(cancellable *Cancellable) (*FileInputStream, error) {
+	var gerr *C.GError
+	c := C.g_file_read(
+		v.native(),
+		cancellable.native(),
+		&gerr)
+	if c == nil {
+		defer C.g_error_free(gerr)
+		return nil, errors.New(goString(gerr.message))
+	}
+	return wrapFileInputStream(Take(unsafe.Pointer(c))), nil
+}
+
+/*
+void 	g_file_read_async ()
+GFileInputStream * 	g_file_read_finish ()
+GFileOutputStream * 	g_file_append_to ()
+GFileOutputStream * 	g_file_create ()
+GFileOutputStream * 	g_file_replace ()
+void 	g_file_append_to_async ()
+GFileOutputStream * 	g_file_append_to_finish ()
+void 	g_file_create_async ()
+GFileOutputStream * 	g_file_create_finish ()
+void 	g_file_replace_async ()
+GFileOutputStream * 	g_file_replace_finish ()
+GFileInfo * 	g_file_query_info ()
+void 	g_file_query_info_async ()
+GFileInfo * 	g_file_query_info_finish ()
+gboolean 	g_file_query_exists ()
+GFileType 	g_file_query_file_type ()
+GFileInfo * 	g_file_query_filesystem_info ()
+void 	g_file_query_filesystem_info_async ()
+GFileInfo * 	g_file_query_filesystem_info_finish ()
+GAppInfo * 	g_file_query_default_handler ()
+void 	g_file_query_default_handler_async ()
+GAppInfo * 	g_file_query_default_handler_finish ()
+gboolean 	g_file_measure_disk_usage ()
+void 	g_file_measure_disk_usage_async ()
+gboolean 	g_file_measure_disk_usage_finish ()
+GMount * 	g_file_find_enclosing_mount ()
+void 	g_file_find_enclosing_mount_async ()
+GMount * 	g_file_find_enclosing_mount_finish ()
+GFileEnumerator * 	g_file_enumerate_children ()
+void 	g_file_enumerate_children_async ()
+GFileEnumerator * 	g_file_enumerate_children_finish ()
+GFile * 	g_file_set_display_name ()
+void 	g_file_set_display_name_async ()
+GFile * 	g_file_set_display_name_finish ()
+gboolean 	g_file_delete ()
+void 	g_file_delete_async ()
+gboolean 	g_file_delete_finish ()
+gboolean 	g_file_trash ()
+void 	g_file_trash_async ()
+gboolean 	g_file_trash_finish ()
+gboolean 	g_file_copy ()
+void 	g_file_copy_async ()
+gboolean 	g_file_copy_finish ()
+gboolean 	g_file_move ()
+gboolean 	g_file_make_directory ()
+void 	g_file_make_directory_async ()
+gboolean 	g_file_make_directory_finish ()
+gboolean 	g_file_make_directory_with_parents ()
+gboolean 	g_file_make_symbolic_link ()
+GFileAttributeInfoList * 	g_file_query_settable_attributes ()
+GFileAttributeInfoList * 	g_file_query_writable_namespaces ()
+gboolean 	g_file_set_attribute ()
+gboolean 	g_file_set_attributes_from_info ()
+void 	g_file_set_attributes_async ()
+gboolean 	g_file_set_attributes_finish ()
+gboolean 	g_file_set_attribute_string ()
+gboolean 	g_file_set_attribute_byte_string ()
+gboolean 	g_file_set_attribute_uint32 ()
+gboolean 	g_file_set_attribute_int32 ()
+gboolean 	g_file_set_attribute_uint64 ()
+gboolean 	g_file_set_attribute_int64 ()
+void 	g_file_mount_mountable ()
+GFile * 	g_file_mount_mountable_finish ()
+void 	g_file_unmount_mountable ()
+gboolean 	g_file_unmount_mountable_finish ()
+void 	g_file_unmount_mountable_with_operation ()
+gboolean 	g_file_unmount_mountable_with_operation_finish ()
+void 	g_file_eject_mountable ()
+gboolean 	g_file_eject_mountable_finish ()
+void 	g_file_eject_mountable_with_operation ()
+gboolean 	g_file_eject_mountable_with_operation_finish ()
+void 	g_file_start_mountable ()
+gboolean 	g_file_start_mountable_finish ()
+void 	g_file_stop_mountable ()
+gboolean 	g_file_stop_mountable_finish ()
+void 	g_file_poll_mountable ()
+gboolean 	g_file_poll_mountable_finish ()
+void 	g_file_mount_enclosing_volume ()
+gboolean 	g_file_mount_enclosing_volume_finish ()
+GFileMonitor * 	g_file_monitor_directory ()
+GFileMonitor * 	g_file_monitor_file ()
+GFileMonitor * 	g_file_monitor ()
+GBytes * 	g_file_load_bytes ()
+void 	g_file_load_bytes_async ()
+GBytes * 	g_file_load_bytes_finish ()
+gboolean 	g_file_load_contents ()
+void 	g_file_load_contents_async ()
+gboolean 	g_file_load_contents_finish ()
+void 	g_file_load_partial_contents_async ()
+gboolean 	g_file_load_partial_contents_finish ()
+gboolean 	g_file_replace_contents ()
+void 	g_file_replace_contents_async ()
+void 	g_file_replace_contents_bytes_async ()
+gboolean 	g_file_replace_contents_finish ()
+gboolean 	g_file_copy_attributes ()
+GFileIOStream * 	g_file_create_readwrite ()
+void 	g_file_create_readwrite_async ()
+GFileIOStream * 	g_file_create_readwrite_finish ()
+GFileIOStream * 	g_file_open_readwrite ()
+void 	g_file_open_readwrite_async ()
+GFileIOStream * 	g_file_open_readwrite_finish ()
+GFileIOStream * 	g_file_replace_readwrite ()
+void 	g_file_replace_readwrite_async ()
+GFileIOStream * 	g_file_replace_readwrite_finish ()
+gboolean 	g_file_supports_thread_contexts ()
+*/
+
+/*
+ * GFileInputStream
+ */
+
+// FileInputStream is a representation of GIO's GFileInputStream.
+type FileInputStream struct {
+	*InputStream
+}
+
+// native returns a pointer to the underlying GFileInputStream.
+func (v *FileInputStream) native() *C.GFileInputStream {
+	if v == nil || v.GObject == nil {
 		return nil
 	}
-	return wrapFile(wrapObject(unsafe.Pointer(c)))
+	p := unsafe.Pointer(v.GObject)
+	return C.toGFileInputStream(p)
 }
 
-func wrapFile(obj *Object) *File {
-	return &File{obj}
+// NativePrivate: to be used inside Gotk3 only.
+func (v *FileInputStream) NativePrivate() *C.GFileInputStream {
+	if v == nil || v.GObject == nil {
+		return nil
+	}
+	p := unsafe.Pointer(v.GObject)
+	return C.toGFileInputStream(p)
 }
+
+// Native returns a pointer to the underlying GFileInputStream.
+func (v *FileInputStream) Native() uintptr {
+	return uintptr(unsafe.Pointer(v.native()))
+}
+
+func marshalFileInputStream(p uintptr) (interface{}, error) {
+	c := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
+	obj := Take(unsafe.Pointer(c))
+	return wrapFileInputStream(obj), nil
+}
+
+func wrapFileInputStream(obj *Object) *FileInputStream {
+	return &FileInputStream{wrapInputStream(obj)}
+}
+
+// TODO g_file_input_stream_query_info and more
+/*
+GFileInfo * 	g_file_input_stream_query_info ()
+void 	g_file_input_stream_query_info_async ()
+GFileInfo * 	g_file_input_stream_query_info_finish ()
+*/
+
+/*
+ * GFileOutputStream
+ */
+
+// FileOutputStream is a representation of GIO's GFileOutputStream.
+type FileOutputStream struct {
+	*OutputStream
+}
+
+// native returns a pointer to the underlying GFileOutputStream.
+func (v *FileOutputStream) native() *C.GFileOutputStream {
+	if v == nil || v.GObject == nil {
+		return nil
+	}
+	p := unsafe.Pointer(v.GObject)
+	return C.toGFileOutputStream(p)
+}
+
+// NativePrivate: to be used inside Gotk3 only.
+func (v *FileOutputStream) NativePrivate() *C.GFileOutputStream {
+	if v == nil || v.GObject == nil {
+		return nil
+	}
+	p := unsafe.Pointer(v.GObject)
+	return C.toGFileOutputStream(p)
+}
+
+// Native returns a pointer to the underlying GFileOutputStream.
+func (v *FileOutputStream) Native() uintptr {
+	return uintptr(unsafe.Pointer(v.native()))
+}
+
+func marshalFileOutputStream(p uintptr) (interface{}, error) {
+	c := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
+	obj := Take(unsafe.Pointer(c))
+	return wrapFileOutputStream(obj), nil
+}
+
+func wrapFileOutputStream(obj *Object) *FileOutputStream {
+	return &FileOutputStream{wrapOutputStream(obj)}
+}
+
+// TODO g_file_output_stream_query_info and more
+/*
+GFileInfo * 	g_file_output_stream_query_info ()
+void 	g_file_output_stream_query_info_async ()
+GFileInfo * 	g_file_output_stream_query_info_finish ()
+char * 	g_file_output_stream_get_etag ()
+*/
diff --git a/vendor/github.com/gotk3/gotk3/glib/gfile.go.h b/vendor/github.com/gotk3/gotk3/glib/gfile.go.h
new file mode 100644
index 000000000000..8892344f31af
--- /dev/null
+++ b/vendor/github.com/gotk3/gotk3/glib/gfile.go.h
@@ -0,0 +1,13 @@
+#include <stdint.h>
+#include <stdio.h>
+#include <stdlib.h>
+
+#include <gio/gio.h>
+
+static GFileInputStream *toGFileInputStream(void *p) {
+  return (G_FILE_INPUT_STREAM(p));
+}
+
+static GFileOutputStream *toGFileOutputStream(void *p) {
+  return (G_FILE_OUTPUT_STREAM(p));
+}
diff --git a/vendor/github.com/gotk3/gotk3/glib/gicon.go b/vendor/github.com/gotk3/gotk3/glib/gicon.go
index 2dadf2c59198..0f178af7a0df 100644
--- a/vendor/github.com/gotk3/gotk3/glib/gicon.go
+++ b/vendor/github.com/gotk3/gotk3/glib/gicon.go
@@ -5,31 +5,173 @@ package glib
 // #include <glib-object.h>
 // #include "glib.go.h"
 import "C"
-import "unsafe"
+import (
+	"errors"
+	"runtime"
+	"unsafe"
+)
 
-type FileIcon struct {
-  *Object
+func init() {
+
+	tm := []TypeMarshaler{
+		{Type(C.g_file_get_type()), marshalFile},
+		{Type(C.g_file_icon_get_type()), marshalFileIcon},
+	}
+
+	RegisterGValueMarshalers(tm)
 }
 
-// native() returns a pointer to the underlying GFileIcon.
-func (v *FileIcon) Native() *C.GFileIcon {
+/*
+ * GIcon
+ */
+
+// Icon is a representation of GIO's GIcon.
+// Interface for icons
+type Icon struct {
+	*Object
+}
+
+// native returns a pointer to the underlying GIcon.
+func (v *Icon) native() *C.GIcon {
 	if v == nil || v.GObject == nil {
 		return nil
 	}
-	return C.toGFileIcon(unsafe.Pointer(v.GObject))
+	p := unsafe.Pointer(v.GObject)
+	return C.toGIcon(p)
 }
 
-// FileIconNew is a wrapper around g_file_icon_new().
-func FileIconNew(path string) *FileIcon {
-  file := FileNew(path)
+// NativePrivate: to be used inside Gotk3 only.
+func (v *Icon) NativePrivate() *C.GIcon {
+	if v == nil || v.GObject == nil {
+		return nil
+	}
+	p := unsafe.Pointer(v.GObject)
+	return C.toGIcon(p)
+}
 
-	c := C.g_file_icon_new(file.Native())
+// Native returns a pointer to the underlying GIcon.
+func (v *Icon) Native() uintptr {
+	return uintptr(unsafe.Pointer(v.native()))
+}
+
+func marshalIcon(p uintptr) (interface{}, error) {
+	c := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
+	obj := Take(unsafe.Pointer(c))
+	return wrapIcon(obj), nil
+}
+
+func wrapIcon(obj *Object) *Icon {
+	return &Icon{obj}
+}
+
+// TODO I dont know how to handle it ...
+/*
+guint
+g_icon_hash (gconstpointer icon);
+*/
+
+// Equal is a wrapper around g_icon_equal().
+func (v *Icon) Equal(icon *Icon) bool {
+	return gobool(C.g_icon_equal(v.native(), icon.native()))
+}
+
+// ToString is a wrapper around g_icon_to_string().
+func (v *Icon) ToString() string {
+	var s string
+	if c := C.g_icon_to_string(v.native()); c != nil {
+		s = goString(c)
+		defer C.g_free((C.gpointer)(c))
+	}
+
+	return s
+}
+
+// IconNewForString is a wrapper around g_icon_new_for_string().
+func IconNewForString(str string) (*Icon, error) {
+	cstr := C.CString(str)
+	defer C.free(unsafe.Pointer(cstr))
+
+	var err *C.GError
+	c := C.g_icon_new_for_string((*C.gchar)(cstr), &err)
 	if c == nil {
+		defer C.g_error_free(err)
+		return nil, errors.New(C.GoString((*C.char)(err.message)))
+	}
+
+	obj := &Object{ToGObject(unsafe.Pointer(c))}
+	i := &Icon{obj}
+
+	runtime.SetFinalizer(i, func(_ interface{}) { obj.Unref() })
+	return i, nil
+}
+
+// TODO Requiere GVariant
+/*
+GVariant * 	g_icon_serialize ()
+GIcon * 	g_icon_deserialize ()
+*/
+
+/*
+ * GFileIcon
+ */
+
+// FileIcon is a representation of GIO's GFileIcon.
+type FileIcon struct {
+	*Object
+}
+
+// native returns a pointer to the underlying GFileIcon.
+func (v *FileIcon) native() *C.GFileIcon {
+	if v == nil || v.GObject == nil {
 		return nil
 	}
-	return wrapFileIcon(wrapObject(unsafe.Pointer(c)))
+	p := unsafe.Pointer(v.GObject)
+	return C.toGFileIcon(p)
+}
+
+// NativePrivate: to be used inside Gotk3 only.
+func (v *FileIcon) NativePrivate() *C.GFileIcon {
+	if v == nil || v.GObject == nil {
+		return nil
+	}
+	p := unsafe.Pointer(v.GObject)
+	return C.toGFileIcon(p)
+}
+
+// Native returns a pointer to the underlying GFileIcon.
+func (v *FileIcon) Native() uintptr {
+	return uintptr(unsafe.Pointer(v.native()))
+}
+
+func marshalFileIcon(p uintptr) (interface{}, error) {
+	c := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
+	obj := Take(unsafe.Pointer(c))
+	return wrapFileIcon(obj), nil
 }
 
 func wrapFileIcon(obj *Object) *FileIcon {
 	return &FileIcon{obj}
 }
+
+// FileIconNewN is a wrapper around g_file_icon_new().
+// This version respect Gtk3 documentation.
+func FileIconNewN(file *File) (*Icon, error) {
+
+	c := C.g_file_icon_new(file.native())
+	if c == nil {
+		return nil, nilPtrErr
+	}
+	return wrapIcon(Take(unsafe.Pointer(c))), nil
+}
+
+// FileIconNew is a wrapper around g_file_icon_new().
+// To not break previous implementation of GFileIcon ...
+func FileIconNew(path string) *Icon {
+	file := FileNew(path)
+
+	c := C.g_file_icon_new(file.native())
+	if c == nil {
+		return nil
+	}
+	return wrapIcon(Take(unsafe.Pointer(c)))
+}
diff --git a/vendor/github.com/gotk3/gotk3/glib/giostream.go b/vendor/github.com/gotk3/gotk3/glib/giostream.go
new file mode 100644
index 000000000000..f91e5a68e05e
--- /dev/null
+++ b/vendor/github.com/gotk3/gotk3/glib/giostream.go
@@ -0,0 +1,437 @@
+package glib
+
+// #cgo pkg-config: gio-2.0 glib-2.0 gobject-2.0
+// #include <gio/gio.h>
+// #include <stdlib.h>
+// #include "giostream.go.h"
+import "C"
+import (
+	"bytes"
+	"errors"
+	"unsafe"
+)
+
+func init() {
+
+	tm := []TypeMarshaler{
+		{Type(C.g_io_stream_get_type()), marshalIOStream},
+		{Type(C.g_output_stream_get_type()), marshalOutputStream},
+		{Type(C.g_input_stream_get_type()), marshalInputStream},
+	}
+
+	RegisterGValueMarshalers(tm)
+}
+
+// OutputStreamSpliceFlags is a representation of GTK's GOutputStreamSpliceFlags.
+type OutputStreamSpliceFlags int
+
+const (
+	OUTPUT_STREAM_SPLICE_NONE         OutputStreamSpliceFlags = C.G_OUTPUT_STREAM_SPLICE_NONE
+	OUTPUT_STREAM_SPLICE_CLOSE_SOURCE                         = C.G_OUTPUT_STREAM_SPLICE_CLOSE_SOURCE
+	OUTPUT_STREAM_SPLICE_CLOSE_TARGET                         = C.G_OUTPUT_STREAM_SPLICE_CLOSE_TARGET
+)
+
+/*
+ * GIOStream
+ */
+
+// IOStream is a representation of GIO's GIOStream.
+// Base class for implementing read/write streams
+type IOStream struct {
+	*Object
+}
+
+// native returns a pointer to the underlying GIOStream.
+func (v *IOStream) native() *C.GIOStream {
+	if v == nil || v.GObject == nil {
+		return nil
+	}
+	p := unsafe.Pointer(v.GObject)
+	return C.toGIOStream(p)
+}
+
+// NativePrivate: to be used inside Gotk3 only.
+func (v *IOStream) NativePrivate() *C.GIOStream {
+	if v == nil || v.GObject == nil {
+		return nil
+	}
+	p := unsafe.Pointer(v.GObject)
+	return C.toGIOStream(p)
+}
+
+// Native returns a pointer to the underlying GIOStream.
+func (v *IOStream) Native() uintptr {
+	return uintptr(unsafe.Pointer(v.native()))
+}
+
+func marshalIOStream(p uintptr) (interface{}, error) {
+	c := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
+	obj := Take(unsafe.Pointer(c))
+	return wrapIOStream(obj), nil
+}
+
+func wrapIOStream(obj *Object) *IOStream {
+	return &IOStream{obj}
+}
+
+/*
+GInputStream * 	g_io_stream_get_input_stream ()
+GOutputStream * 	g_io_stream_get_output_stream ()
+void 	g_io_stream_splice_async ()
+gboolean 	g_io_stream_splice_finish ()
+*/
+
+// Close is a wrapper around g_io_stream_close().
+func (v *IOStream) Close(cancellable *Cancellable) (bool, error) {
+	var gerr *C.GError
+	ok := gobool(C.g_io_stream_close(
+		v.native(),
+		cancellable.native(),
+		&gerr))
+	if !ok {
+		defer C.g_error_free(gerr)
+		return false, errors.New(goString(gerr.message))
+	}
+	return ok, nil
+}
+
+/*
+void 	g_io_stream_close_async ()
+gboolean 	g_io_stream_close_finish ()
+gboolean 	g_io_stream_is_closed ()
+gboolean 	g_io_stream_has_pending ()
+gboolean 	g_io_stream_set_pending ()
+void 	g_io_stream_clear_pending ()
+*/
+
+/*
+ * GInputStream
+ */
+
+// InputStream is a representation of GIO's GInputStream.
+// Base class for implementing streaming input
+type InputStream struct {
+	*Object
+}
+
+// native returns a pointer to the underlying GInputStream.
+func (v *InputStream) native() *C.GInputStream {
+	if v == nil || v.GObject == nil {
+		return nil
+	}
+	p := unsafe.Pointer(v.GObject)
+	return C.toGInputStream(p)
+}
+
+// NativePrivate: to be used inside Gotk3 only.
+func (v *InputStream) NativePrivate() *C.GInputStream {
+	if v == nil || v.GObject == nil {
+		return nil
+	}
+	p := unsafe.Pointer(v.GObject)
+	return C.toGInputStream(p)
+}
+
+// Native returns a pointer to the underlying GInputStream.
+func (v *InputStream) Native() uintptr {
+	return uintptr(unsafe.Pointer(v.native()))
+}
+
+func marshalInputStream(p uintptr) (interface{}, error) {
+	c := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
+	obj := Take(unsafe.Pointer(c))
+	return wrapInputStream(obj), nil
+}
+
+func wrapInputStream(obj *Object) *InputStream {
+	return &InputStream{obj}
+}
+
+// Read is a wrapper around g_input_stream_read().
+func (v *InputStream) Read(length uint, cancellable *Cancellable) (*bytes.Buffer, int, error) {
+	var gerr *C.GError
+	var buffer = bytes.NewBuffer(make([]byte, length))
+
+	c := C.g_input_stream_read(
+		v.native(),
+		unsafe.Pointer(&buffer.Bytes()[0]),
+		C.gsize(length),
+		cancellable.native(),
+		&gerr)
+	if c == -1 {
+		defer C.g_error_free(gerr)
+		return nil, -1, errors.New(goString(gerr.message))
+	}
+	return buffer, int(c), nil
+}
+
+// TODO find a way to get size to be read without asking for ...
+/*
+gboolean
+g_input_stream_read_all (GInputStream *stream,
+                         void *buffer,
+                         gsize count,
+                         gsize *bytes_read,
+                         GCancellable *cancellable,
+                         GError **error);
+*/
+
+/*
+void 	g_input_stream_read_all_async ()
+gboolean 	g_input_stream_read_all_finish ()
+gssize 	g_input_stream_skip ()
+*/
+
+// Close is a wrapper around g_input_stream_close().
+func (v *InputStream) Close(cancellable *Cancellable) (bool, error) {
+	var gerr *C.GError
+	ok := gobool(C.g_input_stream_close(
+		v.native(),
+		cancellable.native(),
+		&gerr))
+	if !ok {
+		defer C.g_error_free(gerr)
+		return false, errors.New(goString(gerr.message))
+	}
+	return ok, nil
+}
+
+// TODO g_input_stream***
+/*
+void 	g_input_stream_read_async ()
+gssize 	g_input_stream_read_finish ()
+void 	g_input_stream_skip_async ()
+gssize 	g_input_stream_skip_finish ()
+void 	g_input_stream_close_async ()
+gboolean 	g_input_stream_close_finish ()
+*/
+
+// IsClosed is a wrapper around g_input_stream_is_closed().
+func (v *InputStream) IsClosed() bool {
+	return gobool(C.g_input_stream_is_closed(v.native()))
+}
+
+// HasPending is a wrapper around g_input_stream_has_pending().
+func (v *InputStream) HasPending() bool {
+	return gobool(C.g_input_stream_has_pending(v.native()))
+}
+
+// SetPending is a wrapper around g_input_stream_set_pending().
+func (v *InputStream) SetPending() (bool, error) {
+	var gerr *C.GError
+	ok := gobool(C.g_input_stream_set_pending(
+		v.native(),
+		&gerr))
+	if !ok {
+		defer C.g_error_free(gerr)
+		return false, errors.New(goString(gerr.message))
+	}
+	return ok, nil
+}
+
+// ClearPending is a wrapper around g_input_stream_clear_pending().
+func (v *InputStream) ClearPending() {
+	C.g_input_stream_clear_pending(v.native())
+}
+
+/* Useless functions due to Go language specification and actual
+   implementation of (*InputStream).Read that do same thing.
+
+GBytes * 	g_input_stream_read_bytes ()
+void 	g_input_stream_read_bytes_async ()
+GBytes * 	g_input_stream_read_bytes_finish ()
+*/
+
+/*
+ * GOutputStream
+ */
+
+// OutputStream is a representation of GIO's GOutputStream.
+// Base class for implementing streaming output
+type OutputStream struct {
+	*Object
+}
+
+// native returns a pointer to the underlying GOutputStream.
+func (v *OutputStream) native() *C.GOutputStream {
+	if v == nil || v.GObject == nil {
+		return nil
+	}
+	p := unsafe.Pointer(v.GObject)
+	return C.toGOutputStream(p)
+}
+
+// NativePrivate: to be used inside Gotk3 only.
+func (v *OutputStream) NativePrivate() *C.GOutputStream {
+	if v == nil || v.GObject == nil {
+		return nil
+	}
+	p := unsafe.Pointer(v.GObject)
+	return C.toGOutputStream(p)
+}
+
+// Native returns a pointer to the underlying GOutputStream.
+func (v *OutputStream) Native() uintptr {
+	return uintptr(unsafe.Pointer(v.native()))
+}
+
+func marshalOutputStream(p uintptr) (interface{}, error) {
+	c := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
+	obj := Take(unsafe.Pointer(c))
+	return wrapOutputStream(obj), nil
+}
+
+func wrapOutputStream(obj *Object) *OutputStream {
+	return &OutputStream{obj}
+}
+
+/*
+gssize
+g_output_stream_write (GOutputStream *stream,
+                       const void *buffer,
+                       gsize count,
+                       GCancellable *cancellable,
+                       GError **error);
+*/
+
+// Write is a wrapper around g_output_stream_write().
+// buffer := bytes.NewBuffer(make([]byte, length))
+func (v *OutputStream) Write(buffer *bytes.Buffer, cancellable *Cancellable) (int, error) {
+	var gerr *C.GError
+	length := buffer.Len()
+
+	c := C.g_output_stream_write(
+		v.native(),
+		unsafe.Pointer(&buffer.Bytes()[0]),
+		C.gsize(length),
+		cancellable.native(),
+		&gerr)
+	if c == -1 {
+		defer C.g_error_free(gerr)
+		return -1, errors.New(goString(gerr.message))
+	}
+	return int(c), nil
+}
+
+// Write is a wrapper around g_output_stream_write().
+// func (v *OutputStream) Write(buffer *[]byte, cancellable *Cancellable) (int, error) {
+// 	// cdata := C.CString(data)
+// 	// defer C.free(unsafe.Pointer(cdata))
+// 	var gerr *C.GError
+// 	c := C.g_output_stream_write(
+// 		v.native(),
+// 		unsafe.Pointer(buffer),
+// 		C.gsize(len(*buffer)),
+// 		cancellable.native(),
+// 		&gerr)
+// 	if c == -1 {
+// 		defer C.g_error_free(gerr)
+// 		return 0, errors.New(goString(gerr.message))
+// 	}
+// 	return int(c), nil
+// }
+
+/*
+gboolean 	g_output_stream_write_all ()
+*/
+
+// TODO outputStream asynch functions
+/*
+void 	g_output_stream_write_all_async ()
+gboolean 	g_output_stream_write_all_finish ()
+gboolean 	g_output_stream_writev ()
+gboolean 	g_output_stream_writev_all ()
+void 	g_output_stream_writev_async ()
+gboolean 	g_output_stream_writev_finish ()
+void 	g_output_stream_writev_all_async ()
+gboolean 	g_output_stream_writev_all_finish ()
+*/
+/*
+gssize
+g_output_stream_splice (GOutputStream *stream,
+                        GInputStream *source,
+                        GOutputStreamSpliceFlags flags,
+                        GCancellable *cancellable,
+                        GError **error);
+*/
+
+// Flush is a wrapper around g_output_stream_flush().
+func (v *OutputStream) Flush(cancellable *Cancellable) (bool, error) {
+	var gerr *C.GError
+	ok := gobool(C.g_output_stream_flush(
+		v.native(),
+		cancellable.native(),
+		&gerr))
+	if !ok {
+		defer C.g_error_free(gerr)
+		return false, errors.New(goString(gerr.message))
+	}
+	return ok, nil
+}
+
+// Close is a wrapper around g_output_stream_close().
+func (v *OutputStream) Close(cancellable *Cancellable) (bool, error) {
+	var gerr *C.GError
+	ok := gobool(C.g_output_stream_close(
+		v.native(),
+		cancellable.native(),
+		&gerr))
+	if !ok {
+		defer C.g_error_free(gerr)
+		return false, errors.New(goString(gerr.message))
+	}
+	return ok, nil
+}
+
+// TODO outputStream asynch functions
+/*
+void 	g_output_stream_write_async ()
+gssize 	g_output_stream_write_finish ()
+void 	g_output_stream_splice_async ()
+gssize 	g_output_stream_splice_finish ()
+void 	g_output_stream_flush_async ()
+gboolean 	g_output_stream_flush_finish ()
+void 	g_output_stream_close_async ()
+gboolean 	g_output_stream_close_finish ()
+*/
+
+// IsClosing is a wrapper around g_output_stream_is_closing().
+func (v *OutputStream) IsClosing() bool {
+	return gobool(C.g_output_stream_is_closing(v.native()))
+}
+
+// IsClosed is a wrapper around g_output_stream_is_closed().
+func (v *OutputStream) IsClosed() bool {
+	return gobool(C.g_output_stream_is_closed(v.native()))
+}
+
+// HasPending is a wrapper around g_output_stream_has_pending().
+func (v *OutputStream) HasPending() bool {
+	return gobool(C.g_output_stream_has_pending(v.native()))
+}
+
+// SetPending is a wrapper around g_output_stream_set_pending().
+func (v *OutputStream) SetPending() (bool, error) {
+	var gerr *C.GError
+	ok := gobool(C.g_output_stream_set_pending(
+		v.native(),
+		&gerr))
+	if !ok {
+		defer C.g_error_free(gerr)
+		return false, errors.New(goString(gerr.message))
+	}
+	return ok, nil
+}
+
+// ClearPending is a wrapper around g_output_stream_clear_pending().
+func (v *OutputStream) ClearPending() {
+	C.g_output_stream_clear_pending(v.native())
+}
+
+/*
+gssize 	g_output_stream_write_bytes ()
+void 	g_output_stream_write_bytes_async ()
+gssize 	g_output_stream_write_bytes_finish ()
+gboolean 	g_output_stream_printf ()
+gboolean 	g_output_stream_vprintf ()
+*/
diff --git a/vendor/github.com/gotk3/gotk3/glib/giostream.go.h b/vendor/github.com/gotk3/gotk3/glib/giostream.go.h
new file mode 100644
index 000000000000..44eba09923f9
--- /dev/null
+++ b/vendor/github.com/gotk3/gotk3/glib/giostream.go.h
@@ -0,0 +1,14 @@
+#pragma once
+
+#include <gio/gio.h>
+#include <glib.h>
+#include <stdint.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+
+static GIOStream *toGIOStream(void *p) { return (G_IO_STREAM(p)); }
+
+static GInputStream *toGInputStream(void *p) { return (G_INPUT_STREAM(p)); }
+
+static GOutputStream *toGOutputStream(void *p) { return (G_OUTPUT_STREAM(p)); }
diff --git a/vendor/github.com/gotk3/gotk3/glib/glib.go b/vendor/github.com/gotk3/gotk3/glib/glib.go
index 601473c3100b..1354163debba 100644
--- a/vendor/github.com/gotk3/gotk3/glib/glib.go
+++ b/vendor/github.com/gotk3/gotk3/glib/glib.go
@@ -14,12 +14,13 @@
 // ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 // OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 
-// Package glib provides Go bindings for GLib 2.  Supports version 2.36
-// and later.
+// Package glib provides Go bindings for GLib 2. It supports version 2.36 and
+// later.
 package glib
 
 // #cgo pkg-config: gio-2.0 glib-2.0 gobject-2.0
 // #include <gio/gio.h>
+// #include <stdlib.h>
 // #include <glib.h>
 // #include <glib-object.h>
 // #include "glib.go.h"
@@ -28,11 +29,12 @@ import "C"
 import (
 	"errors"
 	"fmt"
-	"os"
 	"reflect"
 	"runtime"
-	"sync"
 	"unsafe"
+
+	"github.com/gotk3/gotk3/internal/callback"
+	"github.com/gotk3/gotk3/internal/closure"
 )
 
 /*
@@ -45,6 +47,7 @@ func gbool(b bool) C.gboolean {
 	}
 	return C.gboolean(0)
 }
+
 func gobool(b C.gboolean) bool {
 	if b != 0 {
 		return true
@@ -56,23 +59,7 @@ func gobool(b C.gboolean) bool {
  * Unexported vars
  */
 
-type closureContext struct {
-	rf       reflect.Value
-	userData reflect.Value
-}
-
-var (
-	errNilPtr = errors.New("cgo returned unexpected nil pointer")
-
-	closures = struct {
-		sync.RWMutex
-		m map[*C.GClosure]closureContext
-	}{
-		m: make(map[*C.GClosure]closureContext),
-	}
-
-	signals = make(map[SignalHandle]*C.GClosure)
-)
+var nilPtrErr = errors.New("cgo returned unexpected nil pointer")
 
 /*
  * Constants
@@ -106,6 +93,11 @@ const (
 	TYPE_VARIANT   Type = C.G_TYPE_VARIANT
 )
 
+// IsValue checks whether the passed in type can be used for g_value_init().
+func (t Type) IsValue() bool {
+	return gobool(C._g_type_is_value(C.GType(t)))
+}
+
 // Name is a wrapper around g_type_name().
 func (t Type) Name() string {
 	return C.GoString((*C.char)(C.g_type_name(C.GType(t))))
@@ -138,6 +130,18 @@ func TypeNextBase(leafType, rootType Type) Type {
 	return Type(C.g_type_next_base(C.GType(leafType), C.GType(rootType)))
 }
 
+// SettingsBindFlags is a representation of GLib's GSettingsBindFlags.
+type SettingsBindFlags int
+
+const (
+	SETTINGS_BIND_DEFAULT        SettingsBindFlags = C.G_SETTINGS_BIND_DEFAULT
+	SETTINGS_BIND_GET            SettingsBindFlags = C.G_SETTINGS_BIND_GET
+	SETTINGS_BIND_SET            SettingsBindFlags = C.G_SETTINGS_BIND_SET
+	SETTINGS_BIND_NO_SENSITIVITY SettingsBindFlags = C.G_SETTINGS_BIND_NO_SENSITIVITY
+	SETTINGS_BIND_GET_NO_CHANGES SettingsBindFlags = C.G_SETTINGS_BIND_GET_NO_CHANGES
+	SETTINGS_BIND_INVERT_BOOLEAN SettingsBindFlags = C.G_SETTINGS_BIND_INVERT_BOOLEAN
+)
+
 // UserDirectory is a representation of GLib's GUserDirectory.
 type UserDirectory int
 
@@ -172,36 +176,38 @@ const (
 // goMarshal is called by the GLib runtime when a closure needs to be invoked.
 // The closure will be invoked with as many arguments as it can take, from 0 to
 // the full amount provided by the call. If the closure asks for more parameters
-// than there are to give, a warning is printed to stderr and the closure is
-// not run.
+// than there are to give, then a runtime panic will occur.
 //
 //export goMarshal
-func goMarshal(closure *C.GClosure, retValue *C.GValue,
-	nParams C.guint, params *C.GValue,
-	invocationHint C.gpointer, marshalData *C.GValue) {
+func goMarshal(
+	gclosure *C.GClosure,
+	retValue *C.GValue,
+	nParams C.guint,
+	params *C.GValue,
+	invocationHint C.gpointer,
+	marshalData *C.GValue) {
+
+	// Get the function value associated with this callback closure.
+	fs := closure.Get(unsafe.Pointer(gclosure))
+	if !fs.IsValid() {
+		// Possible data race, bail.
+		return
+	}
 
-	// Get the context associated with this callback closure.
-	closures.RLock()
-	cc := closures.m[closure]
-	closures.RUnlock()
+	fsType := fs.Func.Type()
 
-	// Get number of parameters passed in.  If user data was saved with the
-	// closure context, increment the total number of parameters.
+	// Get number of parameters passed in.
 	nGLibParams := int(nParams)
 	nTotalParams := nGLibParams
-	if cc.userData.IsValid() {
-		nTotalParams++
-	}
 
-	// Get number of parameters from the callback closure.  If this exceeds
-	// the total number of marshaled parameters, a warning will be printed
-	// to stderr, and the callback will not be run.
-	nCbParams := cc.rf.Type().NumIn()
+	// Reflect may panic, so we defer recover here to re-panic with our trace.
+	defer fs.TryRepanic()
+
+	// Get number of parameters from the callback closure. If this exceeds
+	// the total number of marshaled parameters, trigger a runtime panic.
+	nCbParams := fsType.NumIn()
 	if nCbParams > nTotalParams {
-		fmt.Fprintf(os.Stderr,
-			"too many closure args: have %d, max allowed %d\n",
-			nCbParams, nTotalParams)
-		return
+		fs.Panicf("too many closure args: have %d, max %d", nCbParams, nTotalParams)
 	}
 
 	// Create a slice of reflect.Values as arguments to call the function.
@@ -211,50 +217,73 @@ func goMarshal(closure *C.GClosure, retValue *C.GValue,
 	// Fill beginning of args, up to the minimum of the total number of callback
 	// parameters and parameters from the glib runtime.
 	for i := 0; i < nCbParams && i < nGLibParams; i++ {
-		v := &Value{&gValues[i]}
+		v := Value{&gValues[i]}
+
 		val, err := v.GoValue()
 		if err != nil {
-			fmt.Fprintf(os.Stderr,
-				"no suitable Go value for arg %d: %v\n", i, err)
-			return
+			fs.Panicf("no suitable Go value for arg %d: %v", i, err)
 		}
-		// Parameters that are descendants of GObject come wrapped in another GObject.
-		// For C applications, the default marshaller (g_cclosure_marshal_VOID__VOID in
-		// gmarshal.c in the GTK glib library) 'peeks' into the enclosing object and
-		// passes the wrapped object to the handler. Use the *Object.goValue function
-		// to emulate that for Go signal handlers.
+
+		// Parameters that are descendants of GObject come wrapped in another
+		// GObject. For C applications, the default marshaller
+		// (g_cclosure_marshal_VOID__VOID in gmarshal.c in the GTK glib library)
+		// 'peeks' into the enclosing object and passes the wrapped object to
+		// the handler. Use the *Object.goValue function to emulate that for Go
+		// signal handlers.
 		switch objVal := val.(type) {
 		case *Object:
-			innerVal, err := objVal.goValue()
-			if err != nil {
-				// print warning and leave val unchanged to preserve old
-				// behavior
-				fmt.Fprintf(os.Stderr,
-					"warning: no suitable Go value from object for arg %d: %v\n", i, err)
-			} else {
+			if innerVal, err := objVal.goValue(); err == nil {
 				val = innerVal
 			}
+
+		case *Variant:
+			switch ts := objVal.TypeString(); ts {
+			case "s":
+				val = objVal.GetString()
+			case "b":
+				val = gobool(C.g_variant_get_boolean(objVal.native()))
+			case "d":
+				val = float64(C.g_variant_get_double(objVal.native()))
+			case "n":
+				val = int16(C.g_variant_get_int16(objVal.native()))
+			case "i":
+				val = int32(C.g_variant_get_int32(objVal.native()))
+			case "x":
+				val = int64(C.g_variant_get_int64(objVal.native()))
+			case "y":
+				val = uint8(C.g_variant_get_byte(objVal.native()))
+			case "q":
+				val = uint16(C.g_variant_get_uint16(objVal.native()))
+			case "u":
+				val = uint32(C.g_variant_get_uint32(objVal.native()))
+			case "t":
+				val = uint64(C.g_variant_get_uint64(objVal.native()))
+			default:
+				fs.Panicf("variant conversion not yet implemented for type %s", ts)
+			}
 		}
-		rv := reflect.ValueOf(val)
-		args = append(args, rv.Convert(cc.rf.Type().In(i)))
-	}
 
-	// If non-nil user data was passed in and not all args have been set,
-	// get and set the reflect.Value directly from the GValue.
-	if cc.userData.IsValid() && len(args) < cap(args) {
-		args = append(args, cc.userData.Convert(cc.rf.Type().In(nCbParams-1)))
+		args = append(args, reflect.ValueOf(val).Convert(fsType.In(i)))
 	}
 
-	// Call closure with args. If the callback returns one or more
-	// values, save the GValue equivalent of the first.
-	rv := cc.rf.Call(args)
+	// Call closure with args. If the callback returns one or more values, save
+	// the GValue equivalent of the first.
+	rv := fs.Func.Call(args)
 	if retValue != nil && len(rv) > 0 {
-		if g, err := GValue(rv[0].Interface()); err != nil {
-			fmt.Fprintf(os.Stderr,
-				"cannot save callback return value: %v", err)
-		} else {
-			*retValue = *g.native()
+		g, err := GValue(rv[0].Interface())
+		if err != nil {
+			fs.Panicf("cannot save callback return value: %v", err)
 		}
+
+		t, _, err := g.Type()
+		if err != nil {
+			fs.Panicf("cannot determine callback return value: %v", err)
+		}
+
+		// Explicitly copy the return value as it may point to go-owned memory.
+		C.g_value_unset(retValue)
+		C.g_value_init(retValue, C.GType(t))
+		C.g_value_copy(g.native(), retValue)
 	}
 }
 
@@ -271,80 +300,108 @@ func gValueSlice(values *C.GValue, nValues int) (slice []C.GValue) {
  * Main event loop
  */
 
+// Priority is the enumerated type for GLib priority event sources.
+type Priority int
+
+const (
+	PRIORITY_HIGH         Priority = C.G_PRIORITY_HIGH
+	PRIORITY_DEFAULT      Priority = C.G_PRIORITY_DEFAULT // TimeoutAdd
+	PRIORITY_HIGH_IDLE    Priority = C.G_PRIORITY_HIGH_IDLE
+	PRIORITY_DEFAULT_IDLE Priority = C.G_PRIORITY_DEFAULT_IDLE // IdleAdd
+	PRIORITY_LOW          Priority = C.G_PRIORITY_LOW
+)
+
 type SourceHandle uint
 
-// IdleAdd adds an idle source to the default main event loop
-// context.  After running once, the source func will be removed
-// from the main event loop, unless f returns a single bool true.
+// sourceFunc is the callback for g_idle_add_full and g_timeout_add_full that
+// replaces the GClosure API.
 //
-// This function will cause a panic when f eventually runs if the
-// types of args do not match those of f.
-func IdleAdd(f interface{}, args ...interface{}) (SourceHandle, error) {
-	// f must be a func with no parameters.
-	rf := reflect.ValueOf(f)
-	if rf.Type().Kind() != reflect.Func {
-		return 0, errors.New("f is not a function")
+//export sourceFunc
+func sourceFunc(data C.gpointer) C.gboolean {
+	v := callback.Get(uintptr(data))
+	fs := v.(closure.FuncStack)
+
+	rv := fs.Func.Call(nil)
+	if len(rv) == 1 && rv[0].Bool() {
+		return C.TRUE
 	}
 
-	// Create an idle source func to be added to the main loop context.
-	idleSrc := C.g_idle_source_new()
-	if idleSrc == nil {
-		return 0, errNilPtr
-	}
-	return sourceAttach(idleSrc, rf, args...)
+	return C.FALSE
+}
+
+//export removeSourceFunc
+func removeSourceFunc(data C.gpointer) {
+	callback.Delete(uintptr(data))
 }
 
-// TimeoutAdd adds an timeout source to the default main event loop
-// context.  After running once, the source func will be removed
-// from the main event loop, unless f returns a single bool true.
+var (
+	_sourceFunc       = (*[0]byte)(C.sourceFunc)
+	_removeSourceFunc = (*[0]byte)(C.removeSourceFunc)
+)
+
+// IdleAdd adds an idle source to the default main event loop context with the
+// DefaultIdle priority. If f is not a function with no parameter, then IdleAdd
+// will panic.
 //
-// This function will cause a panic when f eventually runs if the
-// types of args do not match those of f.
-// timeout is in milliseconds
-func TimeoutAdd(timeout uint, f interface{}, args ...interface{}) (SourceHandle, error) {
-	// f must be a func with no parameters.
-	rf := reflect.ValueOf(f)
-	if rf.Type().Kind() != reflect.Func {
-		return 0, errors.New("f is not a function")
-	}
+// After running once, the source func will be removed from the main event loop,
+// unless f returns a single bool true.
+func IdleAdd(f interface{}) SourceHandle {
+	return idleAdd(PRIORITY_DEFAULT_IDLE, f)
+}
 
-	// Create a timeout source func to be added to the main loop context.
-	timeoutSrc := C.g_timeout_source_new(C.guint(timeout))
-	if timeoutSrc == nil {
-		return 0, errNilPtr
-	}
+// IdleAddPriority adds an idle source to the default main event loop context
+// with the given priority. Its behavior is the same as IdleAdd.
+func IdleAddPriority(priority Priority, f interface{}) SourceHandle {
+	return idleAdd(priority, f)
+}
+
+func idleAdd(priority Priority, f interface{}) SourceHandle {
+	fs := closure.NewIdleFuncStack(f, 2)
+	id := C.gpointer(callback.Assign(fs))
+	h := C.g_idle_add_full(C.gint(priority), _sourceFunc, id, _removeSourceFunc)
 
-	return sourceAttach(timeoutSrc, rf, args...)
+	return SourceHandle(h)
 }
 
-// sourceAttach attaches a source to the default main loop context.
-func sourceAttach(src *C.struct__GSource, rf reflect.Value, args ...interface{}) (SourceHandle, error) {
-	if src == nil {
-		return 0, errNilPtr
-	}
+// TimeoutAdd adds an timeout source to the default main event loop context.
+// Timeout is in milliseconds. If f is not a function with no parameter, then it
+// will panic.
+//
+// After running once, the source func will be removed from the main event loop,
+// unless f returns a single bool true.
+func TimeoutAdd(milliseconds uint, f interface{}) SourceHandle {
+	return timeoutAdd(milliseconds, false, PRIORITY_DEFAULT, f)
+}
 
-	// rf must be a func with no parameters.
-	if rf.Type().Kind() != reflect.Func {
-		C.g_source_destroy(src)
-		return 0, errors.New("rf is not a function")
-	}
+// TimeoutAddPriority is similar to TimeoutAdd with the given priority. Refer to
+// TimeoutAdd for more information.
+func TimeoutAddPriority(milliseconds uint, priority Priority, f interface{}) SourceHandle {
+	return timeoutAdd(milliseconds, false, priority, f)
+}
 
-	// Create a new GClosure from f that invalidates itself when
-	// f returns false.  The error is ignored here, as this will
-	// always be a function.
-	var closure *C.GClosure
-	closure, _ = ClosureNew(rf.Interface(), args...)
+// TimeoutSecondsAdd is similar to TimeoutAdd, except with seconds granularity.
+func TimeoutSecondsAdd(seconds uint, f interface{}) SourceHandle {
+	return timeoutAdd(seconds, true, PRIORITY_DEFAULT, f)
+}
 
-	// Remove closure context when closure is finalized.
-	C._g_closure_add_finalize_notifier(closure)
+// TimeoutSecondsAddPriority adds a timeout source with the given priority.
+// Refer to TimeoutSecondsAdd for more information.
+func TimeoutSecondsAddPriority(seconds uint, priority Priority, f interface{}) SourceHandle {
+	return timeoutAdd(seconds, true, priority, f)
+}
 
-	// Set closure to run as a callback when the idle source runs.
-	C.g_source_set_closure(src, closure)
+func timeoutAdd(time uint, sec bool, priority Priority, f interface{}) SourceHandle {
+	fs := closure.NewIdleFuncStack(f, 2)
+	id := C.gpointer(callback.Assign(fs))
 
-	// Attach the idle source func to the default main event loop
-	// context.
-	cid := C.g_source_attach(src, nil)
-	return SourceHandle(cid), nil
+	var h C.guint
+	if sec {
+		h = C.g_timeout_add_seconds_full(C.gint(priority), C.guint(time), _sourceFunc, id, _removeSourceFunc)
+	} else {
+		h = C.g_timeout_add_full(C.gint(priority), C.guint(time), _sourceFunc, id, _removeSourceFunc)
+	}
+
+	return SourceHandle(h)
 }
 
 // Destroy is a wrapper around g_source_destroy()
@@ -416,17 +473,49 @@ func GetUserRuntimeDir() string {
 func GetUserSpecialDir(directory UserDirectory) (string, error) {
 	c := C.g_get_user_special_dir(C.GUserDirectory(directory))
 	if c == nil {
-		return "", errNilPtr
+		return "", nilPtrErr
 	}
 	return C.GoString((*C.char)(c)), nil
 }
 
+// FormatSize is a wrapper around g_format_size().
+func FormatSize(size uint64) string {
+	char := C.g_format_size(C.guint64(size))
+	defer C.free(unsafe.Pointer(char))
+
+	return C.GoString(char)
+}
+
+// FormatSizeFlags are flags to modify the format of the string returned by
+// FormatSizeFull.
+type FormatSizeFlags int
+
+const (
+	FORMAT_SIZE_DEFAULT     FormatSizeFlags = C.G_FORMAT_SIZE_DEFAULT
+	FORMAT_SIZE_LONG_FORMAT FormatSizeFlags = C.G_FORMAT_SIZE_LONG_FORMAT
+	FORMAT_SIZE_IEC_UNITS   FormatSizeFlags = C.G_FORMAT_SIZE_IEC_UNITS
+	FORMAT_SIZE_BITS        FormatSizeFlags = C.G_FORMAT_SIZE_BITS
+)
+
+// FormatSizeFull is a wrapper around g_format_size_full().
+func FormatSizeFull(size uint64, flags FormatSizeFlags) string {
+	char := C.g_format_size_full(C.guint64(size), C.GFormatSizeFlags(flags))
+	defer C.free(unsafe.Pointer(char))
+
+	return C.GoString(char)
+}
+
+// SpacedPrimesClosest is a wrapper around g_spaced_primes_closest().
+func SpacedPrimesClosest(num uint) uint {
+	return uint(C.g_spaced_primes_closest(C.guint(num)))
+}
+
 /*
  * GObject
  */
 
 // IObject is an interface type implemented by Object and all types which embed
-// an Object.  It is meant to be used as a type for function arguments which
+// an Object. It is meant to be used as a type for function arguments which
 // require GObjects or any subclasses thereof.
 type IObject interface {
 	toGObject() *C.GObject
@@ -451,6 +540,9 @@ func (v *Object) toObject() *Object {
 
 // newObject creates a new Object from a GObject pointer.
 func newObject(p *C.GObject) *Object {
+	if p == nil {
+		return nil
+	}
 	return &Object{GObject: p}
 }
 
@@ -486,15 +578,31 @@ func (v *Object) goValue() (interface{}, error) {
 // Take wraps a unsafe.Pointer as a glib.Object, taking ownership of it.
 // This function is exported for visibility in other gotk3 packages and
 // is not meant to be used by applications.
+//
+// To be clear, this should mostly be used when Gtk says "transfer none". Refer
+// to AssumeOwnership for more details.
 func Take(ptr unsafe.Pointer) *Object {
 	obj := newObject(ToGObject(ptr))
-
-	if obj.IsFloating() {
-		obj.RefSink()
-	} else {
-		obj.Ref()
+	if obj == nil {
+		return nil
 	}
 
+	obj.RefSink()
+	runtime.SetFinalizer(obj, (*Object).Unref)
+	return obj
+}
+
+// AssumeOwnership is similar to Take, except the function does not take a
+// reference. This is usually used for newly constructed objects that for some
+// reason does not have an initial floating reference.
+//
+// To be clear, this should often be used when Gtk says "transfer full", as it
+// means the ownership is transferred to the caller, so we can assume that much.
+// This is in contrary to Take, which is used when Gtk says "transfer none", as
+// we're now referencing an object that might possibly be kept, so we should
+// mark as such.
+func AssumeOwnership(ptr unsafe.Pointer) *Object {
+	obj := newObject(ToGObject(ptr))
 	runtime.SetFinalizer(obj, (*Object).Unref)
 	return obj
 }
@@ -519,7 +627,8 @@ func (v *Object) TypeFromInstance() Type {
 // This function is exported for visibility in other gotk3 packages and
 // is not meant to be used by applications.
 func ToGObject(p unsafe.Pointer) *C.GObject {
-	return C.toGObject(p)
+	return (*C.GObject)(p)
+	// return C.toGObject(p)
 }
 
 // Ref is a wrapper around g_object_ref().
@@ -556,104 +665,9 @@ func (v *Object) StopEmission(s string) {
 		(*C.gchar)(cstr))
 }
 
-// Set is a wrapper around g_object_set().  However, unlike
-// g_object_set(), this function only sets one name value pair.  Make
-// multiple calls to this function to set multiple properties.
+// Set calls SetProperty.
 func (v *Object) Set(name string, value interface{}) error {
 	return v.SetProperty(name, value)
-	/*
-		cstr := C.CString(name)
-		defer C.free(unsafe.Pointer(cstr))
-
-		if _, ok := value.(Object); ok {
-			value = value.(Object).GObject
-		}
-
-		// Can't call g_object_set() as it uses a variable arg list, use a
-		// wrapper instead
-		var p unsafe.Pointer
-		switch v := value.(type) {
-		case bool:
-			c := gbool(v)
-			p = unsafe.Pointer(&c)
-
-		case int8:
-			c := C.gint8(v)
-			p = unsafe.Pointer(&c)
-
-		case int16:
-			c := C.gint16(v)
-			p = unsafe.Pointer(&c)
-
-		case int32:
-			c := C.gint32(v)
-			p = unsafe.Pointer(&c)
-
-		case int64:
-			c := C.gint64(v)
-			p = unsafe.Pointer(&c)
-
-		case int:
-			c := C.gint(v)
-			p = unsafe.Pointer(&c)
-
-		case uint8:
-			c := C.guchar(v)
-			p = unsafe.Pointer(&c)
-
-		case uint16:
-			c := C.guint16(v)
-			p = unsafe.Pointer(&c)
-
-		case uint32:
-			c := C.guint32(v)
-			p = unsafe.Pointer(&c)
-
-		case uint64:
-			c := C.guint64(v)
-			p = unsafe.Pointer(&c)
-
-		case uint:
-			c := C.guint(v)
-			p = unsafe.Pointer(&c)
-
-		case uintptr:
-			p = unsafe.Pointer(C.gpointer(v))
-
-		case float32:
-			c := C.gfloat(v)
-			p = unsafe.Pointer(&c)
-
-		case float64:
-			c := C.gdouble(v)
-			p = unsafe.Pointer(&c)
-
-		case string:
-			cstr := C.CString(v)
-			defer C.g_free(C.gpointer(unsafe.Pointer(cstr)))
-			p = unsafe.Pointer(&cstr)
-
-		default:
-			if pv, ok := value.(unsafe.Pointer); ok {
-				p = pv
-			} else {
-				val := reflect.ValueOf(value)
-				switch val.Kind() {
-				case reflect.Int, reflect.Int8, reflect.Int16,
-					reflect.Int32, reflect.Int64:
-					c := C.int(val.Int())
-					p = unsafe.Pointer(&c)
-
-				case reflect.Uintptr, reflect.Ptr, reflect.UnsafePointer:
-					p = unsafe.Pointer(C.gpointer(val.Pointer()))
-				}
-			}
-		}
-		if p == nil {
-			return errors.New("Unable to perform type conversion")
-		}
-		C._g_object_set_one(C.gpointer(v.GObject), (*C.gchar)(cstr), p)
-		return nil*/
 }
 
 // GetPropertyType returns the Type of a property of the underlying GObject.
@@ -704,92 +718,6 @@ func (v *Object) SetProperty(name string, value interface{}) error {
 	return nil
 }
 
-// pointerVal attempts to return an unsafe.Pointer for value.
-// Not all types are understood, in which case a nil Pointer
-// is returned.
-/*func pointerVal(value interface{}) unsafe.Pointer {
-	var p unsafe.Pointer
-	switch v := value.(type) {
-	case bool:
-		c := gbool(v)
-		p = unsafe.Pointer(&c)
-
-	case int8:
-		c := C.gint8(v)
-		p = unsafe.Pointer(&c)
-
-	case int16:
-		c := C.gint16(v)
-		p = unsafe.Pointer(&c)
-
-	case int32:
-		c := C.gint32(v)
-		p = unsafe.Pointer(&c)
-
-	case int64:
-		c := C.gint64(v)
-		p = unsafe.Pointer(&c)
-
-	case int:
-		c := C.gint(v)
-		p = unsafe.Pointer(&c)
-
-	case uint8:
-		c := C.guchar(v)
-		p = unsafe.Pointer(&c)
-
-	case uint16:
-		c := C.guint16(v)
-		p = unsafe.Pointer(&c)
-
-	case uint32:
-		c := C.guint32(v)
-		p = unsafe.Pointer(&c)
-
-	case uint64:
-		c := C.guint64(v)
-		p = unsafe.Pointer(&c)
-
-	case uint:
-		c := C.guint(v)
-		p = unsafe.Pointer(&c)
-
-	case uintptr:
-		p = unsafe.Pointer(C.gpointer(v))
-
-	case float32:
-		c := C.gfloat(v)
-		p = unsafe.Pointer(&c)
-
-	case float64:
-		c := C.gdouble(v)
-		p = unsafe.Pointer(&c)
-
-	case string:
-		cstr := C.CString(v)
-		defer C.free(unsafe.Pointer(cstr))
-		p = unsafe.Pointer(cstr)
-
-	default:
-		if pv, ok := value.(unsafe.Pointer); ok {
-			p = pv
-		} else {
-			val := reflect.ValueOf(value)
-			switch val.Kind() {
-			case reflect.Int, reflect.Int8, reflect.Int16,
-				reflect.Int32, reflect.Int64:
-				c := C.int(val.Int())
-				p = unsafe.Pointer(&c)
-
-			case reflect.Uintptr, reflect.Ptr, reflect.UnsafePointer:
-				p = unsafe.Pointer(C.gpointer(val.Pointer()))
-			}
-		}
-	}
-
-	return p
-}*/
-
 /*
  * GObject Signals
  */
@@ -849,24 +777,14 @@ func (v *Object) HandlerUnblock(handle SignalHandle) {
 
 // HandlerDisconnect is a wrapper around g_signal_handler_disconnect().
 func (v *Object) HandlerDisconnect(handle SignalHandle) {
+	// Ensure that Gtk will not use the closure beforehand.
 	C.g_signal_handler_disconnect(C.gpointer(v.GObject), C.gulong(handle))
-	C.g_closure_invalidate(signals[handle])
-	delete(closures.m, signals[handle])
-	delete(signals, handle)
+	closure.DisconnectSignal(uint(handle))
 }
 
 // Wrapper function for new objects with reference management.
 func wrapObject(ptr unsafe.Pointer) *Object {
-	obj := &Object{ToGObject(ptr)}
-
-	if obj.IsFloating() {
-		obj.RefSink()
-	} else {
-		obj.Ref()
-	}
-
-	runtime.SetFinalizer(obj, (*Object).Unref)
-	return obj
+	return Take(ptr)
 }
 
 /*
@@ -911,8 +829,18 @@ func (v *Value) native() *C.GValue {
 }
 
 // Native returns a pointer to the underlying GValue.
-func (v *Value) Native() unsafe.Pointer {
-	return unsafe.Pointer(v.native())
+func (v *Value) Native() uintptr {
+	return uintptr(unsafe.Pointer(v.native()))
+}
+
+// IsValue checks if value is a valid and initialized GValue structure.
+func (v *Value) IsValue() bool {
+	return gobool(C._g_is_value(v.native()))
+}
+
+// TypeName gets the type name of value.
+func (v *Value) TypeName() string {
+	return C.GoString((*C.char)(C._g_value_type_name(v.native())))
 }
 
 // ValueAlloc allocates a Value and sets a runtime finalizer to call
@@ -921,7 +849,7 @@ func (v *Value) Native() unsafe.Pointer {
 func ValueAlloc() (*Value, error) {
 	c := C._g_value_alloc()
 	if c == nil {
-		return nil, errNilPtr
+		return nil, nilPtrErr
 	}
 
 	v := &Value{c}
@@ -930,7 +858,8 @@ func ValueAlloc() (*Value, error) {
 	//We need to double check before unsetting, to prevent:
 	//`g_value_unset: assertion 'G_IS_VALUE (value)' failed`
 	runtime.SetFinalizer(v, func(f *Value) {
-		if t, _, err := f.Type(); err != nil || t == TYPE_INVALID || t == TYPE_NONE {
+
+		if !f.IsValue() {
 			C.g_free(C.gpointer(f.native()))
 			return
 		}
@@ -948,7 +877,7 @@ func ValueAlloc() (*Value, error) {
 func ValueInit(t Type) (*Value, error) {
 	c := C._g_value_init(C.GType(t))
 	if c == nil {
-		return nil, errNilPtr
+		return nil, nilPtrErr
 	}
 
 	v := &Value{c}
@@ -967,11 +896,16 @@ func (v *Value) unset() {
 	C.g_value_unset(v.native())
 }
 
+// Unset is wrapper for g_value_unset
+func (v *Value) Unset() {
+	v.unset()
+}
+
 // Type is a wrapper around the G_VALUE_HOLDS_GTYPE() macro and
 // the g_value_get_gtype() function.  GetType() returns TYPE_INVALID if v
 // does not hold a Type, or otherwise returns the Type of v.
 func (v *Value) Type() (actual Type, fundamental Type, err error) {
-	if !gobool(C._g_is_value(v.native())) {
+	if !v.IsValue() {
 		return actual, fundamental, errors.New("invalid GValue")
 	}
 	cActual := C._g_value_type(v.native())
@@ -1299,7 +1233,8 @@ func marshalObject(p uintptr) (interface{}, error) {
 }
 
 func marshalVariant(p uintptr) (interface{}, error) {
-	return nil, errors.New("variant conversion not yet implemented")
+	c := C.g_value_get_variant((*C.GValue)(unsafe.Pointer(p)))
+	return newVariant((*C.GVariant)(c)), nil
 }
 
 // GoValue converts a Value to comparable Go type.  GoValue()
@@ -1394,7 +1329,7 @@ func (v *Value) GetPointer() unsafe.Pointer {
 func (v *Value) GetString() (string, error) {
 	c := C.g_value_get_string(v.native())
 	if c == nil {
-		return "", errNilPtr
+		return "", nilPtrErr
 	}
 	return C.GoString((*C.char)(c)), nil
 }
@@ -1426,6 +1361,21 @@ func (s *Signal) String() string {
 
 type Quark uint32
 
+// GetPrgname is a wrapper around g_get_prgname().
+func GetPrgname() string {
+	c := C.g_get_prgname()
+
+	return C.GoString((*C.char)(c))
+}
+
+// SetPrgname is a wrapper around g_set_prgname().
+func SetPrgname(name string) {
+	cstr := (*C.gchar)(C.CString(name))
+	defer C.free(unsafe.Pointer(cstr))
+
+	C.g_set_prgname(cstr)
+}
+
 // GetApplicationName is a wrapper around g_get_application_name().
 func GetApplicationName() string {
 	c := C.g_get_application_name()
diff --git a/vendor/github.com/gotk3/gotk3/glib/glib.go.h b/vendor/github.com/gotk3/gotk3/glib/glib.go.h
index b27a9566bb2c..e9e672b42948 100644
--- a/vendor/github.com/gotk3/gotk3/glib/glib.go.h
+++ b/vendor/github.com/gotk3/gotk3/glib/glib.go.h
@@ -20,228 +20,144 @@
 #define __GLIB_GO_H__
 
 #include <stdint.h>
-#include <stdlib.h>
 #include <stdio.h>
+#include <stdlib.h>
 
 #include <gio/gio.h>
 #define G_SETTINGS_ENABLE_BACKEND
 #include <gio/gsettingsbackend.h>
-#include <glib.h>
 #include <glib-object.h>
+#include <glib.h>
 #include <glib/gi18n.h>
 #include <locale.h>
 
 /* GObject Type Casting */
-static GObject *
-toGObject(void *p)
-{
-	return (G_OBJECT(p));
-}
+static GObject *toGObject(void *p) { return (G_OBJECT(p)); }
 
-static GAction *
-toGAction(void *p)
-{
-	return (G_ACTION(p));
-}
+static GAction *toGAction(void *p) { return (G_ACTION(p)); }
 
-static GActionGroup *
-toGActionGroup(void *p)
-{
-	return (G_ACTION_GROUP(p));
-}
+static GActionGroup *toGActionGroup(void *p) { return (G_ACTION_GROUP(p)); }
 
-static GActionMap *
-toGActionMap(void *p)
-{
-	return (G_ACTION_MAP(p));
-}
+static GActionMap *toGActionMap(void *p) { return (G_ACTION_MAP(p)); }
 
-static GSimpleAction *
-toGSimpleAction(void *p)
-{
-	return (G_SIMPLE_ACTION(p));
-}
+static GAsyncResult *toGAsyncResult(void *p) { return (G_ASYNC_RESULT(p)); }
 
-static GSimpleActionGroup *
-toGSimpleActionGroup(void *p)
-{
-	return (G_SIMPLE_ACTION_GROUP(p));
-}
+static GSimpleAction *toGSimpleAction(void *p) { return (G_SIMPLE_ACTION(p)); }
 
-static GPropertyAction *
-toGPropertyAction(void *p)
-{
-	return (G_PROPERTY_ACTION(p));
+static GSimpleActionGroup *toGSimpleActionGroup(void *p) {
+  return (G_SIMPLE_ACTION_GROUP(p));
 }
 
-static GMenuModel *
-toGMenuModel(void *p)
-{
-	return (G_MENU_MODEL(p));
+static GPropertyAction *toGPropertyAction(void *p) {
+  return (G_PROPERTY_ACTION(p));
 }
 
-static GMenu *
-toGMenu(void *p)
-{
-	return (G_MENU(p));
-}
+static GMenuModel *toGMenuModel(void *p) { return (G_MENU_MODEL(p)); }
 
-static GMenuItem *
-toGMenuItem(void *p)
-{
-	return (G_MENU_ITEM(p));
-}
+static GMenu *toGMenu(void *p) { return (G_MENU(p)); }
 
-static GNotification *
-toGNotification(void *p)
-{
-	return (G_NOTIFICATION(p));
-}
+static GMenuItem *toGMenuItem(void *p) { return (G_MENU_ITEM(p)); }
 
-static GIcon *
-toGIcon(void *p)
-{
-	return (G_ICON(p));
-}
-static GFileIcon *
-toGFileIcon(void *p)
-{
-	return (G_FILE_ICON(p));
-}
+static GNotification *toGNotification(void *p) { return (G_NOTIFICATION(p)); }
 
-static GFile *
-toGFile(void *p)
-{
-	return (G_FILE(p));
-}
+static GPermission *toGPermission(void *p) { return (G_PERMISSION(p)); }
 
-static GApplication *
-toGApplication(void *p)
-{
-	return (G_APPLICATION(p));
-}
+static GCancellable *toCancellable(void *p) { return (G_CANCELLABLE(p)); }
 
-static GSettings *
-toGSettings(void *p)
-{
-	return (G_SETTINGS(p));
-}
+static GIcon *toGIcon(void *p) { return (G_ICON(p)); }
+static GFileIcon *toGFileIcon(void *p) { return (G_FILE_ICON(p)); }
 
-static GSettingsBackend *
-toGSettingsBackend(void *p)
-{
-	return (G_SETTINGS_BACKEND(p));
-}
+static GFile *toGFile(void *p) { return (G_FILE(p)); }
+
+static GApplication *toGApplication(void *p) { return (G_APPLICATION(p)); }
 
-static GBinding*
-toGBinding(void *p)
-{
-        return (G_BINDING(p));
+static GSettings *toGSettings(void *p) { return (G_SETTINGS(p)); }
+
+static GSettingsBackend *toGSettingsBackend(void *p) {
+  return (G_SETTINGS_BACKEND(p));
 }
 
-static GType
-_g_type_from_instance(gpointer instance)
-{
-	return (G_TYPE_FROM_INSTANCE(instance));
+static GBinding *toGBinding(void *p) { return (G_BINDING(p)); }
+
+static GType _g_type_from_instance(gpointer instance) {
+  return (G_TYPE_FROM_INSTANCE(instance));
 }
 
 /* Wrapper to avoid variable arg list */
-static void
-_g_object_set_one(gpointer object, const gchar *property_name, void *val)
-{
-	g_object_set(object, property_name, *(gpointer **)val, NULL);
+static void _g_object_set_one(gpointer object, const gchar *property_name,
+                              void *val) {
+  g_object_set(object, property_name, *(gpointer **)val, NULL);
 }
 
-static GValue *
-alloc_gvalue_list(int n)
-{
-	GValue		*valv;
+static GValue *alloc_gvalue_list(int n) {
+  GValue *valv;
 
-	valv = g_new0(GValue, n);
-	return (valv);
+  valv = g_new0(GValue, n);
+  return (valv);
 }
 
-static void
-val_list_insert(GValue *valv, int i, GValue *val)
-{
-	valv[i] = *val;
+static void val_list_insert(GValue *valv, int i, GValue *val) {
+  valv[i] = *val;
 }
 
 /*
  * GValue
  */
 
-static GValue *
-_g_value_alloc()
-{
-	return (g_new0(GValue, 1));
-}
+static GValue *_g_value_alloc() { return (g_new0(GValue, 1)); }
 
-static GValue *
-_g_value_init(GType g_type)
-{
-	GValue          *value;
+static GValue *_g_value_init(GType g_type) {
+  GValue *value;
 
-	value = g_new0(GValue, 1);
-	return (g_value_init(value, g_type));
+  value = g_new0(GValue, 1);
+  return (g_value_init(value, g_type));
 }
 
-static gboolean
-_g_is_value(GValue *val)
-{
-	return (G_IS_VALUE(val));
+static gboolean _g_type_is_value(GType g_type) {
+  return (G_TYPE_IS_VALUE(g_type));
 }
 
-static GType
-_g_value_type(GValue *val)
-{
-	return (G_VALUE_TYPE(val));
+static gboolean _g_is_value(GValue *val) { return (G_IS_VALUE(val)); }
+
+static GType _g_value_type(GValue *val) { return (G_VALUE_TYPE(val)); }
+
+static const gchar *_g_value_type_name(GValue *val) {
+  return (G_VALUE_TYPE_NAME(val));
 }
 
-static GType
-_g_value_fundamental(GType type)
-{
-	return (G_TYPE_FUNDAMENTAL(type));
+static GType _g_value_fundamental(GType type) {
+  return (G_TYPE_FUNDAMENTAL(type));
 }
 
-static GObjectClass *
-_g_object_get_class (GObject *object)
-{
-	return (G_OBJECT_GET_CLASS(object));
+static GObjectClass *_g_object_get_class(GObject *object) {
+  return (G_OBJECT_GET_CLASS(object));
 }
 
 /*
  * Closure support
  */
 
-extern void	goMarshal(GClosure *, GValue *, guint, GValue *, gpointer, GValue *);
-
-static GClosure *
-_g_closure_new()
-{
-	GClosure	*closure;
+extern void removeSourceFunc(gpointer data);
+extern gboolean sourceFunc(gpointer data);
 
-	closure = g_closure_new_simple(sizeof(GClosure), NULL);
-	g_closure_set_marshal(closure, (GClosureMarshal)(goMarshal));
-	return (closure);
-}
+extern void goMarshal(GClosure *, GValue *, guint, GValue *, gpointer,
+                      GValue *);
+extern void removeClosure(gpointer, GClosure *);
 
-extern void	removeClosure(gpointer, GClosure *);
+static inline GClosure *_g_closure_new() {
+  GClosure *closure;
 
-static void
-_g_closure_add_finalize_notifier(GClosure *closure)
-{
-	g_closure_add_finalize_notifier(closure, NULL, removeClosure);
+  closure = g_closure_new_simple(sizeof(GClosure), NULL);
+  g_closure_set_marshal(closure, (GClosureMarshal)(goMarshal));
+  g_closure_add_finalize_notifier(closure, NULL,
+                                  (GClosureNotify)(removeClosure));
+  return closure;
 }
 
 static inline guint _g_signal_new(const gchar *name) {
-	return g_signal_new(name,
-		G_TYPE_OBJECT,
-		G_SIGNAL_RUN_FIRST | G_SIGNAL_ACTION,
-		0, NULL, NULL,
-		g_cclosure_marshal_VOID__POINTER,
-		G_TYPE_NONE,
-		0);
+  return g_signal_new(name, G_TYPE_OBJECT, G_SIGNAL_RUN_FIRST | G_SIGNAL_ACTION,
+                      0, NULL, NULL, g_cclosure_marshal_VOID__POINTER,
+                      G_TYPE_NONE, 0);
 }
 
 static void init_i18n(const char *domain, const char *dir) {
@@ -251,26 +167,23 @@ static void init_i18n(const char *domain, const char *dir) {
   textdomain(domain);
 }
 
-static const char* localize(const char *string) {
-  return _(string);
-}
+static const char *localize(const char *string) { return _(string); }
 
-static inline char** make_strings(int count) {
-	return (char**)malloc(sizeof(char*) * count);
+static inline char **make_strings(int count) {
+  return (char **)malloc(sizeof(char *) * count);
 }
 
-static inline void destroy_strings(char** strings) {
-	free(strings);
-}
+static inline void destroy_strings(char **strings) { free(strings); }
 
-static inline char* get_string(char** strings, int n) {
-	return strings[n];
-}
+static inline char *get_string(char **strings, int n) { return strings[n]; }
 
-static inline void set_string(char** strings, int n, char* str) {
-	strings[n] = str;
+static inline void set_string(char **strings, int n, char *str) {
+  strings[n] = str;
 }
 
-static inline gchar** next_gcharptr(gchar** s) { return (s+1); }
+static inline gchar **next_gcharptr(gchar **s) { return (s + 1); }
+
+extern gint goCompareDataFuncs(gconstpointer a, gconstpointer b,
+                               gpointer user_data);
 
 #endif
diff --git a/vendor/github.com/gotk3/gotk3/glib/glib_export.go b/vendor/github.com/gotk3/gotk3/glib/glib_export.go
new file mode 100644
index 000000000000..4ced8cfca8e7
--- /dev/null
+++ b/vendor/github.com/gotk3/gotk3/glib/glib_export.go
@@ -0,0 +1,27 @@
+package glib
+
+// #cgo pkg-config: gio-2.0
+// #include <gio/gio.h>
+import "C"
+import (
+	"unsafe"
+
+	"github.com/gotk3/gotk3/internal/callback"
+)
+
+//export goAsyncReadyCallbacks
+func goAsyncReadyCallbacks(sourceObject *C.GObject, res *C.GAsyncResult, userData C.gpointer) {
+	var source *Object
+	if sourceObject != nil {
+		source = wrapObject(unsafe.Pointer(sourceObject))
+	}
+
+	fn := callback.Get(uintptr(userData)).(AsyncReadyCallback)
+	fn(source, wrapAsyncResult(wrapObject(unsafe.Pointer(res))))
+}
+
+//export goCompareDataFuncs
+func goCompareDataFuncs(a, b C.gconstpointer, userData C.gpointer) C.gint {
+	fn := callback.Get(uintptr(userData)).(CompareDataFunc)
+	return C.gint(fn(uintptr(a), uintptr(b)))
+}
diff --git a/vendor/github.com/gotk3/gotk3/glib/glib_since_2_42.go b/vendor/github.com/gotk3/gotk3/glib/glib_since_2_42.go
new file mode 100644
index 000000000000..45b70e7e01cd
--- /dev/null
+++ b/vendor/github.com/gotk3/gotk3/glib/glib_since_2_42.go
@@ -0,0 +1,50 @@
+// Same copyright and license as the rest of the files in this project
+
+// +build !glib_2_40
+
+package glib
+
+// #include <gio/gio.h>
+// #include <glib.h>
+// #include <glib-object.h>
+// #include "glib.go.h"
+import "C"
+import "unsafe"
+
+/*
+ * Notification
+ */
+
+// NotificationPriority is a representation of GLib's GNotificationPriority.
+type NotificationPriority int
+
+const (
+	NOTIFICATION_PRIORITY_NORMAL NotificationPriority = C.G_NOTIFICATION_PRIORITY_NORMAL
+	NOTIFICATION_PRIORITY_LOW    NotificationPriority = C.G_NOTIFICATION_PRIORITY_LOW
+	NOTIFICATION_PRIORITY_HIGH   NotificationPriority = C.G_NOTIFICATION_PRIORITY_HIGH
+	NOTIFICATION_PRIORITY_URGENT NotificationPriority = C.G_NOTIFICATION_PRIORITY_URGENT
+)
+
+// SetPriority is a wrapper around g_notification_set_priority().
+func (v *Notification) SetPriority(prio NotificationPriority) {
+	C.g_notification_set_priority(v.native(), C.GNotificationPriority(prio))
+}
+
+/*
+ * Application
+ */
+
+// GetResourceBasePath is a wrapper around g_application_get_resource_base_path().
+func (v *Application) GetResourceBasePath() string {
+	c := C.g_application_get_resource_base_path(v.native())
+
+	return C.GoString((*C.char)(c))
+}
+
+// SetResourceBasePath is a wrapper around g_application_set_resource_base_path().
+func (v *Application) SetResourceBasePath(bp string) {
+	cstr1 := (*C.gchar)(C.CString(bp))
+	defer C.free(unsafe.Pointer(cstr1))
+
+	C.g_application_set_resource_base_path(v.native(), cstr1)
+}
diff --git a/vendor/github.com/gotk3/gotk3/glib/glib_since_2_44.go b/vendor/github.com/gotk3/gotk3/glib/glib_since_2_44.go
new file mode 100644
index 000000000000..09ac77f745ba
--- /dev/null
+++ b/vendor/github.com/gotk3/gotk3/glib/glib_since_2_44.go
@@ -0,0 +1,30 @@
+// Same copyright and license as the rest of the files in this project
+
+// +build !glib_2_40,!glib_2_42
+
+package glib
+
+// #include <gio/gio.h>
+// #include <glib.h>
+// #include <glib-object.h>
+// #include "glib.go.h"
+// #include "glib_since_2_44.go.h"
+import "C"
+
+/*
+ * Application
+ */
+
+// GetIsBusy is a wrapper around g_application_get_is_busy().
+func (v *Application) GetIsBusy() bool {
+	return gobool(C.g_application_get_is_busy(v.native()))
+}
+
+/*
+ * SimpleAction
+ */
+
+// SetStateHint is a wrapper around g_simple_action_set_state_hint
+func (v *SimpleAction) SetStateHint(stateHint *Variant) {
+	C.g_simple_action_set_state_hint(v.native(), stateHint.native())
+}
diff --git a/vendor/github.com/gotk3/gotk3/glib/glib_since_2_44.go.h b/vendor/github.com/gotk3/gotk3/glib/glib_since_2_44.go.h
new file mode 100644
index 000000000000..344f29b71275
--- /dev/null
+++ b/vendor/github.com/gotk3/gotk3/glib/glib_since_2_44.go.h
@@ -0,0 +1,16 @@
+// Same copyright and license as the rest of the files in this project
+
+#include <stdlib.h>
+
+#include <glib-object.h>
+#include <glib.h>
+
+static GListModel *toGListModel(void *p) { return (G_LIST_MODEL(p)); }
+
+static GListStore *toGListStore(void *p) { return (G_LIST_STORE(p)); }
+
+static inline void _g_list_store_insert_sorted(GListStore *model, gpointer item,
+                                               gpointer user_data) {
+  g_list_store_insert_sorted(model, item,
+                             (GCompareDataFunc)(goCompareDataFuncs), user_data);
+}
diff --git a/vendor/github.com/gotk3/gotk3/glib/glib_since_2_46.go b/vendor/github.com/gotk3/gotk3/glib/glib_since_2_46.go
new file mode 100644
index 000000000000..18aaf979a42e
--- /dev/null
+++ b/vendor/github.com/gotk3/gotk3/glib/glib_since_2_46.go
@@ -0,0 +1,23 @@
+// Same copyright and license as the rest of the files in this project
+
+// +build !glib_2_40,!glib_2_42,!glib_2_44
+
+package glib
+
+// #include <gio/gio.h>
+// #include <glib.h>
+// #include <glib-object.h>
+// #include "glib.go.h"
+// #include "glib_since_2_44.go.h"
+// #include "glib_since_2_46.go.h"
+import "C"
+import "github.com/gotk3/gotk3/internal/callback"
+
+/*
+ * GListStore
+ */
+
+// Sort is a wrapper around g_list_store_sort().
+func (v *ListStore) Sort(compareFunc CompareDataFunc) {
+	C._g_list_store_sort(v.native(), C.gpointer(callback.Assign(compareFunc)))
+}
diff --git a/vendor/github.com/gotk3/gotk3/glib/glib_since_2_46.go.h b/vendor/github.com/gotk3/gotk3/glib/glib_since_2_46.go.h
new file mode 100644
index 000000000000..e4558b427740
--- /dev/null
+++ b/vendor/github.com/gotk3/gotk3/glib/glib_since_2_46.go.h
@@ -0,0 +1,10 @@
+// Same copyright and license as the rest of the files in this project
+
+#include <stdlib.h>
+
+#include <glib-object.h>
+#include <glib.h>
+
+static inline void _g_list_store_sort(GListStore *model, gpointer user_data) {
+  g_list_store_sort(model, (GCompareDataFunc)(goCompareDataFuncs), user_data);
+}
diff --git a/vendor/github.com/gotk3/gotk3/glib/glib_since_2_64.go b/vendor/github.com/gotk3/gotk3/glib/glib_since_2_64.go
new file mode 100644
index 000000000000..4be21c1679db
--- /dev/null
+++ b/vendor/github.com/gotk3/gotk3/glib/glib_since_2_64.go
@@ -0,0 +1,20 @@
+// Same copyright and license as the rest of the files in this project
+
+// +build !glib_2_40,!glib_2_42,!glib_2_44,!glib_2_46,!glib_2_48,!glib_2_50,!glib_2_52,!glib_2_54,!glib_2_56,!glib_2_58,!glib_2_60,!glib_2_62
+
+package glib
+
+// // #include <gio/gio.h>
+// // #include <glib.h>
+// // #include <glib-object.h>
+// // #include "glib.go.h"
+// // #include "glib_since_2_44.go.h"
+// import "C"
+
+/*
+ * GListStore
+ */
+
+// TODO
+// g_list_store_find
+// g_list_store_find_with_equal_func
diff --git a/vendor/github.com/gotk3/gotk3/glib/glistmodel.go b/vendor/github.com/gotk3/gotk3/glib/glistmodel.go
new file mode 100644
index 000000000000..219ea7c17eb7
--- /dev/null
+++ b/vendor/github.com/gotk3/gotk3/glib/glistmodel.go
@@ -0,0 +1,164 @@
+// Same copyright and license as the rest of the files in this project
+
+// +build !glib_2_40,!glib_2_42
+
+package glib
+
+// #include <gio/gio.h>
+// #include <glib.h>
+// #include <glib-object.h>
+// #include "glib.go.h"
+// #include "glib_since_2_44.go.h"
+import "C"
+import (
+	"unsafe"
+
+	"github.com/gotk3/gotk3/internal/callback"
+)
+
+/*
+ * GListModel
+ */
+
+// IListModel is an interface representation of ListModel,
+// used to avoid duplication when embedding the type in a wrapper of another GObject-based type.
+type IListModel interface {
+	toGListModel() *C.GListModel
+}
+
+// ListModel is a representation of GIO's GListModel.
+type ListModel struct {
+	*Object
+}
+
+func (v *ListModel) toGListModel() *C.GListModel {
+	if v == nil {
+		return nil
+	}
+	return v.native()
+}
+
+// native returns a pointer to the underlying GListModel.
+func (v *ListModel) native() *C.GListModel {
+	if v == nil || v.GObject == nil {
+		return nil
+	}
+	return C.toGListModel(unsafe.Pointer(v.GObject))
+}
+
+// Native returns a pointer to the underlying GListModel.
+func (v *ListModel) Native() uintptr {
+	return uintptr(unsafe.Pointer(v.native()))
+}
+
+func marshalListModel(p uintptr) (interface{}, error) {
+	c := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
+	return wrapListModel(wrapObject(unsafe.Pointer(c))), nil
+}
+
+func wrapListModel(obj *Object) *ListModel {
+	return &ListModel{obj}
+}
+
+// GetItemType is a wrapper around g_list_model_get_item_type().
+func (v *ListModel) GetItemType() Type {
+	return Type(C.g_list_model_get_item_type(v.native()))
+}
+
+// GetNItems is a wrapper around g_list_model_get_n_items().
+func (v *ListModel) GetNItems() uint {
+	return uint(C.g_list_model_get_n_items(v.native()))
+}
+
+// GetItem is a wrapper around g_list_model_get_item().
+func (v *ListModel) GetItem(position uint) uintptr {
+	c := C.g_list_model_get_item(v.native(), C.guint(position))
+	return uintptr(unsafe.Pointer(c))
+}
+
+// GetObject is a wrapper around g_list_model_get_object().
+func (v *ListModel) GetObject(position uint) *Object {
+	c := C.g_list_model_get_object(v.native(), C.guint(position))
+	return wrapObject(unsafe.Pointer(c))
+}
+
+// ItemsChanged is a wrapper around g_list_model_items_changed().
+func (v *ListModel) ItemsChanged(position, removed, added uint) {
+	C.g_list_model_items_changed(v.native(), C.guint(position), C.guint(removed), C.guint(added))
+}
+
+/*
+ * GListStore
+ */
+
+// ListStore is a representation of GListStore
+type ListStore struct {
+	ListModel
+}
+
+func (v *ListStore) native() *C.GListStore {
+	if v == nil || v.GObject == nil {
+		return nil
+	}
+	return C.toGListStore(unsafe.Pointer(v.GObject))
+}
+
+func (v *ListStore) Native() uintptr {
+	return uintptr(unsafe.Pointer(v.native()))
+}
+
+func marshalListStore(p uintptr) (interface{}, error) {
+	c := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
+	return wrapListStore(wrapObject(unsafe.Pointer(c))), nil
+}
+
+func wrapListStore(obj *Object) *ListStore {
+	return &ListStore{ListModel{obj}}
+}
+
+// ListStoreNew is a wrapper around g_list_store_new().
+func ListStoreNew(itemType Type) *ListStore {
+	c := C.g_list_store_new(C.GType(itemType))
+	if c == nil {
+		return nil
+	}
+	return wrapListStore(wrapObject(unsafe.Pointer(c)))
+}
+
+// Insert is a wrapper around g_list_store_insert().
+func (v *ListStore) Insert(position uint, item interface{}) {
+	gItem := ToGObject(unsafe.Pointer(&item))
+	C.g_list_store_insert(v.native(), C.guint(position), C.gpointer(gItem))
+}
+
+// InsertSorted is a wrapper around g_list_store_insert_sorted().
+func (v *ListStore) InsertSorted(item interface{}, compareFunc CompareDataFunc) {
+	gItem := ToGObject(unsafe.Pointer(&item))
+	C._g_list_store_insert_sorted(v.native(), C.gpointer(gItem), C.gpointer(callback.Assign(compareFunc)))
+}
+
+// Append is a wrapper around g_list_store_append().
+func (v *ListStore) Append(item interface{}) {
+	gItem := ToGObject(unsafe.Pointer(&item))
+	C.g_list_store_append(v.native(), C.gpointer(gItem))
+}
+
+// Remove is a wrapper around g_list_store_remove().
+func (v *ListStore) Remove(position uint) {
+	C.g_list_store_remove(v.native(), C.guint(position))
+}
+
+// Splice is a wrapper around g_list_store_splice().
+func (v *ListStore) Splice(position uint, removalLength uint, additions []interface{}) {
+
+	additionsLength := len(additions)
+	gAdditions := make([]*C.GObject, additionsLength)
+	for i, add := range additions {
+		gAdditions[i] = ToGObject(unsafe.Pointer(&add))
+	}
+	gAdditions = append(gAdditions, nil)
+
+	additionsPtr := C.gpointer(gAdditions[0])
+
+	C.g_list_store_splice(v.native(), C.guint(position), C.guint(removalLength), &additionsPtr, C.guint(additionsLength))
+}
diff --git a/vendor/github.com/gotk3/gotk3/glib/gmain_context.go b/vendor/github.com/gotk3/gotk3/glib/gmain_context.go
index 53e15c54dc21..e9b7d6b06a49 100644
--- a/vendor/github.com/gotk3/gotk3/glib/gmain_context.go
+++ b/vendor/github.com/gotk3/gotk3/glib/gmain_context.go
@@ -48,3 +48,18 @@ func (v *MainContext) FindSourceById(hdlSrc SourceHandle) *Source {
 	}
 	return (*Source)(c)
 }
+
+// Acquire is a wrapper around g_main_context_acquire().
+func (v *MainContext) Acquire() bool {
+	return gobool(C.g_main_context_acquire(v.native()))
+}
+
+// Release is a wrapper around g_main_context_release().
+func (v *MainContext) Release() {
+	C.g_main_context_release(v.native())
+}
+
+// IsOwner is a wrapper around g_main_context_is_owner().
+func (v *MainContext) IsOwner() bool {
+	return gobool(C.g_main_context_is_owner(v.native()))
+}
diff --git a/vendor/github.com/gotk3/gotk3/glib/gpermission.go b/vendor/github.com/gotk3/gotk3/glib/gpermission.go
new file mode 100644
index 000000000000..f6f3f92a60cf
--- /dev/null
+++ b/vendor/github.com/gotk3/gotk3/glib/gpermission.go
@@ -0,0 +1,126 @@
+package glib
+
+// #include <gio/gio.h>
+// #include <glib.h>
+// #include <glib-object.h>
+// #include "glib.go.h"
+// #include "gpermission.go.h"
+import "C"
+import (
+	"errors"
+	"unsafe"
+
+	"github.com/gotk3/gotk3/internal/callback"
+)
+
+// Permission is a representation of GIO's GPermission.
+type Permission struct {
+	*Object
+}
+
+func (v *Permission) native() *C.GPermission {
+	if v == nil || v.GObject == nil {
+		return nil
+	}
+	return C.toGPermission(unsafe.Pointer(v.GObject))
+}
+
+// Native returns a uintptr to the underlying C.GPermission.
+func (v *Permission) Native() uintptr {
+	return uintptr(unsafe.Pointer(v.native()))
+}
+
+func marshalPermission(p uintptr) (interface{}, error) {
+	c := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
+	return wrapPermission(wrapObject(unsafe.Pointer(c))), nil
+}
+
+func wrapPermission(obj *Object) *Permission {
+	return &Permission{obj}
+}
+
+// WrapPermission wraps given unsafe pointer into Permission.
+func WrapPermission(ptr unsafe.Pointer) *Permission {
+	return wrapPermission(wrapObject(ptr))
+}
+
+// GetAllowed is a wrapper around g_permission_get_allowed().
+func (v *Permission) GetAllowed() bool {
+	c := C.g_permission_get_allowed(v.native())
+	return gobool(c)
+}
+
+// GetCanAcquire is a wrapper around g_permission_get_can_acquire().
+func (v *Permission) GetCanAcquire() bool {
+	c := C.g_permission_get_can_acquire(v.native())
+	return gobool(c)
+}
+
+// GetCanRelease is a wrapper around g_permission_get_can_release().
+func (v *Permission) GetCanRelease() bool {
+	c := C.g_permission_get_can_release(v.native())
+	return gobool(c)
+}
+
+// Acquire is a wrapper around g_permission_acquire().
+func (v *Permission) Acquire(cancellable *Cancellable) error {
+	var err *C.GError
+	c := C.g_permission_acquire(v.native(), cancellable.native(), &err)
+	acquired := gobool(c)
+	if !acquired {
+		defer C.g_error_free(err)
+		return errors.New(C.GoString((*C.char)(err.message)))
+	}
+	return nil
+}
+
+// AcquireAsync is a wrapper around g_permission_acquire_async().
+func (v *Permission) AcquireAsync(cancellable *Cancellable, fn AsyncReadyCallback) {
+	C._g_permission_acquire_async(v.native(), cancellable.native(), C.gpointer(callback.Assign(fn)))
+}
+
+// AcquireFinish is a wrapper around g_permission_acquire_finish().
+func (v *Permission) AcquireFinish(result *AsyncResult) error {
+	var err *C.GError
+	c := C.g_permission_acquire_finish(v.native(), result.native(), &err)
+	acquired := gobool(c)
+	if !acquired {
+		defer C.g_error_free(err)
+		return errors.New(C.GoString((*C.char)(err.message)))
+	}
+	return nil
+}
+
+// Release is a wrapper around g_permission_release().
+func (v *Permission) Release(cancellable *Cancellable) error {
+	var err *C.GError
+	c := C.g_permission_release(v.native(), cancellable.native(), &err)
+	released := gobool(c)
+	if !released {
+		defer C.g_error_free(err)
+		return errors.New(C.GoString((*C.char)(err.message)))
+	}
+	return nil
+}
+
+// ReleaseAsync is a wrapper around g_permission_release_async().
+func (v *Permission) ReleaseAsync(cancellable *Cancellable, fn AsyncReadyCallback) {
+	C._g_permission_release_async(v.native(), cancellable.native(), C.gpointer(callback.Assign(fn)))
+}
+
+// ReleaseFinish is a wrapper around g_permission_release_finish().
+func (v *Permission) ReleaseFinish(result *AsyncResult) error {
+	var err *C.GError
+	c := C.g_permission_release_finish(v.native(), result.native(), &err)
+	released := gobool(c)
+	if !released {
+		defer C.g_error_free(err)
+		return errors.New(C.GoString((*C.char)(err.message)))
+	}
+	return nil
+}
+
+// ImplUpdate is a wrapper around g_permission_impl_update().
+func (v *Permission) ImplUpdate(allowed, canAcquire, canRelease bool) {
+	C.g_permission_impl_update(v.native(), gbool(allowed), gbool(canAcquire), gbool(canRelease))
+}
diff --git a/vendor/github.com/gotk3/gotk3/glib/gpermission.go.h b/vendor/github.com/gotk3/gotk3/glib/gpermission.go.h
new file mode 100644
index 000000000000..5c0f05e8bd87
--- /dev/null
+++ b/vendor/github.com/gotk3/gotk3/glib/gpermission.go.h
@@ -0,0 +1,24 @@
+// Same copyright and license as the rest of the files in this project
+
+/*
+ * GAsyncReadyCallback
+ */
+
+extern void goAsyncReadyCallbacks(GObject *source_object, GAsyncResult *res,
+                                  gpointer user_data);
+
+static inline void _g_permission_acquire_async(GPermission *permission,
+                                               GCancellable *cancellable,
+                                               gpointer user_data) {
+  g_permission_acquire_async(permission, cancellable,
+                             (GAsyncReadyCallback)(goAsyncReadyCallbacks),
+                             user_data);
+}
+
+static inline void _g_permission_release_async(GPermission *permission,
+                                               GCancellable *cancellable,
+                                               gpointer user_data) {
+  g_permission_release_async(permission, cancellable,
+                             (GAsyncReadyCallback)(goAsyncReadyCallbacks),
+                             user_data);
+}
diff --git a/vendor/github.com/gotk3/gotk3/glib/gsource.go b/vendor/github.com/gotk3/gotk3/glib/gsource.go
index f11e71148d0c..d3518ec532b7 100644
--- a/vendor/github.com/gotk3/gotk3/glib/gsource.go
+++ b/vendor/github.com/gotk3/gotk3/glib/gsource.go
@@ -16,6 +16,11 @@ func (v *Source) native() *C.GSource {
 	return (*C.GSource)(v)
 }
 
+func wrapSource(sourcePtr *C.GSource) *Source {
+	source := Source(*sourcePtr)
+	return &source
+}
+
 // MainCurrentSource is a wrapper around g_main_current_source().
 func MainCurrentSource() *Source {
 	c := C.g_main_current_source()
diff --git a/vendor/github.com/gotk3/gotk3/glib/gvariant.go b/vendor/github.com/gotk3/gotk3/glib/gvariant.go
index 39e175de6b03..dacbcae968d3 100644
--- a/vendor/github.com/gotk3/gotk3/glib/gvariant.go
+++ b/vendor/github.com/gotk3/gotk3/glib/gvariant.go
@@ -8,7 +8,9 @@ package glib
 import "C"
 
 import (
+	"errors"
 	"fmt"
+	"runtime"
 	"unsafe"
 )
 
@@ -43,17 +45,6 @@ func (v *Variant) ToVariant() *Variant {
 	return v
 }
 
-// newVariant creates a new Variant from a GVariant pointer.
-func newVariant(p *C.GVariant) *Variant {
-	return &Variant{GVariant: p}
-}
-
-// VariantFromUnsafePointer returns a Variant from an unsafe pointer.
-// XXX: unnecessary footgun?
-//func VariantFromUnsafePointer(p unsafe.Pointer) *Variant {
-//	return &Variant{C.toGVariant(p)}
-//}
-
 // native returns a pointer to the underlying GVariant.
 func (v *Variant) native() *C.GVariant {
 	if v == nil || v.GVariant == nil {
@@ -67,6 +58,136 @@ func (v *Variant) Native() uintptr {
 	return uintptr(unsafe.Pointer(v.native()))
 }
 
+// newVariant wraps a native GVariant.
+// Does NOT handle reference counting! Use takeVariant() to take ownership of values.
+func newVariant(p *C.GVariant) *Variant {
+	if p == nil {
+		return nil
+	}
+	return &Variant{GVariant: p}
+}
+
+// TakeVariant wraps a unsafe.Pointer as a glib.Variant, taking ownership of it.
+// This function is exported for visibility in other gotk3 packages and
+// is not meant to be used by applications.
+func TakeVariant(ptr unsafe.Pointer) *Variant {
+	return takeVariant(C.toGVariant(ptr))
+}
+
+// takeVariant wraps a native GVariant,
+// takes ownership and sets up a finalizer to free the instance during GC.
+func takeVariant(p *C.GVariant) *Variant {
+	if p == nil {
+		return nil
+	}
+	obj := &Variant{GVariant: p}
+
+	if obj.IsFloating() {
+		obj.RefSink()
+	} else {
+		obj.Ref()
+	}
+
+	runtime.SetFinalizer(obj, (*Variant).Unref)
+	return obj
+}
+
+// IsFloating returns true if the variant has a floating reference count.
+// Reference counting is usually handled in the gotk layer,
+// most applications should not call this.
+func (v *Variant) IsFloating() bool {
+	return gobool(C.g_variant_is_floating(v.native()))
+}
+
+// Ref is a wrapper around g_variant_ref.
+// Reference counting is usually handled in the gotk layer,
+// most applications should not need to call this.
+func (v *Variant) Ref() {
+	C.g_variant_ref(v.native())
+}
+
+// RefSink is a wrapper around g_variant_ref_sink.
+// Reference counting is usually handled in the gotk layer,
+// most applications should not need to call this.
+func (v *Variant) RefSink() {
+	C.g_variant_ref_sink(v.native())
+}
+
+// TakeRef is a wrapper around g_variant_take_ref.
+// Reference counting is usually handled in the gotk layer,
+// most applications should not need to call this.
+func (v *Variant) TakeRef() {
+	C.g_variant_take_ref(v.native())
+}
+
+// Unref is a wrapper around g_variant_unref.
+// Reference counting is usually handled in the gotk layer,
+// most applications should not need to call this.
+func (v *Variant) Unref() {
+	C.g_variant_unref(v.native())
+}
+
+// VariantFromInt16 is a wrapper around g_variant_new_int16
+func VariantFromInt16(value int16) *Variant {
+	return takeVariant(C.g_variant_new_int16(C.gint16(value)))
+}
+
+// VariantFromInt32 is a wrapper around g_variant_new_int32
+func VariantFromInt32(value int32) *Variant {
+	return takeVariant(C.g_variant_new_int32(C.gint32(value)))
+}
+
+// VariantFromInt64 is a wrapper around g_variant_new_int64
+func VariantFromInt64(value int64) *Variant {
+	return takeVariant(C.g_variant_new_int64(C.gint64(value)))
+}
+
+// VariantFromByte is a wrapper around g_variant_new_byte
+func VariantFromByte(value uint8) *Variant {
+	return takeVariant(C.g_variant_new_byte(C.guint8(value)))
+}
+
+// VariantFromUint16 is a wrapper around g_variant_new_uint16
+func VariantFromUint16(value uint16) *Variant {
+	return takeVariant(C.g_variant_new_uint16(C.guint16(value)))
+}
+
+// VariantFromUint32 is a wrapper around g_variant_new_uint32
+func VariantFromUint32(value uint32) *Variant {
+	return takeVariant(C.g_variant_new_uint32(C.guint32(value)))
+}
+
+// VariantFromUint64 is a wrapper around g_variant_new_uint64
+func VariantFromUint64(value uint64) *Variant {
+	return takeVariant(C.g_variant_new_uint64(C.guint64(value)))
+}
+
+// VariantFromBoolean is a wrapper around g_variant_new_boolean
+func VariantFromBoolean(value bool) *Variant {
+	return takeVariant(C.g_variant_new_boolean(gbool(value)))
+}
+
+// VariantFromFloat64 is a wrapper around g_variant_new_double().
+// I chose to respect the Golang float64 nomenclature instead
+// of 'double' 'C'. Corresponding VariantType is: 'VARIANT_TYPE_DOUBLE'
+func VariantFromFloat64(value float64) *Variant {
+	return takeVariant(C.g_variant_new_double(C.gdouble(value)))
+}
+
+// VariantFromString is a wrapper around g_variant_new_string/g_variant_new_take_string.
+// Uses g_variant_new_take_string to reduce memory allocations if possible.
+func VariantFromString(value string) *Variant {
+	cstr := (*C.gchar)(C.CString(value))
+	// g_variant_new_take_string takes owhership of the cstring and will call free() on it when done.
+	// Do NOT free this string in this function!
+	return takeVariant(C.g_variant_new_take_string(cstr))
+}
+
+// VariantFromVariant is a wrapper around g_variant_new_variant.
+func VariantFromVariant(value *Variant) *Variant {
+	return takeVariant(C.g_variant_new_variant(value.native()))
+}
+
 // TypeString returns the g variant type string for this variant.
 func (v *Variant) TypeString() string {
 	// the string returned from this belongs to GVariant and must not be freed.
@@ -78,32 +199,72 @@ func (v *Variant) IsContainer() bool {
 	return gobool(C.g_variant_is_container(v.native()))
 }
 
-// IsFloating returns true if the variant has a floating reference count.
-// XXX: this isn't useful without ref_sink/take_ref, which are themselves
-// perhaps not useful for most Go code that may use variants.
-//func (v *Variant) IsFloating() bool {
-//	return gobool(C.g_variant_is_floating(v.native()))
-//}
-
 // GetBoolean returns the bool value of this variant.
 func (v *Variant) GetBoolean() bool {
 	return gobool(C.g_variant_get_boolean(v.native()))
 }
 
-// GetString returns the string value of the variant.
+// GetDouble is a wrapper around g_variant_get_double()
+func (v *Variant) GetDouble() float64 {
+	return float64(C.g_variant_get_double(v.native()))
+}
+
+// GetString is a wrapper around g_variant_get_string.
+// It returns the string value of the variant.
 func (v *Variant) GetString() string {
+
+	// The string value remains valid as long as the GVariant exists, do NOT free the cstring in this function.
 	var len C.gsize
 	gc := C.g_variant_get_string(v.native(), &len)
-	defer C.g_free(C.gpointer(gc))
+
+	// This is opposed to g_variant_dup_string, which copies the string.
+	// g_variant_dup_string is not implemented,
+	// as we copy the string value anyways when converting to a go string.
+
 	return C.GoStringN((*C.char)(gc), (C.int)(len))
 }
 
+// GetVariant is a wrapper around g_variant_get_variant.
+// It unboxes a nested GVariant.
+func (v *Variant) GetVariant() *Variant {
+	c := C.g_variant_get_variant(v.native())
+	if c == nil {
+		return nil
+	}
+	// The returned value is returned with full ownership transfer,
+	// only Unref(), don't Ref().
+	obj := newVariant(c)
+	runtime.SetFinalizer(obj, (*Variant).Unref)
+	return obj
+}
+
 // GetStrv returns a slice of strings from this variant.  It wraps
 // g_variant_get_strv, but returns copies of the strings instead.
 func (v *Variant) GetStrv() []string {
 	gstrv := C.g_variant_get_strv(v.native(), nil)
 	// we do not own the memory for these strings, so we must not use strfreev
-	// but we must free the actual pointer we receive.
+	// but we must free the actual pointer we receive (transfer container).
+	// We don't implement g_variant_dup_strv which copies the strings,
+	// as we need to copy anyways when converting to go strings.
+	c := gstrv
+	defer C.g_free(C.gpointer(gstrv))
+	var strs []string
+
+	for *c != nil {
+		strs = append(strs, C.GoString((*C.char)(*c)))
+		c = C.next_gcharptr(c)
+	}
+	return strs
+}
+
+// GetObjv returns a slice of object paths from this variant.  It wraps
+// g_variant_get_objv, but returns copies of the strings instead.
+func (v *Variant) GetObjv() []string {
+	gstrv := C.g_variant_get_objv(v.native(), nil)
+	// we do not own the memory for these strings, so we must not use strfreev
+	// but we must free the actual pointer we receive (transfer container).
+	// We don't implement g_variant_dup_objv which copies the strings,
+	// as we need to copy anyways when converting to go strings.
 	c := gstrv
 	defer C.g_free(C.gpointer(gstrv))
 	var strs []string
@@ -119,31 +280,45 @@ func (v *Variant) GetStrv() []string {
 // an error otherwise.  It wraps variouns `g_variant_get_*` functions dealing
 // with integers of different sizes.
 func (v *Variant) GetInt() (int64, error) {
-	t := v.Type().String()
+	t := v.TypeString()
 	var i int64
 	switch t {
-	case "y":
-		i = int64(C.g_variant_get_byte(v.native()))
 	case "n":
 		i = int64(C.g_variant_get_int16(v.native()))
-	case "q":
-		i = int64(C.g_variant_get_uint16(v.native()))
 	case "i":
 		i = int64(C.g_variant_get_int32(v.native()))
-	case "u":
-		i = int64(C.g_variant_get_uint32(v.native()))
 	case "x":
 		i = int64(C.g_variant_get_int64(v.native()))
+	default:
+		return 0, fmt.Errorf("variant type %s not a signed integer type", t)
+	}
+	return i, nil
+}
+
+// GetUint returns the uint64 value of the variant if it is an integer type, and
+// an error otherwise.  It wraps variouns `g_variant_get_*` functions dealing
+// with integers of different sizes.
+func (v *Variant) GetUint() (uint64, error) {
+	t := v.TypeString()
+	var i uint64
+	switch t {
+	case "y":
+		i = uint64(C.g_variant_get_byte(v.native()))
+	case "q":
+		i = uint64(C.g_variant_get_uint16(v.native()))
+	case "u":
+		i = uint64(C.g_variant_get_uint32(v.native()))
 	case "t":
-		i = int64(C.g_variant_get_uint64(v.native()))
+		i = uint64(C.g_variant_get_uint64(v.native()))
 	default:
-		return 0, fmt.Errorf("variant type %s not an integer type", t)
+		return 0, fmt.Errorf("variant type %s not an unsigned integer type", t)
 	}
 	return i, nil
 }
 
 // Type returns the VariantType for this variant.
 func (v *Variant) Type() *VariantType {
+	// The return value is valid for the lifetime of value and must not be freed.
 	return newVariantType(C.g_variant_get_type(v.native()))
 }
 
@@ -168,10 +343,7 @@ func (v *Variant) AnnotatedString() string {
 	return C.GoString((*C.char)(gc))
 }
 
-//void	g_variant_unref ()
-//GVariant *	g_variant_ref ()
-//GVariant *	g_variant_ref_sink ()
-//GVariant *	g_variant_take_ref ()
+// TODO:
 //gint	g_variant_compare ()
 //GVariantClass	g_variant_classify ()
 //gboolean	g_variant_check_format_string ()
@@ -179,24 +351,12 @@ func (v *Variant) AnnotatedString() string {
 //void	g_variant_get_va ()
 //GVariant *	g_variant_new ()
 //GVariant *	g_variant_new_va ()
-//GVariant *	g_variant_new_boolean ()
-//GVariant *	g_variant_new_byte ()
-//GVariant *	g_variant_new_int16 ()
-//GVariant *	g_variant_new_uint16 ()
-//GVariant *	g_variant_new_int32 ()
-//GVariant *	g_variant_new_uint32 ()
-//GVariant *	g_variant_new_int64 ()
-//GVariant *	g_variant_new_uint64 ()
 //GVariant *	g_variant_new_handle ()
-//GVariant *	g_variant_new_double ()
-//GVariant *	g_variant_new_string ()
-//GVariant *	g_variant_new_take_string ()
 //GVariant *	g_variant_new_printf ()
 //GVariant *	g_variant_new_object_path ()
 //gboolean	g_variant_is_object_path ()
 //GVariant *	g_variant_new_signature ()
 //gboolean	g_variant_is_signature ()
-//GVariant *	g_variant_new_variant ()
 //GVariant *	g_variant_new_strv ()
 //GVariant *	g_variant_new_objv ()
 //GVariant *	g_variant_new_bytestring ()
@@ -210,13 +370,6 @@ func (v *Variant) AnnotatedString() string {
 //guint64	g_variant_get_uint64 ()
 //gint32	g_variant_get_handle ()
 //gdouble	g_variant_get_double ()
-//const gchar *	g_variant_get_string ()
-//gchar *	g_variant_dup_string ()
-//GVariant *	g_variant_get_variant ()
-//const gchar **	g_variant_get_strv ()
-//gchar **	g_variant_dup_strv ()
-//const gchar **	g_variant_get_objv ()
-//gchar **	g_variant_dup_objv ()
 //const gchar *	g_variant_get_bytestring ()
 //gchar *	g_variant_dup_bytestring ()
 //const gchar **	g_variant_get_bytestring_array ()
@@ -278,7 +431,21 @@ func (v *Variant) AnnotatedString() string {
 //gboolean	g_variant_dict_remove ()
 //GVariant *	g_variant_dict_end ()
 //#define	G_VARIANT_PARSE_ERROR
-//GVariant *	g_variant_parse ()
+
+// VariantParse is a wrapper around g_variant_parse()
+func VariantParse(vType *VariantType, text string) (*Variant, error) {
+	cstr := C.CString(text)
+	defer C.free(unsafe.Pointer(cstr))
+	var gerr *C.GError
+	c := C.g_variant_parse(vType.native(), (*C.gchar)(cstr), nil, nil, &gerr)
+	if c == nil {
+		defer C.g_error_free(gerr)
+		return nil, errors.New(goString(gerr.message))
+	}
+	// will be freed during GC
+	return takeVariant(c), nil
+}
+
 //GVariant *	g_variant_new_parsed_va ()
 //GVariant *	g_variant_new_parsed ()
 //gchar *	g_variant_parse_error_print_context ()
diff --git a/vendor/github.com/gotk3/gotk3/glib/gvariant.go.h b/vendor/github.com/gotk3/gotk3/glib/gvariant.go.h
index 01d732e77502..e2b4d0358eba 100644
--- a/vendor/github.com/gotk3/gotk3/glib/gvariant.go.h
+++ b/vendor/github.com/gotk3/gotk3/glib/gvariant.go.h
@@ -1,40 +1,26 @@
 // Same copyright and license as the rest of the files in this project
 
-//GVariant : GVariant — strongly typed value datatype
+// GVariant : GVariant — strongly typed value datatype
 // https://developer.gnome.org/glib/2.26/glib-GVariant.html
 
 #ifndef __GVARIANT_GO_H__
 #define __GVARIANT_GO_H__
 
+#include <glib.h>
 #include <stdint.h>
-#include <stdlib.h>
 #include <stdio.h>
-#include <glib.h>
+#include <stdlib.h>
 
 // Type Casting
 
-static GVariant *
-toGVariant(void *p)
-{
-	return (GVariant*)p;
-}
+static GVariant *toGVariant(void *p) { return (GVariant *)p; }
 
-static GVariantBuilder *
-toGVariantBuilder(void *p)
-{
-	return (GVariantBuilder*)p;
+static GVariantBuilder *toGVariantBuilder(void *p) {
+  return (GVariantBuilder *)p;
 }
 
-static GVariantDict *
-toGVariantDict(void *p)
-{
-	return (GVariantDict*)p;
-}
+static GVariantDict *toGVariantDict(void *p) { return (GVariantDict *)p; }
 
-static GVariantIter *
-toGVariantIter(void *p)
-{
-	return (GVariantIter*)p;
-}
+static GVariantIter *toGVariantIter(void *p) { return (GVariantIter *)p; }
 
 #endif
diff --git a/vendor/github.com/gotk3/gotk3/glib/gvarianttype.go b/vendor/github.com/gotk3/gotk3/glib/gvarianttype.go
index 0efe421fe2f8..3723f43b530f 100644
--- a/vendor/github.com/gotk3/gotk3/glib/gvarianttype.go
+++ b/vendor/github.com/gotk3/gotk3/glib/gvarianttype.go
@@ -5,10 +5,16 @@
 
 package glib
 
+// #include <stdlib.h>
 // #include <glib.h>
 // #include "gvarianttype.go.h"
 import "C"
 
+import (
+	"runtime"
+	"unsafe"
+)
+
 // A VariantType is a wrapper for the GVariantType, which encodes type
 // information for GVariants.
 type VariantType struct {
@@ -29,12 +35,30 @@ func (v *VariantType) String() string {
 	return C.GoString((*C.char)(ch))
 }
 
+// newVariantType wraps a native GVariantType.
+// Does not create a finalizer.
+// Use takeVariantType for instances which need to be freed after use.
 func newVariantType(v *C.GVariantType) *VariantType {
+	if v == nil {
+		return nil
+	}
 	return &VariantType{v}
 }
 
+// takeVariantType wraps a native GVariantType
+// and sets up a finalizer to free the instance during GC.
+func takeVariantType(v *C.GVariantType) *VariantType {
+	if v == nil {
+		return nil
+	}
+	obj := &VariantType{v}
+	runtime.SetFinalizer(obj, (*VariantType).Free)
+	return obj
+}
+
 // Variant types for comparing between them.  Cannot be const because
 // they are pointers.
+// Note that variant types cannot be compared by value, use VariantTypeEqual() instead.
 var (
 	VARIANT_TYPE_BOOLEAN           = newVariantType(C._G_VARIANT_TYPE_BOOLEAN)
 	VARIANT_TYPE_BYTE              = newVariantType(C._G_VARIANT_TYPE_BYTE)
@@ -47,10 +71,16 @@ var (
 	VARIANT_TYPE_HANDLE            = newVariantType(C._G_VARIANT_TYPE_HANDLE)
 	VARIANT_TYPE_DOUBLE            = newVariantType(C._G_VARIANT_TYPE_DOUBLE)
 	VARIANT_TYPE_STRING            = newVariantType(C._G_VARIANT_TYPE_STRING)
+	VARIANT_TYPE_OBJECT_PATH       = newVariantType(C._G_VARIANT_TYPE_OBJECT_PATH)
+	VARIANT_TYPE_SIGNATURE         = newVariantType(C._G_VARIANT_TYPE_SIGNATURE)
+	VARIANT_TYPE_VARIANT           = newVariantType(C._G_VARIANT_TYPE_VARIANT)
 	VARIANT_TYPE_ANY               = newVariantType(C._G_VARIANT_TYPE_ANY)
 	VARIANT_TYPE_BASIC             = newVariantType(C._G_VARIANT_TYPE_BASIC)
+	VARIANT_TYPE_MAYBE             = newVariantType(C._G_VARIANT_TYPE_MAYBE)
+	VARIANT_TYPE_ARRAY             = newVariantType(C._G_VARIANT_TYPE_ARRAY)
 	VARIANT_TYPE_TUPLE             = newVariantType(C._G_VARIANT_TYPE_TUPLE)
 	VARIANT_TYPE_UNIT              = newVariantType(C._G_VARIANT_TYPE_UNIT)
+	VARIANT_TYPE_DICT_ENTRY        = newVariantType(C._G_VARIANT_TYPE_DICT_ENTRY)
 	VARIANT_TYPE_DICTIONARY        = newVariantType(C._G_VARIANT_TYPE_DICTIONARY)
 	VARIANT_TYPE_STRING_ARRAY      = newVariantType(C._G_VARIANT_TYPE_STRING_ARRAY)
 	VARIANT_TYPE_OBJECT_PATH_ARRAY = newVariantType(C._G_VARIANT_TYPE_OBJECT_PATH_ARRAY)
@@ -58,3 +88,60 @@ var (
 	VARIANT_TYPE_BYTESTRING_ARRAY  = newVariantType(C._G_VARIANT_TYPE_BYTESTRING_ARRAY)
 	VARIANT_TYPE_VARDICT           = newVariantType(C._G_VARIANT_TYPE_VARDICT)
 )
+
+// Free is a wrapper around g_variant_type_free.
+// Reference counting is usually handled in the gotk layer,
+// most applications should not call this.
+func (v *VariantType) Free() {
+	C.g_variant_type_free(v.native())
+}
+
+// VariantTypeNew is a wrapper around g_variant_type_new.
+func VariantTypeNew(typeString string) *VariantType {
+	cstr := (*C.gchar)(C.CString(typeString))
+	defer C.free(unsafe.Pointer(cstr))
+
+	c := C.g_variant_type_new(cstr)
+	return takeVariantType(c)
+}
+
+// VariantTypeStringIsValid is a wrapper around g_variant_type_string_is_valid.
+func VariantTypeStringIsValid(typeString string) bool {
+	cstr := (*C.gchar)(C.CString(typeString))
+	defer C.free(unsafe.Pointer(cstr))
+
+	return gobool(C.g_variant_type_string_is_valid(cstr))
+}
+
+// VariantTypeEqual is a wrapper around g_variant_type_equal
+func VariantTypeEqual(type1, type2 *VariantType) bool {
+	return gobool(C.g_variant_type_equal(C.gconstpointer(type1.native()), C.gconstpointer(type2.native())))
+}
+
+// IsSubtypeOf is a wrapper around g_variant_type_is_subtype_of
+func (v *VariantType) IsSubtypeOf(supertype *VariantType) bool {
+	return gobool(C.g_variant_type_is_subtype_of(v.native(), supertype.native()))
+}
+
+// TODO:
+// g_variant_type_copy
+// g_variant_type_string_scan
+// g_variant_type_is_definite
+// g_variant_type_is_container
+// g_variant_type_is_basic
+// g_variant_type_is_maybe
+// g_variant_type_is_array
+// g_variant_type_is_tuple
+// g_variant_type_is_dict_entry
+// g_variant_type_is_variant
+// g_variant_type_hash
+// g_variant_type_new_maybe
+// g_variant_type_new_array
+// g_variant_type_new_tuple
+// g_variant_type_new_dict_entry
+// g_variant_type_element
+// g_variant_type_n_items
+// g_variant_type_first
+// g_variant_type_next
+// g_variant_type_key
+// g_variant_type_value
diff --git a/vendor/github.com/gotk3/gotk3/glib/gvarianttype.go.h b/vendor/github.com/gotk3/gotk3/glib/gvarianttype.go.h
index a2195de63e0f..283a9dc925dd 100644
--- a/vendor/github.com/gotk3/gotk3/glib/gvarianttype.go.h
+++ b/vendor/github.com/gotk3/gotk3/glib/gvarianttype.go.h
@@ -1,37 +1,39 @@
 // Same copyright and license as the rest of the files in this project
 
-//GVariant : GVariant — strongly typed value datatype
+// GVariant : GVariant — strongly typed value datatype
 // https://developer.gnome.org/glib/2.26/glib-GVariant.html
 
 #ifndef __GVARIANTTYPE_GO_H__
 #define __GVARIANTTYPE_GO_H__
 
-const GVariantType* _G_VARIANT_TYPE_BOOLEAN = G_VARIANT_TYPE_BOOLEAN;
-const GVariantType* _G_VARIANT_TYPE_BYTE = G_VARIANT_TYPE_BYTE;
-const GVariantType* _G_VARIANT_TYPE_INT16 = G_VARIANT_TYPE_INT16;
-const GVariantType* _G_VARIANT_TYPE_UINT16 = G_VARIANT_TYPE_UINT16;
-const GVariantType* _G_VARIANT_TYPE_INT32 = G_VARIANT_TYPE_INT32;
-const GVariantType* _G_VARIANT_TYPE_UINT32 = G_VARIANT_TYPE_UINT32;
-const GVariantType* _G_VARIANT_TYPE_INT64 = G_VARIANT_TYPE_INT64;
-const GVariantType* _G_VARIANT_TYPE_UINT64 = G_VARIANT_TYPE_UINT64;
-const GVariantType* _G_VARIANT_TYPE_HANDLE = G_VARIANT_TYPE_HANDLE;
-const GVariantType* _G_VARIANT_TYPE_DOUBLE = G_VARIANT_TYPE_DOUBLE;
-const GVariantType* _G_VARIANT_TYPE_STRING = G_VARIANT_TYPE_STRING;
-const GVariantType* _G_VARIANT_TYPE_OBJECT_PATH = G_VARIANT_TYPE_OBJECT_PATH;
-const GVariantType* _G_VARIANT_TYPE_SIGNATURE = G_VARIANT_TYPE_SIGNATURE;
-const GVariantType* _G_VARIANT_TYPE_VARIANT = G_VARIANT_TYPE_VARIANT;
-const GVariantType* _G_VARIANT_TYPE_ANY = G_VARIANT_TYPE_ANY;
-const GVariantType* _G_VARIANT_TYPE_BASIC = G_VARIANT_TYPE_BASIC;
-const GVariantType* _G_VARIANT_TYPE_MAYBE = G_VARIANT_TYPE_MAYBE;
-const GVariantType* _G_VARIANT_TYPE_ARRAY = G_VARIANT_TYPE_ARRAY;
-const GVariantType* _G_VARIANT_TYPE_TUPLE = G_VARIANT_TYPE_TUPLE;
-const GVariantType* _G_VARIANT_TYPE_UNIT = G_VARIANT_TYPE_UNIT;
-const GVariantType* _G_VARIANT_TYPE_DICT_ENTRY = G_VARIANT_TYPE_DICT_ENTRY;
-const GVariantType* _G_VARIANT_TYPE_DICTIONARY = G_VARIANT_TYPE_DICTIONARY;
-const GVariantType* _G_VARIANT_TYPE_STRING_ARRAY = G_VARIANT_TYPE_STRING_ARRAY;
-const GVariantType* _G_VARIANT_TYPE_OBJECT_PATH_ARRAY = G_VARIANT_TYPE_OBJECT_PATH_ARRAY;
-const GVariantType* _G_VARIANT_TYPE_BYTESTRING = G_VARIANT_TYPE_BYTESTRING;
-const GVariantType* _G_VARIANT_TYPE_BYTESTRING_ARRAY = G_VARIANT_TYPE_BYTESTRING_ARRAY;
-const GVariantType* _G_VARIANT_TYPE_VARDICT = G_VARIANT_TYPE_VARDICT;
+const GVariantType *_G_VARIANT_TYPE_BOOLEAN = G_VARIANT_TYPE_BOOLEAN;
+const GVariantType *_G_VARIANT_TYPE_BYTE = G_VARIANT_TYPE_BYTE;
+const GVariantType *_G_VARIANT_TYPE_INT16 = G_VARIANT_TYPE_INT16;
+const GVariantType *_G_VARIANT_TYPE_UINT16 = G_VARIANT_TYPE_UINT16;
+const GVariantType *_G_VARIANT_TYPE_INT32 = G_VARIANT_TYPE_INT32;
+const GVariantType *_G_VARIANT_TYPE_UINT32 = G_VARIANT_TYPE_UINT32;
+const GVariantType *_G_VARIANT_TYPE_INT64 = G_VARIANT_TYPE_INT64;
+const GVariantType *_G_VARIANT_TYPE_UINT64 = G_VARIANT_TYPE_UINT64;
+const GVariantType *_G_VARIANT_TYPE_HANDLE = G_VARIANT_TYPE_HANDLE;
+const GVariantType *_G_VARIANT_TYPE_DOUBLE = G_VARIANT_TYPE_DOUBLE;
+const GVariantType *_G_VARIANT_TYPE_STRING = G_VARIANT_TYPE_STRING;
+const GVariantType *_G_VARIANT_TYPE_OBJECT_PATH = G_VARIANT_TYPE_OBJECT_PATH;
+const GVariantType *_G_VARIANT_TYPE_SIGNATURE = G_VARIANT_TYPE_SIGNATURE;
+const GVariantType *_G_VARIANT_TYPE_VARIANT = G_VARIANT_TYPE_VARIANT;
+const GVariantType *_G_VARIANT_TYPE_ANY = G_VARIANT_TYPE_ANY;
+const GVariantType *_G_VARIANT_TYPE_BASIC = G_VARIANT_TYPE_BASIC;
+const GVariantType *_G_VARIANT_TYPE_MAYBE = G_VARIANT_TYPE_MAYBE;
+const GVariantType *_G_VARIANT_TYPE_ARRAY = G_VARIANT_TYPE_ARRAY;
+const GVariantType *_G_VARIANT_TYPE_TUPLE = G_VARIANT_TYPE_TUPLE;
+const GVariantType *_G_VARIANT_TYPE_UNIT = G_VARIANT_TYPE_UNIT;
+const GVariantType *_G_VARIANT_TYPE_DICT_ENTRY = G_VARIANT_TYPE_DICT_ENTRY;
+const GVariantType *_G_VARIANT_TYPE_DICTIONARY = G_VARIANT_TYPE_DICTIONARY;
+const GVariantType *_G_VARIANT_TYPE_STRING_ARRAY = G_VARIANT_TYPE_STRING_ARRAY;
+const GVariantType *_G_VARIANT_TYPE_OBJECT_PATH_ARRAY =
+    G_VARIANT_TYPE_OBJECT_PATH_ARRAY;
+const GVariantType *_G_VARIANT_TYPE_BYTESTRING = G_VARIANT_TYPE_BYTESTRING;
+const GVariantType *_G_VARIANT_TYPE_BYTESTRING_ARRAY =
+    G_VARIANT_TYPE_BYTESTRING_ARRAY;
+const GVariantType *_G_VARIANT_TYPE_VARDICT = G_VARIANT_TYPE_VARDICT;
 
 #endif
diff --git a/vendor/github.com/gotk3/gotk3/glib/list.go b/vendor/github.com/gotk3/gotk3/glib/list.go
index 250e426c6595..a49a625abacd 100644
--- a/vendor/github.com/gotk3/gotk3/glib/list.go
+++ b/vendor/github.com/gotk3/gotk3/glib/list.go
@@ -4,7 +4,9 @@ package glib
 // #include <glib-object.h>
 // #include "glib.go.h"
 import "C"
-import "unsafe"
+import (
+	"unsafe"
+)
 
 /*
  * Linked Lists
@@ -13,8 +15,8 @@ import "unsafe"
 // List is a representation of Glib's GList.
 type List struct {
 	list *C.struct__GList
-	// If set, dataWrap is called every time NthDataWrapped()
-	// or DataWrapped() is called to wrap raw underlying
+	// If set, dataWrap is called every time NthData()
+	// or Data() is called to wrap raw underlying
 	// value into appropriate type.
 	dataWrap func(unsafe.Pointer) interface{}
 }
@@ -51,8 +53,8 @@ func (v *List) native() *C.struct__GList {
 	return v.list
 }
 
-// DataWapper sets wrap functions, which is called during NthDataWrapped()
-// and DataWrapped(). It's used to cast raw C data into appropriate
+// DataWapper sets wrap functions, which is called during NthData()
+// and Data(). It's used to cast raw C data into appropriate
 // Go structures and types every time that data is retreived.
 func (v *List) DataWrapper(fn func(unsafe.Pointer) interface{}) {
 	if v == nil {
@@ -96,7 +98,7 @@ func (v *List) Nth(n uint) *List {
 	return list
 }
 
-// NthDataWrapped acts the same as g_list_nth_data(), but passes
+// NthData acts the same as g_list_nth_data(), but passes
 // retrieved value before returning through wrap function, set by DataWrapper().
 // If no wrap function is set, it returns raw unsafe.Pointer.
 func (v *List) NthData(n uint) interface{} {
@@ -122,12 +124,27 @@ func (v *List) Previous() *List {
 	return v.wrapNewHead(v.native().prev)
 }
 
+// First is a wrapper around g_list_first().
+func (v *List) First() *List {
+	return v.wrapNewHead(C.g_list_first(v.native()))
+}
+
+// Last is a wrapper around g_list_last().
+func (v *List) Last() *List {
+	return v.wrapNewHead(C.g_list_last(v.native()))
+}
+
+// Reverse is a wrapper around g_list_reverse().
+func (v *List) Reverse() *List {
+	return v.wrapNewHead(C.g_list_reverse(v.native()))
+}
+
 // dataRaw is a wrapper around the data struct field
 func (v *List) dataRaw() unsafe.Pointer {
 	return unsafe.Pointer(v.native().data)
 }
 
-// DataWrapped acts the same as data struct field, but passes
+// Data acts the same as data struct field, but passes
 // retrieved value before returning through wrap function, set by DataWrapper().
 // If no wrap function is set, it returns raw unsafe.Pointer.
 func (v *List) Data() interface{} {
@@ -153,3 +170,6 @@ func (v *List) FreeFull(fn func(item interface{})) {
 	v.Foreach(fn)
 	v.Free()
 }
+
+// CompareDataFunc is a representation of GCompareDataFunc
+type CompareDataFunc func(a, b uintptr) int
diff --git a/vendor/github.com/gotk3/gotk3/glib/menu.go b/vendor/github.com/gotk3/gotk3/glib/menu.go
index ce9d2689e858..0e3a68c22922 100644
--- a/vendor/github.com/gotk3/gotk3/glib/menu.go
+++ b/vendor/github.com/gotk3/gotk3/glib/menu.go
@@ -7,12 +7,27 @@ package glib
 import "C"
 import "unsafe"
 
+// Predefined attribute names for GMenu
+var (
+	MENU_ATTRIBUTE_ACTION           string = C.G_MENU_ATTRIBUTE_ACTION
+	MENU_ATTRIBUTE_ACTION_NAMESPACE string = C.G_MENU_ATTRIBUTE_ACTION_NAMESPACE
+	MENU_ATTRIBUTE_TARGET           string = C.G_MENU_ATTRIBUTE_TARGET
+	MENU_ATTRIBUTE_LABEL            string = C.G_MENU_ATTRIBUTE_LABEL
+	MENU_ATTRIBUTE_ICON             string = C.G_MENU_ATTRIBUTE_ICON
+)
+
+// Predefined link names for GMenu
+var (
+	MENU_LINK_SECTION string = C.G_MENU_LINK_SECTION
+	MENU_LINK_SUBMENU string = C.G_MENU_LINK_SUBMENU
+)
+
 // MenuModel is a representation of GMenuModel.
 type MenuModel struct {
 	*Object
 }
 
-// native() returns a pointer to the underlying GMenuModel.
+// native returns a pointer to the underlying GMenuModel.
 func (v *MenuModel) native() *C.GMenuModel {
 	if v == nil || v.GObject == nil {
 		return nil
@@ -20,6 +35,7 @@ func (v *MenuModel) native() *C.GMenuModel {
 	return C.toGMenuModel(unsafe.Pointer(v.GObject))
 }
 
+// Native returns a pointer to the underlying GMenuModel.
 func (v *MenuModel) Native() uintptr {
 	return uintptr(unsafe.Pointer(v.native()))
 }
@@ -70,11 +86,11 @@ type Menu struct {
 }
 
 // native() returns a pointer to the underlying GMenu.
-func (m *Menu) native() *C.GMenu {
-	if m == nil || m.GObject == nil {
+func (v *Menu) native() *C.GMenu {
+	if v == nil || v.GObject == nil {
 		return nil
 	}
-	p := unsafe.Pointer(m.GObject)
+	p := unsafe.Pointer(v.GObject)
 	return C.toGMenu(p)
 }
 
@@ -102,33 +118,33 @@ func (v *Menu) Freeze() {
 }
 
 // Insert is a wrapper around g_menu_insert().
-func (v *Menu) Insert(position int, label, detailed_action string) {
+func (v *Menu) Insert(position int, label, detailedAction string) {
 	cstr1 := (*C.gchar)(C.CString(label))
 	defer C.free(unsafe.Pointer(cstr1))
 
-	cstr2 := (*C.gchar)(C.CString(detailed_action))
+	cstr2 := (*C.gchar)(C.CString(detailedAction))
 	defer C.free(unsafe.Pointer(cstr2))
 
 	C.g_menu_insert(v.native(), C.gint(position), cstr1, cstr2)
 }
 
 // Prepend is a wrapper around g_menu_prepend().
-func (v *Menu) Prepend(label, detailed_action string) {
+func (v *Menu) Prepend(label, detailedAction string) {
 	cstr1 := (*C.gchar)(C.CString(label))
 	defer C.free(unsafe.Pointer(cstr1))
 
-	cstr2 := (*C.gchar)(C.CString(detailed_action))
+	cstr2 := (*C.gchar)(C.CString(detailedAction))
 	defer C.free(unsafe.Pointer(cstr2))
 
 	C.g_menu_prepend(v.native(), cstr1, cstr2)
 }
 
 // Append is a wrapper around g_menu_append().
-func (v *Menu) Append(label, detailed_action string) {
+func (v *Menu) Append(label, detailedAction string) {
 	cstr1 := (*C.gchar)(C.CString(label))
 	defer C.free(unsafe.Pointer(cstr1))
 
-	cstr2 := (*C.gchar)(C.CString(detailed_action))
+	cstr2 := (*C.gchar)(C.CString(detailedAction))
 	defer C.free(unsafe.Pointer(cstr2))
 
 	C.g_menu_append(v.native(), cstr1, cstr2)
@@ -231,11 +247,11 @@ type MenuItem struct {
 }
 
 // native() returns a pointer to the underlying GMenuItem.
-func (m *MenuItem) native() *C.GMenuItem {
-	if m == nil || m.GObject == nil {
+func (v *MenuItem) native() *C.GMenuItem {
+	if v == nil || v.GObject == nil {
 		return nil
 	}
-	p := unsafe.Pointer(m.GObject)
+	p := unsafe.Pointer(v.GObject)
 	return C.toGMenuItem(p)
 }
 
@@ -248,12 +264,45 @@ func wrapMenuItem(obj *Object) *MenuItem {
 	return &MenuItem{obj}
 }
 
-// MenuItemNew is a wrapper around g_menu_item_new().
-func MenuItemNew(label, detailed_action string) *MenuItem {
+// MenuItemNew is a wrapper around g_menu_item_new(NULL, NULL).
+func MenuItemNew() *MenuItem {
+	c := C.g_menu_item_new(nil, nil)
+	if c == nil {
+		return nil
+	}
+	return wrapMenuItem(wrapObject(unsafe.Pointer(c)))
+}
+
+// MenuItemNewWithLabel is a wrapper around g_menu_item_new(label, NULL).
+func MenuItemNewWithLabel(label string) *MenuItem {
+	cstr1 := (*C.gchar)(C.CString(label))
+	defer C.free(unsafe.Pointer(cstr1))
+
+	c := C.g_menu_item_new(cstr1, nil)
+	if c == nil {
+		return nil
+	}
+	return wrapMenuItem(wrapObject(unsafe.Pointer(c)))
+}
+
+// MenuItemNewWithAction is a wrapper around g_menu_item_new(NULL, detailedAction).
+func MenuItemNewWithAction(detailedAction string) *MenuItem {
+	cstr1 := (*C.gchar)(C.CString(detailedAction))
+	defer C.free(unsafe.Pointer(cstr1))
+
+	c := C.g_menu_item_new(nil, cstr1)
+	if c == nil {
+		return nil
+	}
+	return wrapMenuItem(wrapObject(unsafe.Pointer(c)))
+}
+
+// MenuItemNewWithLabelAndAction is a wrapper around g_menu_item_new(label, detailedAction).
+func MenuItemNewWithLabelAndAction(label, detailedAction string) *MenuItem {
 	cstr1 := (*C.gchar)(C.CString(label))
 	defer C.free(unsafe.Pointer(cstr1))
 
-	cstr2 := (*C.gchar)(C.CString(detailed_action))
+	cstr2 := (*C.gchar)(C.CString(detailedAction))
 	defer C.free(unsafe.Pointer(cstr2))
 
 	c := C.g_menu_item_new(cstr1, cstr2)
@@ -296,7 +345,7 @@ func MenuItemNewFromModel(model *MenuModel, index int) *MenuItem {
 	return wrapMenuItem(wrapObject(unsafe.Pointer(c)))
 }
 
-//SetLabel is a wrapper around g_menu_item_set_label().
+// SetLabel is a wrapper around g_menu_item_set_label().
 func (v *MenuItem) SetLabel(label string) {
 	cstr1 := (*C.gchar)(C.CString(label))
 	defer C.free(unsafe.Pointer(cstr1))
@@ -304,7 +353,12 @@ func (v *MenuItem) SetLabel(label string) {
 	C.g_menu_item_set_label(v.native(), cstr1)
 }
 
-//SetDetailedAction is a wrapper around g_menu_item_set_detailed_action().
+// UnsetLabel is a wrapper around g_menu_item_set_label(NULL).
+func (v *MenuItem) UnsetLabel() {
+	C.g_menu_item_set_label(v.native(), nil)
+}
+
+// SetDetailedAction is a wrapper around g_menu_item_set_detailed_action().
 func (v *MenuItem) SetDetailedAction(act string) {
 	cstr1 := (*C.gchar)(C.CString(act))
 	defer C.free(unsafe.Pointer(cstr1))
@@ -312,17 +366,17 @@ func (v *MenuItem) SetDetailedAction(act string) {
 	C.g_menu_item_set_detailed_action(v.native(), cstr1)
 }
 
-//SetSection is a wrapper around g_menu_item_set_section().
+// SetSection is a wrapper around g_menu_item_set_section().
 func (v *MenuItem) SetSection(section *MenuModel) {
 	C.g_menu_item_set_section(v.native(), section.native())
 }
 
-//SetSubmenu is a wrapper around g_menu_item_set_submenu().
+// SetSubmenu is a wrapper around g_menu_item_set_submenu().
 func (v *MenuItem) SetSubmenu(submenu *MenuModel) {
 	C.g_menu_item_set_submenu(v.native(), submenu.native())
 }
 
-//GetLink is a wrapper around g_menu_item_get_link().
+// GetLink is a wrapper around g_menu_item_get_link().
 func (v *MenuItem) GetLink(link string) *MenuModel {
 	cstr1 := (*C.gchar)(C.CString(link))
 	defer C.free(unsafe.Pointer(cstr1))
@@ -334,7 +388,7 @@ func (v *MenuItem) GetLink(link string) *MenuModel {
 	return wrapMenuModel(wrapObject(unsafe.Pointer(c)))
 }
 
-//SetLink is a wrapper around g_menu_item_Set_link().
+// SetLink is a wrapper around g_menu_item_Set_link().
 func (v *MenuItem) SetLink(link string, model *MenuModel) {
 	cstr1 := (*C.gchar)(C.CString(link))
 	defer C.free(unsafe.Pointer(cstr1))
@@ -342,9 +396,52 @@ func (v *MenuItem) SetLink(link string, model *MenuModel) {
 	C.g_menu_item_set_link(v.native(), cstr1, model.native())
 }
 
-// void 	g_menu_item_set_action_and_target_value ()
-// void 	g_menu_item_set_action_and_target ()
-// GVariant * 	g_menu_item_get_attribute_value ()
+// SetActionAndTargetValue is a wrapper around g_menu_item_set_action_and_target_value()
+func (v *MenuItem) SetActionAndTargetValue(action string, targetValue IVariant) {
+	cstr1 := (*C.gchar)(C.CString(action))
+	defer C.free(unsafe.Pointer(cstr1))
+
+	var c *C.GVariant
+	if targetValue != nil {
+		c = targetValue.ToGVariant()
+	}
+
+	C.g_menu_item_set_action_and_target_value(v.native(), cstr1, c)
+}
+
+// UnsetAction is a wrapper around g_menu_item_set_action_and_target_value(NULL, NULL)
+// Unsets both action and target value. Unsetting the action also clears the target value.
+func (v *MenuItem) UnsetAction() {
+	C.g_menu_item_set_action_and_target_value(v.native(), nil, nil)
+}
+
+// SetAttributeValue is a wrapper around g_menu_item_set_attribute_value()
+func (v *MenuItem) SetAttributeValue(attribute string, value IVariant) {
+	var c *C.GVariant
+	if value != nil {
+		c = value.ToGVariant()
+	}
+
+	cstr1 := (*C.gchar)(C.CString(attribute))
+	defer C.free(unsafe.Pointer(cstr1))
+
+	C.g_menu_item_set_attribute_value(v.native(), cstr1, c)
+}
+
+// GetAttributeValue is a wrapper around g_menu_item_get_attribute_value()
+func (v *MenuItem) GetAttributeValue(attribute string, expectedType *VariantType) *Variant {
+	cstr1 := (*C.gchar)(C.CString(attribute))
+	defer C.free(unsafe.Pointer(cstr1))
+
+	c := C.g_menu_item_get_attribute_value(v.native(), cstr1, expectedType.native())
+	if c == nil {
+		return nil
+	}
+	return newVariant(c)
+}
+
+// TODO: These require positional parameters with *any* type, according to the format string passed.
+// This is likely not possible to represent 1:1 in go.
 // gboolean 	g_menu_item_get_attribute ()
-// void 	g_menu_item_set_attribute_value ()
 // void 	g_menu_item_set_attribute ()
+// void 	g_menu_item_set_action_and_target ()
diff --git a/vendor/github.com/gotk3/gotk3/glib/notifications.go b/vendor/github.com/gotk3/gotk3/glib/notifications.go
index ee244de9b1e4..f1a8c748c89e 100644
--- a/vendor/github.com/gotk3/gotk3/glib/notifications.go
+++ b/vendor/github.com/gotk3/gotk3/glib/notifications.go
@@ -7,17 +7,6 @@ package glib
 import "C"
 import "unsafe"
 
-// Only available from 2.42
-// // NotificationPriority is a representation of GLib's GNotificationPriority.
-// type NotificationPriority int
-
-// const (
-// 	NOTIFICATION_PRIORITY_NORMAL NotificationPriority = C.G_NOTIFICATION_PRIORITY_NORMAL
-// 	NOTIFICATION_PRIORITY_LOW    NotificationPriority = C.G_NOTIFICATION_PRIORITY_LOW
-// 	NOTIFICATION_PRIORITY_HIGH   NotificationPriority = C.G_NOTIFICATION_PRIORITY_HIGH
-// 	NOTIFICATION_PRIORITY_URGENT NotificationPriority = C.G_NOTIFICATION_PRIORITY_URGENT
-// )
-
 // Notification is a representation of GNotification.
 type Notification struct {
 	*Object
@@ -72,12 +61,6 @@ func (v *Notification) SetBody(body string) {
 	C.g_notification_set_body(v.native(), cstr1)
 }
 
-// Only available from 2.42
-// // SetPriority is a wrapper around g_notification_set_priority().
-// func (v *Notification) SetPriority(prio NotificationPriority) {
-// 	C.g_notification_set_priority(v.native(), C.GNotificationPriority(prio))
-// }
-
 // SetDefaultAction is a wrapper around g_notification_set_default_action().
 func (v *Notification) SetDefaultAction(detailedAction string) {
 	cstr1 := (*C.gchar)(C.CString(detailedAction))
@@ -101,7 +84,7 @@ func (v *Notification) AddButton(label, detailedAction string) {
 func (v *Notification) SetIcon(iconPath string) {
 	fileIcon := FileIconNew(iconPath)
 
-	C.g_notification_set_icon(v.native(), (*C.GIcon)(fileIcon.Native()))
+	C.g_notification_set_icon(v.native(), (*C.GIcon)(fileIcon.native()))
 }
 
 // void 	g_notification_set_default_action_and_target () // requires varargs
diff --git a/vendor/github.com/gotk3/gotk3/glib/quark.go b/vendor/github.com/gotk3/gotk3/glib/quark.go
new file mode 100644
index 000000000000..0a6482e37c4e
--- /dev/null
+++ b/vendor/github.com/gotk3/gotk3/glib/quark.go
@@ -0,0 +1,16 @@
+package glib
+
+import (
+	"unsafe"
+)
+
+// #include <glib.h>
+import "C"
+
+// QuarkFromString is a wrapper around g_quark_from_string().
+func QuarkFromString(str string) Quark {
+	cstr := (*C.gchar)(C.CString(str))
+	defer C.free(unsafe.Pointer(cstr))
+
+	return Quark(C.g_quark_from_string(cstr))
+}
\ No newline at end of file
diff --git a/vendor/github.com/gotk3/gotk3/glib/slist.go b/vendor/github.com/gotk3/gotk3/glib/slist.go
index 134e682cf2dc..2b3a6d810a64 100644
--- a/vendor/github.com/gotk3/gotk3/glib/slist.go
+++ b/vendor/github.com/gotk3/gotk3/glib/slist.go
@@ -10,6 +10,10 @@ import "unsafe"
 // by either calling Free() or FreeFull()
 type SList struct {
 	list *C.struct__GSList
+	// If set, dataWrap is called every time Data()
+	// is called to wrap raw underlying
+	// value into appropriate type.
+	dataWrap func(unsafe.Pointer) interface{}
 }
 
 func WrapSList(obj uintptr) *SList {
@@ -24,7 +28,17 @@ func wrapSList(obj *C.struct__GSList) *SList {
 	//NOTE a list should be freed by calling either
 	//g_slist_free() or g_slist_free_full(). However, it's not possible to use a
 	//finalizer for this.
-	return &SList{obj}
+	return &SList{list: obj}
+}
+
+func (v *SList) wrapNewHead(obj *C.struct__GSList) *SList {
+	if obj == nil {
+		return nil
+	}
+	return &SList{
+		list:     obj,
+		dataWrap: v.dataWrap,
+	}
 }
 
 func (v *SList) Native() uintptr {
@@ -38,6 +52,16 @@ func (v *SList) native() *C.struct__GSList {
 	return v.list
 }
 
+// DataWapper sets wrap functions, which is called during NthData()
+// and Data(). It's used to cast raw C data into appropriate
+// Go structures and types every time that data is retreived.
+func (v *SList) DataWrapper(fn func(unsafe.Pointer) interface{}) {
+	if v == nil {
+		return
+	}
+	v.dataWrap = fn
+}
+
 func (v *SList) Append(data uintptr) *SList {
 	ret := C.g_slist_append(v.native(), C.gpointer(data))
 	if ret == v.native() {
@@ -62,25 +86,51 @@ func (v *SList) Next() *SList {
 	return wrapSList(n.next)
 }
 
+// dataRaw is a wrapper around the data struct field
+func (v *SList) dataRaw() unsafe.Pointer {
+	n := v.native()
+	if n == nil {
+		return nil
+	}
+	return unsafe.Pointer(n.data)
+}
+
+// DataRaw is a wrapper around the data struct field
+func (v *SList) DataRaw() unsafe.Pointer {
+	n := v.native()
+	if n == nil {
+		return nil
+	}
+	return unsafe.Pointer(n.data)
+}
+
+// Data acts the same as data struct field, but it returns raw unsafe.Pointer as interface.
+// TODO: Align with List struct and add member + logic for `dataWrap func(unsafe.Pointer) interface{}`?
+func (v *SList) Data() interface{} {
+	ptr := v.dataRaw()
+	if v.dataWrap != nil {
+		return v.dataWrap(ptr)
+	}
+	return ptr
+}
+
 // Foreach acts the same as g_slist_foreach().
 // No user_data argument is implemented because of Go clojure capabilities.
-func (v *SList) Foreach(fn func(ptr unsafe.Pointer)) {
+func (v *SList) Foreach(fn func(item interface{})) {
 	for l := v; l != nil; l = l.Next() {
-		fn(unsafe.Pointer(l.native().data))
+		fn(l.Data())
 	}
 }
 
 // Free is a wrapper around g_slist_free().
 func (v *SList) Free() {
 	C.g_slist_free(v.native())
-	v.list = nil
 }
 
 // FreeFull is a wrapper around g_slist_free_full().
 func (v *SList) FreeFull() {
 	//TODO implement GDestroyNotify callback
 	C.g_slist_free_full(v.native(), nil)
-	v.list = nil
 }
 
 // GSList * 	g_slist_alloc ()
diff --git a/vendor/github.com/gotk3/gotk3/gtk/aboutdialog.go b/vendor/github.com/gotk3/gotk3/gtk/aboutdialog.go
index 5bb61b3b0dcc..a805e5932f25 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/aboutdialog.go
+++ b/vendor/github.com/gotk3/gotk3/gtk/aboutdialog.go
@@ -45,6 +45,10 @@ func marshalAboutDialog(p uintptr) (interface{}, error) {
 }
 
 func wrapAboutDialog(obj *glib.Object) *AboutDialog {
+	if obj == nil {
+		return nil
+	}
+
 	return &AboutDialog{Dialog{Window{Bin{Container{Widget{glib.InitiallyUnowned{obj}}}}}}}
 }
 
@@ -163,7 +167,7 @@ func (v *AboutDialog) GetAuthors() []string {
 			break
 		}
 		authors = append(authors, C.GoString((*C.char)(*cauthors)))
-		cauthors = C.next_gcharptr(cauthors)
+		cauthors = nextgcharptr(cauthors)
 	}
 	return authors
 }
@@ -194,7 +198,7 @@ func (v *AboutDialog) GetArtists() []string {
 			break
 		}
 		artists = append(artists, C.GoString((*C.char)(*cartists)))
-		cartists = C.next_gcharptr(cartists)
+		cartists = nextgcharptr(cartists)
 	}
 	return artists
 }
@@ -225,7 +229,7 @@ func (v *AboutDialog) GetDocumenters() []string {
 			break
 		}
 		documenters = append(documenters, C.GoString((*C.char)(*cdocumenters)))
-		cdocumenters = C.next_gcharptr(cdocumenters)
+		cdocumenters = nextgcharptr(cdocumenters)
 	}
 	return documenters
 }
diff --git a/vendor/github.com/gotk3/gotk3/gtk/accel.go b/vendor/github.com/gotk3/gotk3/gtk/accel.go
index ae2f675439e1..178060252141 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/accel.go
+++ b/vendor/github.com/gotk3/gotk3/gtk/accel.go
@@ -107,6 +107,10 @@ func marshalAccelGroup(p uintptr) (interface{}, error) {
 }
 
 func wrapAccelGroup(obj *glib.Object) *AccelGroup {
+	if obj == nil {
+		return nil
+	}
+
 	return &AccelGroup{obj}
 }
 
@@ -122,7 +126,7 @@ func AccelGroupNew() (*AccelGroup, error) {
 
 // Connect is a wrapper around gtk_accel_group_connect().
 func (v *AccelGroup) Connect(key uint, mods gdk.ModifierType, flags AccelFlags, f interface{}) {
-	closure, _ := glib.ClosureNew(f)
+	closure := glib.ClosureNew(f)
 	cl := (*C.struct__GClosure)(unsafe.Pointer(closure))
 	C.gtk_accel_group_connect(
 		v.native(),
@@ -134,7 +138,7 @@ func (v *AccelGroup) Connect(key uint, mods gdk.ModifierType, flags AccelFlags,
 
 // ConnectByPath is a wrapper around gtk_accel_group_connect_by_path().
 func (v *AccelGroup) ConnectByPath(path string, f interface{}) {
-	closure, _ := glib.ClosureNew(f)
+	closure := glib.ClosureNew(f)
 	cl := (*C.struct__GClosure)(unsafe.Pointer(closure))
 
 	cstr := C.CString(path)
@@ -148,7 +152,7 @@ func (v *AccelGroup) ConnectByPath(path string, f interface{}) {
 
 // Disconnect is a wrapper around gtk_accel_group_disconnect().
 func (v *AccelGroup) Disconnect(f interface{}) {
-	closure, _ := glib.ClosureNew(f)
+	closure := glib.ClosureNew(f)
 	cl := (*C.struct__GClosure)(unsafe.Pointer(closure))
 	C.gtk_accel_group_disconnect(v.native(), cl)
 }
@@ -175,7 +179,7 @@ func (v *AccelGroup) IsLocked() bool {
 
 // AccelGroupFromClosure is a wrapper around gtk_accel_group_from_accel_closure().
 func AccelGroupFromClosure(f interface{}) *AccelGroup {
-	closure, _ := glib.ClosureNew(f)
+	closure := glib.ClosureNew(f)
 	cl := (*C.struct__GClosure)(unsafe.Pointer(closure))
 	c := C.gtk_accel_group_from_accel_closure(cl)
 	if c == nil {
@@ -205,6 +209,9 @@ func AccelGroupsFromObject(obj *glib.Object) *glib.SList {
 	if res == nil {
 		return nil
 	}
+
+	// TODO: call DataWrapper on SList and wrap them to gtk.AccelGroup
+
 	return (*glib.SList)(unsafe.Pointer(res))
 }
 
@@ -233,6 +240,10 @@ func marshalAccelMap(p uintptr) (interface{}, error) {
 }
 
 func wrapAccelMap(obj *glib.Object) *AccelMap {
+	if obj == nil {
+		return nil
+	}
+
 	return &AccelMap{obj}
 }
 
@@ -244,32 +255,13 @@ func AccelMapAddEntry(path string, key uint, mods gdk.ModifierType) {
 	C.gtk_accel_map_add_entry((*C.gchar)(cstr), C.guint(key), C.GdkModifierType(mods))
 }
 
-type AccelKey struct {
-	key   uint
-	mods  gdk.ModifierType
-	flags uint16
-}
+type AccelKey C.GtkAccelKey
 
-func (v *AccelKey) native() *C.struct__GtkAccelKey {
+func (v *AccelKey) native() *C.GtkAccelKey {
 	if v == nil {
 		return nil
 	}
-
-	var val C.struct__GtkAccelKey
-	val.accel_key = C.guint(v.key)
-	val.accel_mods = C.GdkModifierType(v.mods)
-	val.accel_flags = v.flags
-	return &val
-}
-
-func wrapAccelKey(obj *C.struct__GtkAccelKey) *AccelKey {
-	var v AccelKey
-
-	v.key = uint(obj.accel_key)
-	v.mods = gdk.ModifierType(obj.accel_mods)
-	v.flags = uint16(obj.accel_flags)
-
-	return &v
+	return (*C.GtkAccelKey)(v)
 }
 
 // AccelMapLookupEntry is a wrapper around gtk_accel_map_lookup_entry().
@@ -277,10 +269,10 @@ func AccelMapLookupEntry(path string) *AccelKey {
 	cstr := C.CString(path)
 	defer C.free(unsafe.Pointer(cstr))
 
-	var v *C.struct__GtkAccelKey
+	var v = new(AccelKey)
 
-	C.gtk_accel_map_lookup_entry((*C.gchar)(cstr), v)
-	return wrapAccelKey(v)
+	C.gtk_accel_map_lookup_entry((*C.gchar)(cstr), v.native())
+	return v
 }
 
 // AccelMapChangeEntry is a wrapper around gtk_accel_map_change_entry().
@@ -436,37 +428,6 @@ func (v *Window) RemoveAccelGroup(accelGroup *AccelGroup) {
 	C.gtk_window_remove_accel_group(v.native(), accelGroup.native())
 }
 
-/*
- * GdkKeymap
- */
-
-// TODO:
-// GdkKeymapKey
-// gdk_keymap_get_default(). deprecated since 3.22
-// gdk_keymap_get_for_display().
-// gdk_keymap_lookup_key().
-// gdk_keymap_translate_keyboard_state().
-// gdk_keymap_get_entries_for_keyval().
-// gdk_keymap_get_entries_for_keycode().
-// gdk_keymap_get_direction().
-// gdk_keymap_have_bidi_layouts().
-// gdk_keymap_get_caps_lock_state().
-// gdk_keymap_get_num_lock_state().
-// gdk_keymap_get_scroll_lock_state(). since 3.18
-// gdk_keymap_get_modifier_state().
-// gdk_keymap_add_virtual_modifiers().
-// gdk_keymap_map_virtual_modifiers().
-// gdk_keymap_get_modifier_mask().
-// gdk_keyval_name().
-// gdk_keyval_from_name().
-// gdk_keyval_convert_case().
-// gdk_keyval_to_upper().
-// gdk_keyval_to_lower().
-// gdk_keyval_is_upper().
-// gdk_keyval_is_lower().
-// gdk_keyval_to_unicode().
-// gdk_unicode_to_keyval().
-
 // These three functions are for system level access - thus not as high priority to implement
 // TODO: void 	gtk_accelerator_parse_with_keycode ()
 // TODO: gchar * 	gtk_accelerator_name_with_keycode ()
diff --git a/vendor/github.com/gotk3/gotk3/gtk/actionable.go b/vendor/github.com/gotk3/gotk3/gtk/actionable.go
index 70b357d0764e..2dff2f2f1a00 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/actionable.go
+++ b/vendor/github.com/gotk3/gotk3/gtk/actionable.go
@@ -58,6 +58,10 @@ func marshalActionable(p uintptr) (interface{}, error) {
 }
 
 func wrapActionable(obj *glib.Object) *Actionable {
+	if obj == nil {
+		return nil
+	}
+
 	return &Actionable{obj}
 }
 
diff --git a/vendor/github.com/gotk3/gotk3/gtk/actionable.go.h b/vendor/github.com/gotk3/gotk3/gtk/actionable.go.h
index d9ff50583b51..24846f70e842 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/actionable.go.h
+++ b/vendor/github.com/gotk3/gotk3/gtk/actionable.go.h
@@ -1,5 +1 @@
-static GtkActionable *
-toGtkActionable(void *p)
-{
-	return (GTK_ACTIONABLE(p));
-}
+static GtkActionable *toGtkActionable(void *p) { return (GTK_ACTIONABLE(p)); }
diff --git a/vendor/github.com/gotk3/gotk3/gtk/actionbar_since_3_12.go b/vendor/github.com/gotk3/gotk3/gtk/actionbar_since_3_12.go
index fcc0394e6064..7f2126210d6b 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/actionbar_since_3_12.go
+++ b/vendor/github.com/gotk3/gotk3/gtk/actionbar_since_3_12.go
@@ -64,6 +64,10 @@ func marshalActionBar(p uintptr) (interface{}, error) {
 }
 
 func wrapActionBar(obj *glib.Object) *ActionBar {
+	if obj == nil {
+		return nil
+	}
+
 	return &ActionBar{Bin{Container{Widget{glib.InitiallyUnowned{obj}}}}}
 }
 
@@ -96,10 +100,10 @@ func (a *ActionBar) SetCenterWidget(child IWidget) {
 }
 
 // GetCenterWidget is a wrapper around gtk_action_bar_get_center_widget().
-func (a *ActionBar) GetCenterWidget() *Widget {
+func (a *ActionBar) GetCenterWidget() (IWidget, error) {
 	w := C.gtk_action_bar_get_center_widget(a.native())
 	if w == nil {
-		return nil
+		return nil, nil
 	}
-	return &Widget{glib.InitiallyUnowned{glib.Take(unsafe.Pointer(w))}}
+	return castWidget(w)
 }
diff --git a/vendor/github.com/gotk3/gotk3/gtk/actionbar_since_3_12.go.h b/vendor/github.com/gotk3/gotk3/gtk/actionbar_since_3_12.go.h
index d58e36a26c54..4b5cd8923fa3 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/actionbar_since_3_12.go.h
+++ b/vendor/github.com/gotk3/gotk3/gtk/actionbar_since_3_12.go.h
@@ -18,8 +18,4 @@
  * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
  */
 
-static GtkActionBar *
-toGtkActionBar(void *p)
-{
-	return (GTK_ACTION_BAR(p));
-}
+static GtkActionBar *toGtkActionBar(void *p) { return (GTK_ACTION_BAR(p)); }
diff --git a/vendor/github.com/gotk3/gotk3/gtk/app_chooser.go b/vendor/github.com/gotk3/gotk3/gtk/app_chooser.go
index a6d99a063be8..b7ab8dd19950 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/app_chooser.go
+++ b/vendor/github.com/gotk3/gotk3/gtk/app_chooser.go
@@ -58,6 +58,10 @@ func marshalAppChooser(p uintptr) (interface{}, error) {
 }
 
 func wrapAppChooser(obj *glib.Object) *AppChooser {
+	if obj == nil {
+		return nil
+	}
+
 	return &AppChooser{obj}
 }
 
@@ -111,9 +115,14 @@ func marshalAppChooserButton(p uintptr) (interface{}, error) {
 }
 
 func wrapAppChooserButton(obj *glib.Object) *AppChooserButton {
+	if obj == nil {
+		return nil
+	}
+
 	cl := wrapCellLayout(obj)
+	ce := wrapCellEditable(obj)
 	ac := wrapAppChooser(obj)
-	return &AppChooserButton{ComboBox{Bin{Container{Widget{glib.InitiallyUnowned{obj}}}}, *cl}, *ac}
+	return &AppChooserButton{ComboBox{Bin{Container{Widget{glib.InitiallyUnowned{obj}}}}, *cl, *ce}, *ac}
 }
 
 // AppChooserButtonNew() is a wrapper around gtk_app_chooser_button_new().
@@ -209,6 +218,10 @@ func marshalAppChooserWidget(p uintptr) (interface{}, error) {
 }
 
 func wrapAppChooserWidget(obj *glib.Object) *AppChooserWidget {
+	if obj == nil {
+		return nil
+	}
+
 	box := wrapBox(obj)
 	ac := wrapAppChooser(obj)
 	return &AppChooserWidget{*box, *ac}
@@ -322,30 +335,47 @@ func marshalAppChooserDialog(p uintptr) (interface{}, error) {
 }
 
 func wrapAppChooserDialog(obj *glib.Object) *AppChooserDialog {
+	if obj == nil {
+		return nil
+	}
+
 	dialog := wrapDialog(obj)
 	ac := wrapAppChooser(obj)
 	return &AppChooserDialog{*dialog, *ac}
 }
 
-// TODO: Uncomment when gio builds successfully
-// AppChooserDialogNew() is a wrapper around gtk_app_chooser_dialog_new().
-// func AppChooserDialogNew(parent IWindow, flags DialogFlags, file *gio.File) (*AppChooserDialog, error) {
-// 	var gfile *C.GFile
-// 	if file != nil {
-// 		gfile = (*C.GFile)(unsafe.Pointer(file.Native()))
-// 	}
-// 	c := C.gtk_app_chooser_dialog_new(parent.toWindow(), C.GtkDialogFlags(flags), gfile)
-// 	if c == nil {
-// 		return nil, nilPtrErr
-// 	}
-// 	return wrapAppChooserDialog(glib.Take(unsafe.Pointer(c))), nil
-// }
+// AppChooserDialogNew is a wrapper around gtk_app_chooser_dialog_new().
+func AppChooserDialogNew(parent IWindow, flags DialogFlags, file *glib.File) (*AppChooserDialog, error) {
+
+	var gfile *C.GFile
+	if file != nil {
+		gfile = (*C.GFile)(unsafe.Pointer(file.Native()))
+	}
+
+	var pw *C.GtkWindow = nil
+	if parent != nil {
+		pw = parent.toWindow()
+	}
+
+	c := C.gtk_app_chooser_dialog_new(pw, C.GtkDialogFlags(flags), gfile)
+	if c == nil {
+		return nil, nilPtrErr
+	}
+	return wrapAppChooserDialog(glib.Take(unsafe.Pointer(c))), nil
+}
 
 // AppChooserDialogNewForContentType() is a wrapper around gtk_app_chooser_dialog_new_for_content_type().
 func AppChooserDialogNewForContentType(parent IWindow, flags DialogFlags, content_type string) (*AppChooserDialog, error) {
+
 	cstr := C.CString(content_type)
 	defer C.free(unsafe.Pointer(cstr))
-	c := C.gtk_app_chooser_dialog_new_for_content_type(parent.toWindow(), C.GtkDialogFlags(flags), (*C.gchar)(cstr))
+
+	var pw *C.GtkWindow = nil
+	if parent != nil {
+		pw = parent.toWindow()
+	}
+
+	c := C.gtk_app_chooser_dialog_new_for_content_type(pw, C.GtkDialogFlags(flags), (*C.gchar)(cstr))
 	if c == nil {
 		return nil, nilPtrErr
 	}
diff --git a/vendor/github.com/gotk3/gotk3/gtk/application.go b/vendor/github.com/gotk3/gotk3/gtk/application.go
index 099a0be7658d..7e391564dcac 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/application.go
+++ b/vendor/github.com/gotk3/gotk3/gtk/application.go
@@ -47,6 +47,10 @@ func marshalApplication(p uintptr) (interface{}, error) {
 }
 
 func wrapApplication(obj *glib.Object) *Application {
+	if obj == nil {
+		return nil
+	}
+
 	am := &glib.ActionMap{obj}
 	ag := &glib.ActionGroup{obj}
 	return &Application{glib.Application{obj, am, ag}}
@@ -133,11 +137,17 @@ func (v *Application) IsInhibited(flags ApplicationInhibitFlags) bool {
 }
 
 // Inhibited is a wrapper around gtk_application_inhibit().
-func (v *Application) Inhibited(w IWindow, flags ApplicationInhibitFlags, reason string) uint {
+func (v *Application) Inhibited(window IWindow, flags ApplicationInhibitFlags, reason string) uint {
+
 	cstr1 := (*C.gchar)(C.CString(reason))
 	defer C.free(unsafe.Pointer(cstr1))
 
-	return uint(C.gtk_application_inhibit(v.native(), w.toWindow(), C.GtkApplicationInhibitFlags(flags), cstr1))
+	var w *C.GtkWindow = nil
+	if window != nil {
+		w = window.toWindow()
+	}
+
+	return uint(C.gtk_application_inhibit(v.native(), w, C.GtkApplicationInhibitFlags(flags), cstr1))
 }
 
 // void 	gtk_application_add_accelerator () // deprecated and uses a gvariant paramater
@@ -146,13 +156,17 @@ func (v *Application) Inhibited(w IWindow, flags ApplicationInhibitFlags, reason
 // GetWindows is a wrapper around gtk_application_get_windows().
 // Returned list is wrapped to return *gtk.Window elements.
 func (v *Application) GetWindows() *glib.List {
-	glist := C.gtk_application_get_windows(v.native())
-	list := glib.WrapList(uintptr(unsafe.Pointer(glist)))
-	list.DataWrapper(func(ptr unsafe.Pointer) interface{} {
+	clist := C.gtk_application_get_windows(v.native())
+	if clist == nil {
+		return nil
+	}
+
+	glist := glib.WrapList(uintptr(unsafe.Pointer(clist)))
+	glist.DataWrapper(func(ptr unsafe.Pointer) interface{} {
 		return wrapWindow(glib.Take(ptr))
 	})
-	runtime.SetFinalizer(list, func(l *glib.List) {
+	runtime.SetFinalizer(glist, func(l *glib.List) {
 		l.Free()
 	})
-	return list
+	return glist
 }
diff --git a/vendor/github.com/gotk3/gotk3/gtk/application_since_3_12.go b/vendor/github.com/gotk3/gotk3/gtk/application_since_3_12.go
index 1fd55fb6b82e..478505edfc19 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/application_since_3_12.go
+++ b/vendor/github.com/gotk3/gotk3/gtk/application_since_3_12.go
@@ -21,7 +21,7 @@ func (v *Application) GetAccelsForAction(act string) []string {
 
 	for *c != nil {
 		descs = append(descs, C.GoString((*C.char)(*c)))
-		c = C.next_gcharptr(c)
+		c = nextgcharptr(c)
 	}
 
 	return descs
@@ -55,7 +55,7 @@ func (v *Application) ListActionDescriptions() []string {
 
 	for *c != nil {
 		descs = append(descs, C.GoString((*C.char)(*c)))
-		c = C.next_gcharptr(c)
+		c = nextgcharptr(c)
 	}
 
 	return descs
diff --git a/vendor/github.com/gotk3/gotk3/gtk/application_since_3_14.go b/vendor/github.com/gotk3/gotk3/gtk/application_since_3_14.go
index 2a93edbed123..9c749c54a6ba 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/application_since_3_14.go
+++ b/vendor/github.com/gotk3/gotk3/gtk/application_since_3_14.go
@@ -30,7 +30,7 @@ func (v *Application) GetActionsForAccel(acc string) []string {
 
 	for *c != nil {
 		acts = append(acts, C.GoString((*C.char)(*c)))
-		c = C.next_gcharptr(c)
+		c = nextgcharptr(c)
 	}
 
 	return acts
diff --git a/vendor/github.com/gotk3/gotk3/gtk/application_window.go b/vendor/github.com/gotk3/gotk3/gtk/application_window.go
index cc6a295dcd1e..f5bc2c087f53 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/application_window.go
+++ b/vendor/github.com/gotk3/gotk3/gtk/application_window.go
@@ -41,6 +41,10 @@ func marshalApplicationWindow(p uintptr) (interface{}, error) {
 }
 
 func wrapApplicationWindow(obj *glib.Object) *ApplicationWindow {
+	if obj == nil {
+		return nil
+	}
+
 	am := &glib.ActionMap{obj}
 	ag := &glib.ActionGroup{obj}
 	return &ApplicationWindow{Window{Bin{Container{Widget{glib.InitiallyUnowned{obj}}}}}, am, ag}
diff --git a/vendor/github.com/gotk3/gotk3/gtk/box_since_3_12.go b/vendor/github.com/gotk3/gotk3/gtk/box_since_3_12.go
index f74999b28758..cc140ca30e3f 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/box_since_3_12.go
+++ b/vendor/github.com/gotk3/gotk3/gtk/box_since_3_12.go
@@ -28,11 +28,6 @@ package gtk
 // #include <gtk/gtk.h>
 // #include "gtk.go.h"
 import "C"
-import (
-	"unsafe"
-
-	"github.com/gotk3/gotk3/glib"
-)
 
 // SetCenterWidget is a wrapper around gtk_box_set_center_widget().
 func (a *Box) SetCenterWidget(child IWidget) {
@@ -44,10 +39,10 @@ func (a *Box) SetCenterWidget(child IWidget) {
 }
 
 // GetCenterWidget is a wrapper around gtk_box_get_center_widget().
-func (a *Box) GetCenterWidget() *Widget {
+func (a *Box) GetCenterWidget() (IWidget, error) {
 	w := C.gtk_box_get_center_widget(a.native())
 	if w == nil {
-		return nil
+		return nil, nil
 	}
-	return &Widget{glib.InitiallyUnowned{glib.Take(unsafe.Pointer(w))}}
+	return castWidget(w)
 }
diff --git a/vendor/github.com/gotk3/gotk3/gtk/button_box.go b/vendor/github.com/gotk3/gotk3/gtk/button_box.go
index 0f92fa1714b6..2d082f4fdc9d 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/button_box.go
+++ b/vendor/github.com/gotk3/gotk3/gtk/button_box.go
@@ -7,8 +7,9 @@ package gtk
 // #include "gtk.go.h"
 import "C"
 import (
-	"github.com/gotk3/gotk3/glib"
 	"unsafe"
+
+	"github.com/gotk3/gotk3/glib"
 )
 
 type ButtonBoxStyle int
@@ -46,6 +47,10 @@ func marshalButtonBox(p uintptr) (interface{}, error) {
 }
 
 func wrapButtonBox(obj *glib.Object) *ButtonBox {
+	if obj == nil {
+		return nil
+	}
+
 	return &ButtonBox{Box{Container{Widget{glib.InitiallyUnowned{obj}}}}}
 }
 
diff --git a/vendor/github.com/gotk3/gotk3/gtk/cell_area.go b/vendor/github.com/gotk3/gotk3/gtk/cell_area.go
new file mode 100644
index 000000000000..c7a641854423
--- /dev/null
+++ b/vendor/github.com/gotk3/gotk3/gtk/cell_area.go
@@ -0,0 +1,580 @@
+// Same copyright and license as the rest of the files in this project
+
+package gtk
+
+// #include <gtk/gtk.h>
+// #include "gtk.go.h"
+import "C"
+import (
+	"fmt"
+	"unsafe"
+
+	"github.com/gotk3/gotk3/cairo"
+	"github.com/gotk3/gotk3/gdk"
+	"github.com/gotk3/gotk3/glib"
+)
+
+/*
+ * GtkCellArea
+ */
+
+// TODO: macro
+// GTK_CELL_AREA_WARN_INVALID_CELL_PROPERTY_ID(object, property_id, pspec)
+// object - the GObject on which set_cell_property() or get_cell_property() was called
+// property_id - the numeric id of the property
+// pspec - the GParamSpec of the property
+// C.GTK_CELL_AREA_WARN_INVALID_CELL_PROPERTY_ID
+
+// CellArea is a representation of GTK's GtkCellArea.
+type CellArea struct {
+	glib.InitiallyUnowned
+}
+
+type ICellArea interface {
+	toCellArea() *C.GtkCellArea
+	ToCellArea() *CellArea
+}
+
+// native returns a pointer to the underlying GtkCellArea.
+func (v *CellArea) native() *C.GtkCellArea {
+	if v == nil || v.GObject == nil {
+		return nil
+	}
+	p := unsafe.Pointer(v.GObject)
+	return C.toGtkCellArea(p)
+}
+
+func (v *CellArea) toCellArea() *C.GtkCellArea {
+	if v == nil {
+		return nil
+	}
+	return v.native()
+}
+
+// ToCellArea is a helper getter, in case you use the interface gtk.ICellArea in your program.
+// It returns e.g. *gtk.CellAreaBox as a *gtk.CellArea.
+func (v *CellArea) ToCellArea() *CellArea {
+	return v
+}
+
+func marshalCellArea(p uintptr) (interface{}, error) {
+	c := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
+	obj := glib.Take(unsafe.Pointer(c))
+	return wrapCellArea(obj), nil
+}
+
+func wrapCellArea(obj *glib.Object) *CellArea {
+	if obj == nil {
+		return nil
+	}
+
+	return &CellArea{glib.InitiallyUnowned{obj}}
+}
+
+// Add is a wrapper around gtk_cell_area_add().
+func (v *CellArea) Add(renderer ICellRenderer) {
+	C.gtk_cell_area_add(v.native(), renderer.toCellRenderer())
+}
+
+// Remove is a wrapper around gtk_cell_area_remove().
+func (v *CellArea) Remove(renderer ICellRenderer) {
+	C.gtk_cell_area_remove(v.native(), renderer.toCellRenderer())
+}
+
+// HasRenderer is a wrapper around gtk_cell_area_has_renderer().
+func (v *CellArea) HasRenderer(renderer ICellRenderer) bool {
+	return gobool(C.gtk_cell_area_has_renderer(v.native(), renderer.toCellRenderer()))
+}
+
+// TODO:
+// depends on GtkCellCallback
+// Foreach is a wrapper around gtk_cell_area_foreach().
+// func (v *CellArea) Foreach(cb CellCallback, callbackData interface{}) {
+// }
+
+// TODO:
+// depends on GtkCellAllocCallback
+// ForeachAlloc is a wrapper around gtk_cell_area_foreach_alloc().
+// func (v *CellArea) ForeachAlloc(context *CellAreaContext, widget IWidget, cellArea, backgroundArea *gdk.Rectangle, cb CellAllocCallback, callbackData interface{}) {
+// }
+
+// AreaEvent is a wrapper around gtk_cell_area_event().
+func (v *CellArea) AreaEvent(context *CellAreaContext, widget IWidget,
+	event *gdk.Event, cellArea *gdk.Rectangle, flags CellRendererState) int {
+
+	e := (*C.GdkEvent)(unsafe.Pointer(event.Native()))
+	c := C.gtk_cell_area_event(v.native(), context.native(), widget.toWidget(),
+		e, nativeGdkRectangle(*cellArea), C.GtkCellRendererState(flags))
+
+	return int(c)
+}
+
+// Render is a wrapper around gtk_cell_area_render().
+func (v *CellArea) Render(context *CellAreaContext, widget IWidget, cr *cairo.Context,
+	backgroundArea, cellArea *gdk.Rectangle, flags CellRendererState, paintFocus bool) {
+
+	cairoContext := (*C.cairo_t)(unsafe.Pointer(cr.Native()))
+
+	C.gtk_cell_area_render(v.native(), context.native(), widget.toWidget(), cairoContext,
+		nativeGdkRectangle(*backgroundArea), nativeGdkRectangle(*cellArea),
+		C.GtkCellRendererState(flags), gbool(paintFocus))
+}
+
+// GetCellAllocation is a wrapper around gtk_cell_area_get_cell_allocation().
+func (v *CellArea) GetCellAllocation(context *CellAreaContext, widget IWidget,
+	renderer ICellRenderer, cellArea *gdk.Rectangle) *gdk.Rectangle {
+
+	var cRect *C.GdkRectangle
+	C.gtk_cell_area_get_cell_allocation(v.native(), context.native(), widget.toWidget(),
+		renderer.toCellRenderer(), nativeGdkRectangle(*cellArea), cRect)
+	allocation := gdk.WrapRectangle(uintptr(unsafe.Pointer(cRect)))
+	return allocation
+
+}
+
+// GetCellAtPosition is a wrapper around gtk_cell_area_get_cell_at_position().
+func (v *CellArea) GetCellAtPosition(context *CellAreaContext, widget IWidget,
+	cellArea *gdk.Rectangle, x, y int) (ICellRenderer, *gdk.Rectangle, error) {
+
+	var cRect *C.GdkRectangle
+
+	renderer := C.gtk_cell_area_get_cell_at_position(v.native(), context.native(), widget.toWidget(),
+		nativeGdkRectangle(*cellArea), C.gint(x), C.gint(y), cRect)
+
+	var allocation *gdk.Rectangle
+
+	if cRect != nil {
+		allocation = gdk.WrapRectangle(uintptr(unsafe.Pointer(cRect)))
+	}
+
+	r, err := castCellRenderer(renderer)
+
+	return r, allocation, err
+}
+
+// CreateContext is a wrapper around gtk_cell_area_create_context().
+func (v *CellArea) CreateContext() (*CellAreaContext, error) {
+	c := C.gtk_cell_area_create_context(v.native())
+	if c == nil {
+		return nil, nilPtrErr
+	}
+	return wrapCellAreaContext(glib.Take(unsafe.Pointer(c))), nil
+}
+
+// CopyContext is a wrapper around gtk_cell_area_copy_context().
+func (v *CellArea) CopyContext(context *CellAreaContext) (*CellAreaContext, error) {
+	c := C.gtk_cell_area_copy_context(v.native(), context.native())
+	if c == nil {
+		return nil, nilPtrErr
+	}
+	return wrapCellAreaContext(glib.Take(unsafe.Pointer(c))), nil
+}
+
+// TODO:
+// depends on GtkSizeRequestMode
+// gtk_cell_area_get_request_mode
+
+// GetPreferredWidth is a wrapper around gtk_cell_area_get_preferred_width().
+func (v *CellArea) GetPreferredWidth(context *CellAreaContext, widget IWidget) (int, int) {
+	var minWidth C.gint
+	var naturalWidth C.gint
+	C.gtk_cell_area_get_preferred_width(v.native(), context.native(), widget.toWidget(),
+		&minWidth, &naturalWidth)
+
+	return int(minWidth), int(naturalWidth)
+}
+
+// GetPreferredHeightForWidth is a wrapper around gtk_cell_area_get_preferred_height_for_width().
+func (v *CellArea) GetPreferredHeightForWidth(context *CellAreaContext, widget IWidget, width int) (int, int) {
+	var minHeight C.gint
+	var naturalHeight C.gint
+	C.gtk_cell_area_get_preferred_height_for_width(v.native(), context.native(), widget.toWidget(),
+		C.gint(width), &minHeight, &naturalHeight)
+
+	return int(minHeight), int(naturalHeight)
+}
+
+// GetPreferredHeight is a wrapper around gtk_cell_area_get_preferred_height().
+func (v *CellArea) GetPreferredHeight(context *CellAreaContext, widget IWidget) (int, int) {
+	var minHeight C.gint
+	var naturalHeight C.gint
+	C.gtk_cell_area_get_preferred_height(v.native(), context.native(), widget.toWidget(),
+		&minHeight, &naturalHeight)
+
+	return int(minHeight), int(naturalHeight)
+}
+
+// GetPreferredWidthForHeight is a wrapper around gtk_cell_area_get_preferred_width_for_height().
+func (v *CellArea) GetPreferredWidthForHeight(context *CellAreaContext, widget IWidget, height int) (int, int) {
+	var minWidth C.gint
+	var naturalWidth C.gint
+	C.gtk_cell_area_get_preferred_width_for_height(v.native(), context.native(), widget.toWidget(),
+		C.gint(height), &minWidth, &naturalWidth)
+
+	return int(minWidth), int(naturalWidth)
+}
+
+// GetCurrentPathString is a wrapper around gtk_cell_area_get_current_path_string().
+func (v *CellArea) GetCurrentPathString() string {
+	c := C.gtk_cell_area_get_current_path_string(v.native())
+	// This string belongs to the area and should not be freed.
+	return goString(c)
+}
+
+// ApplyAttributes is a wrapper around gtk_cell_area_apply_attributes().
+func (v *CellArea) ApplyAttributes(model ITreeModel, iter *TreeIter, isExpander, isExpanded bool) {
+	C.gtk_cell_area_apply_attributes(v.native(), model.toTreeModel(), iter.native(),
+		gbool(isExpander), gbool(isExpanded))
+}
+
+// AttributeConnect is a wrapper around gtk_cell_area_attribute_connect().
+func (v *CellArea) AttributeConnect(renderer ICellRenderer, attribute string, column int) {
+	cstr := C.CString(attribute)
+	defer C.free(unsafe.Pointer(cstr))
+	C.gtk_cell_area_attribute_connect(v.native(), renderer.toCellRenderer(), (*C.gchar)(cstr), C.gint(column))
+}
+
+// AttributeDisconnect is a wrapper around gtk_cell_area_attribute_disconnect().
+func (v *CellArea) AttributeDisconnect(renderer ICellRenderer, attribute string) {
+	cstr := C.CString(attribute)
+	defer C.free(unsafe.Pointer(cstr))
+	C.gtk_cell_area_attribute_disconnect(v.native(), renderer.toCellRenderer(), (*C.gchar)(cstr))
+}
+
+// TODO:
+// gtk_cell_area_class_install_cell_property // depends on GParamSpec
+// gtk_cell_area_class_find_cell_property // depends on GParamSpec
+// gtk_cell_area_class_list_cell_properties // depends on GParamSpec
+// gtk_cell_area_add_with_properties
+// gtk_cell_area_cell_set
+// gtk_cell_area_cell_get
+// gtk_cell_area_cell_set_valist
+// gtk_cell_area_cell_get_valist
+
+// CellSetProperty is a wrapper around gtk_cell_area_cell_set_property().
+func (v *CellArea) CellSetProperty(renderer ICellRenderer, propertyName string, value interface{}) error {
+	gval, err := glib.GValue(value)
+	if err != nil {
+		return err
+	}
+	cstr := C.CString(propertyName)
+	defer C.free(unsafe.Pointer(cstr))
+	C.gtk_cell_area_cell_set_property(v.native(), renderer.toCellRenderer(), (*C.gchar)(cstr),
+		(*C.GValue)(unsafe.Pointer(gval.Native())))
+	return nil
+}
+
+// CellGetProperty is a wrapper around gtk_cell_area_cell_get_property().
+func (v *CellArea) CellGetProperty(renderer ICellRenderer, propertyName string) (interface{}, error) {
+	cstr := C.CString(propertyName)
+	defer C.free(unsafe.Pointer(cstr))
+
+	var gval C.GValue
+	C.gtk_cell_area_cell_get_property(v.native(), renderer.toCellRenderer(), (*C.gchar)(cstr), &gval)
+	value := glib.ValueFromNative(unsafe.Pointer(&gval))
+	return value.GoValue()
+}
+
+// IsActivatable is a wrapper around gtk_cell_area_is_activatable().
+func (v *CellArea) IsActivatable() bool {
+	return gobool(C.gtk_cell_area_is_activatable(v.native()))
+}
+
+// Activate is a wrapper around gtk_cell_area_activate().
+func (v *CellArea) Activate(context *CellAreaContext, widget IWidget,
+	cellArea *gdk.Rectangle, flags CellRendererState, editOnly bool) {
+
+	C.gtk_cell_area_activate(v.native(), context.native(), widget.toWidget(),
+		nativeGdkRectangle(*cellArea), C.GtkCellRendererState(flags), gbool(editOnly))
+}
+
+// Focus is a wrapper around gtk_cell_area_focus().
+func (v *CellArea) Focus(direction DirectionType) bool {
+	return gobool(C.gtk_cell_area_focus(v.native(), C.GtkDirectionType(direction)))
+}
+
+// SetFocusCell is a wrapper around gtk_cell_area_set_focus_cell().
+func (v *CellArea) SetFocusCell(renderer ICellRenderer) {
+	C.gtk_cell_area_set_focus_cell(v.native(), renderer.toCellRenderer())
+}
+
+// GetFocusCell is a wrapper around gtk_cell_area_get_focus_cell().
+func (v *CellArea) GetFocusCell() (ICellRenderer, error) {
+	c := C.gtk_cell_area_get_focus_cell(v.native())
+	return castCellRenderer(c)
+}
+
+// AddFocusSibling is a wrapper around gtk_cell_area_add_focus_sibling().
+func (v *CellArea) AddFocusSibling(renderer, sibling ICellRenderer) {
+	C.gtk_cell_area_add_focus_sibling(v.native(), renderer.toCellRenderer(), sibling.toCellRenderer())
+}
+
+// RemoveFocusSibling is a wrapper around gtk_cell_area_remove_focus_sibling().
+func (v *CellArea) RemoveFocusSibling(renderer, sibling ICellRenderer) {
+	C.gtk_cell_area_remove_focus_sibling(v.native(), renderer.toCellRenderer(), sibling.toCellRenderer())
+}
+
+// IsFocusSibling is a wrapper around gtk_cell_area_is_focus_sibling().
+func (v *CellArea) IsFocusSibling(renderer, sibling ICellRenderer) bool {
+	return gobool(C.gtk_cell_area_is_focus_sibling(v.native(), renderer.toCellRenderer(), sibling.toCellRenderer()))
+}
+
+// GetFocusSiblings is a wrapper around gtk_cell_area_get_focus_siblings().
+func (v *CellArea) GetFocusSiblings(renderer ICellRenderer) ([]ICellRenderer, error) {
+	clist := C.gtk_cell_area_get_focus_siblings(v.native(), renderer.toCellRenderer())
+	if clist == nil {
+		return nil, nilPtrErr
+	}
+
+	// The returned list is internal and should not be freed.
+	var cellRendererList []ICellRenderer
+	wlist := glib.WrapList(uintptr(unsafe.Pointer(clist)))
+	for ; wlist.Data() != nil; wlist = wlist.Next() {
+		w, ok := wlist.Data().(*CellRenderer)
+		if !ok {
+			return nil, fmt.Errorf("element is not of type *CellRenderer, got %T", w)
+		}
+		cRenderer, err := castCellRenderer(w.toCellRenderer())
+		if err != nil {
+			return nil, err
+		}
+		cellRendererList = append(cellRendererList, cRenderer)
+	}
+
+	return cellRendererList, nil
+}
+
+// GetFocusFromSibling is a wrapper around gtk_cell_area_get_focus_from_sibling().
+func (v *CellArea) GetFocusFromSibling(renderer ICellRenderer) (ICellRenderer, error) {
+	c := C.gtk_cell_area_get_focus_from_sibling(v.native(), renderer.toCellRenderer())
+	return castCellRenderer(c)
+}
+
+// GetEditedCell is a wrapper around gtk_cell_area_get_edited_cell().
+func (v *CellArea) GetEditedCell() (ICellRenderer, error) {
+	c := C.gtk_cell_area_get_edited_cell(v.native())
+	return castCellRenderer(c)
+}
+
+// GetEditWidget is a wrapper around gtk_cell_area_get_edit_widget().
+func (v *CellArea) GetEditWidget() (ICellEditable, error) {
+	c := C.gtk_cell_area_get_edit_widget(v.native())
+	return castCellEditable(c)
+}
+
+// ActivateCell is a wrapper around gtk_cell_area_activate_cell().
+func (v *CellArea) ActivateCell(widget IWidget, renderer ICellRenderer,
+	event *gdk.Event, cellArea *gdk.Rectangle, flags CellRendererState) bool {
+
+	e := (*C.GdkEvent)(unsafe.Pointer(event.Native()))
+	c := C.gtk_cell_area_activate_cell(v.native(), widget.toWidget(), renderer.toCellRenderer(),
+		e, nativeGdkRectangle(*cellArea), C.GtkCellRendererState(flags))
+
+	return gobool(c)
+}
+
+// StopEditing is a wrapper around gtk_cell_area_stop_editing().
+func (v *CellArea) StopEditing(cancelled bool) {
+	C.gtk_cell_area_stop_editing(v.native(), gbool(cancelled))
+}
+
+// InnerCellArea is a wrapper around gtk_cell_area_inner_cell_area().
+func (v *CellArea) InnerCellArea(widget IWidget, cellArea *gdk.Rectangle) *gdk.Rectangle {
+	var cRect *C.GdkRectangle
+	C.gtk_cell_area_inner_cell_area(v.native(), widget.toWidget(), nativeGdkRectangle(*cellArea), cRect)
+	innerArea := gdk.WrapRectangle(uintptr(unsafe.Pointer(cRect)))
+	return innerArea
+}
+
+// RequestRenderer is a wrapper around gtk_cell_area_request_renderer().
+func (v *CellArea) RequestRenderer(renderer ICellRenderer, orientation Orientation,
+	widget IWidget, forSize int) (int, int) {
+
+	var minSize C.gint
+	var naturalSize C.gint
+
+	C.gtk_cell_area_request_renderer(v.native(), renderer.toCellRenderer(), C.GtkOrientation(orientation),
+		widget.toWidget(), C.gint(forSize), &minSize, &naturalSize)
+
+	return int(minSize), int(naturalSize)
+}
+
+/*
+ * GtkCellAreaContext
+ */
+
+type CellAreaContext struct {
+	*glib.Object
+}
+
+// native returns a pointer to the underlying GtkCellAreaContext.
+func (v *CellAreaContext) native() *C.GtkCellAreaContext {
+	if v == nil || v.GObject == nil {
+		return nil
+	}
+	p := unsafe.Pointer(v.GObject)
+	return C.toGtkCellAreaContext(p)
+}
+
+func (v *CellAreaContext) toCellAreaContext() *C.GtkCellAreaContext {
+	if v == nil {
+		return nil
+	}
+	return v.native()
+}
+
+func marshalCellAreaContext(p uintptr) (interface{}, error) {
+	c := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
+	obj := glib.Take(unsafe.Pointer(c))
+	return wrapCellAreaContext(obj), nil
+}
+
+func wrapCellAreaContext(obj *glib.Object) *CellAreaContext {
+	if obj == nil {
+		return nil
+	}
+
+	return &CellAreaContext{obj}
+}
+
+// GetArea is a wrapper around gtk_cell_area_context_get_area().
+func (v *CellAreaContext) GetArea() (*CellArea, error) {
+	c := C.gtk_cell_area_context_get_area(v.native())
+	if c == nil {
+		return nil, nilPtrErr
+	}
+	return wrapCellArea(glib.Take(unsafe.Pointer(c))), nil
+}
+
+// Allocate is a wrapper around gtk_cell_area_context_allocate().
+func (v *CellAreaContext) Allocate(width, height int) {
+	C.gtk_cell_area_context_allocate(v.native(), C.gint(width), C.gint(height))
+}
+
+// Reset is a wrapper around gtk_cell_area_context_reset().
+func (v *CellAreaContext) Reset(width, height int) {
+	C.gtk_cell_area_context_reset(v.native())
+}
+
+// GetPreferredWidth is a wrapper around gtk_cell_area_context_get_preferred_width().
+func (v *CellAreaContext) GetPreferredWidth() (int, int) {
+	var minWidth C.gint
+	var naturalWidth C.gint
+	C.gtk_cell_area_context_get_preferred_width(v.native(), &minWidth, &naturalWidth)
+	return int(minWidth), int(naturalWidth)
+}
+
+// GetPreferredHeight is a wrapper around gtk_cell_area_context_get_preferred_height().
+func (v *CellAreaContext) GetPreferredHeight() (int, int) {
+	var minHeight C.gint
+	var naturalHeight C.gint
+	C.gtk_cell_area_context_get_preferred_height(v.native(), &minHeight, &naturalHeight)
+	return int(minHeight), int(naturalHeight)
+}
+
+// GetPreferredHeightForWidth is a wrapper around gtk_cell_area_context_get_preferred_height_for_width().
+func (v *CellAreaContext) GetPreferredHeightForWidth(width int) (int, int) {
+	var minHeight C.gint
+	var naturalHeight C.gint
+	C.gtk_cell_area_context_get_preferred_height_for_width(v.native(), C.gint(width), &minHeight, &naturalHeight)
+	return int(minHeight), int(naturalHeight)
+}
+
+// GetPreferredWidthForHeight is a wrapper around gtk_cell_area_context_get_preferred_width_for_height().
+func (v *CellAreaContext) GetPreferredWidthForHeight(height int) (int, int) {
+	var minWidth C.gint
+	var naturalWidth C.gint
+	C.gtk_cell_area_context_get_preferred_width_for_height(v.native(), C.gint(height), &minWidth, &naturalWidth)
+	return int(minWidth), int(naturalWidth)
+}
+
+// GetAllocation is a wrapper around gtk_cell_area_context_get_allocation().
+func (v *CellAreaContext) GetAllocation() (int, int) {
+	var height C.gint
+	var width C.gint
+	C.gtk_cell_area_context_get_allocation(v.native(), &height, &width)
+	return int(height), int(width)
+}
+
+// PushPreferredWidth is a wrapper around gtk_cell_area_context_push_preferred_width().
+func (v *CellAreaContext) PushPreferredWidth(minWidth, naturalWidth int) {
+	C.gtk_cell_area_context_push_preferred_width(v.native(), C.gint(minWidth), C.gint(naturalWidth))
+}
+
+// PushPreferredHeight is a wrapper around gtk_cell_area_context_push_preferred_height().
+func (v *CellAreaContext) PushPreferredHeight(minHeight, naturalHeight int) {
+	C.gtk_cell_area_context_push_preferred_height(v.native(), C.gint(minHeight), C.gint(naturalHeight))
+}
+
+/*
+ * GtkCellAreaBox
+ */
+
+// CellAreaBox is a representation of GTK's GtkCellAreaBox.
+type CellAreaBox struct {
+	CellArea
+
+	// Interfaces
+	Orientable
+}
+
+// native returns a pointer to the underlying GtkCellAreaBox.
+func (v *CellAreaBox) native() *C.GtkCellAreaBox {
+	if v == nil || v.CellArea.GObject == nil {
+		return nil
+	}
+	p := unsafe.Pointer(v.CellArea.GObject)
+	return C.toGtkCellAreaBox(p)
+}
+
+func (v *CellArea) toOrientable() *C.GtkOrientable {
+	if v == nil {
+		return nil
+	}
+	return C.toGtkOrientable(unsafe.Pointer(v.GObject))
+}
+
+func marshalCellAreaBox(p uintptr) (interface{}, error) {
+	c := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
+	obj := glib.Take(unsafe.Pointer(c))
+	return wrapCellAreaBox(obj), nil
+}
+
+func wrapCellAreaBox(obj *glib.Object) *CellAreaBox {
+	if obj == nil {
+		return nil
+	}
+
+	cellArea := wrapCellArea(obj)
+	o := wrapOrientable(obj)
+	return &CellAreaBox{*cellArea, *o}
+}
+
+// CellAreaBoxNew is a wrapper around gtk_cell_area_box_new().
+func CellAreaBoxNew() (*CellAreaBox, error) {
+	c := C.gtk_cell_area_box_new()
+	if c == nil {
+		return nil, nilPtrErr
+	}
+	return wrapCellAreaBox(glib.Take(unsafe.Pointer(c))), nil
+}
+
+// PackStart is a wrapper around gtk_cell_area_box_pack_start().
+func (v *CellAreaBox) PackStart(renderer ICellRenderer, expand, align, fixed bool) {
+	C.gtk_cell_area_box_pack_start(v.native(), renderer.toCellRenderer(), gbool(expand), gbool(align), gbool(fixed))
+}
+
+// PackEnd is a wrapper around gtk_cell_area_box_pack_end().
+func (v *CellAreaBox) PackEnd(renderer ICellRenderer, expand, align, fixed bool) {
+	C.gtk_cell_area_box_pack_end(v.native(), renderer.toCellRenderer(), gbool(expand), gbool(align), gbool(fixed))
+}
+
+// GetSpacing is a wrapper around gtk_cell_area_box_get_spacing().
+func (v *CellAreaBox) GetSpacing() int {
+	return int(C.gtk_cell_area_box_get_spacing(v.native()))
+}
+
+// SetSpacing is a wrapper around gtk_cell_area_box_set_spacing().
+func (v *CellAreaBox) SetSpacing(spacing int) {
+	C.gtk_cell_area_box_set_spacing(v.native(), C.gint(spacing))
+}
diff --git a/vendor/github.com/gotk3/gotk3/gtk/cell_area_since_3_14.go b/vendor/github.com/gotk3/gotk3/gtk/cell_area_since_3_14.go
new file mode 100644
index 000000000000..b9876312382b
--- /dev/null
+++ b/vendor/github.com/gotk3/gotk3/gtk/cell_area_since_3_14.go
@@ -0,0 +1,23 @@
+// Same copyright and license as the rest of the files in this project
+// See: https://developer.gnome.org/gtk3/3.14/api-index-3-14.html
+
+// +build !gtk_3_6,!gtk_3_8,!gtk_3_10,!gtk_3_12
+
+package gtk
+
+// #include <gtk/gtk.h>
+// #include "gtk.go.h"
+import "C"
+import "unsafe"
+
+/*
+ * GtkCellArea
+ */
+
+// AttributeGetColumn is a wrapper around gtk_cell_area_attribute_get_column().
+func (v *CellArea) AttributeGetColumn(renderer ICellRenderer, attribute string) int {
+	cstr := C.CString(attribute)
+	defer C.free(unsafe.Pointer(cstr))
+	column := C.gtk_cell_area_attribute_get_column(v.native(), renderer.toCellRenderer(), (*C.gchar)(cstr))
+	return int(column)
+}
diff --git a/vendor/github.com/gotk3/gotk3/gtk/color_chooser.go b/vendor/github.com/gotk3/gotk3/gtk/color_chooser.go
index 5ea33c13797c..28e824ef0099 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/color_chooser.go
+++ b/vendor/github.com/gotk3/gotk3/gtk/color_chooser.go
@@ -55,6 +55,10 @@ func marshalColorChooser(p uintptr) (interface{}, error) {
 }
 
 func wrapColorChooser(obj *glib.Object) *ColorChooser {
+	if obj == nil {
+		return nil
+	}
+
 	return &ColorChooser{obj}
 }
 
@@ -131,6 +135,10 @@ func marshalColorChooserDialog(p uintptr) (interface{}, error) {
 }
 
 func wrapColorChooserDialog(obj *glib.Object) *ColorChooserDialog {
+	if obj == nil {
+		return nil
+	}
+
 	dialog := wrapDialog(obj)
 	cc := wrapColorChooser(obj)
 	return &ColorChooserDialog{*dialog, *cc}
@@ -138,9 +146,16 @@ func wrapColorChooserDialog(obj *glib.Object) *ColorChooserDialog {
 
 // ColorChooserDialogNew() is a wrapper around gtk_color_chooser_dialog_new().
 func ColorChooserDialogNew(title string, parent IWindow) (*ColorChooserDialog, error) {
+
 	cstr := C.CString(title)
 	defer C.free(unsafe.Pointer(cstr))
-	c := C.gtk_color_chooser_dialog_new((*C.gchar)(cstr), parent.toWindow())
+
+	var w *C.GtkWindow = nil
+	if parent != nil {
+		w = parent.toWindow()
+	}
+
+	c := C.gtk_color_chooser_dialog_new((*C.gchar)(cstr), w)
 	if c == nil {
 		return nil, nilPtrErr
 	}
diff --git a/vendor/github.com/gotk3/gotk3/gtk/combo_box.go b/vendor/github.com/gotk3/gotk3/gtk/combo_box.go
index 0f022d346158..a5200a0d91ef 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/combo_box.go
+++ b/vendor/github.com/gotk3/gotk3/gtk/combo_box.go
@@ -5,6 +5,7 @@ package gtk
 import "C"
 import (
 	"errors"
+	"fmt"
 	"unsafe"
 
 	"github.com/gotk3/gotk3/gdk"
@@ -33,6 +34,7 @@ type ComboBox struct {
 
 	// Interfaces
 	CellLayout
+	CellEditable
 }
 
 // native returns a pointer to the underlying GtkComboBox.
@@ -58,8 +60,13 @@ func marshalComboBox(p uintptr) (interface{}, error) {
 }
 
 func wrapComboBox(obj *glib.Object) *ComboBox {
+	if obj == nil {
+		return nil
+	}
+
 	cl := wrapCellLayout(obj)
-	return &ComboBox{Bin{Container{Widget{glib.InitiallyUnowned{obj}}}}, *cl}
+	ce := wrapCellEditable(obj)
+	return &ComboBox{Bin{Container{Widget{glib.InitiallyUnowned{obj}}}}, *cl, *ce}
 }
 
 // ComboBoxNew is a wrapper around gtk_combo_box_new().
@@ -191,13 +198,12 @@ func (v *ComboBox) SetActiveID(id string) bool {
 }
 
 // GetModel is a wrapper around gtk_combo_box_get_model().
-func (v *ComboBox) GetModel() (*TreeModel, error) {
+func (v *ComboBox) GetModel() (ITreeModel, error) {
 	c := C.gtk_combo_box_get_model(v.native())
 	if c == nil {
 		return nil, nilPtrErr
 	}
-	obj := glib.Take(unsafe.Pointer(c))
-	return wrapTreeModel(obj), nil
+	return castTreeModel(c)
 }
 
 // SetModel is a wrapper around gtk_combo_box_set_model().
@@ -268,8 +274,11 @@ func (v *ComboBox) GetEntry() (*Entry, error) {
 	if err != nil {
 		return nil, err
 	}
-	obj := glib.Take(unsafe.Pointer(widget.GObject))
-	return wrapEntry(obj), nil
+	entry, ok := widget.(*Entry)
+	if !ok {
+		return nil, fmt.Errorf("expected child to be of type *gtk.Entry, got %T", widget)
+	}
+	return entry, nil
 }
 
 /*
@@ -297,6 +306,10 @@ func marshalComboBoxText(p uintptr) (interface{}, error) {
 }
 
 func wrapComboBoxText(obj *glib.Object) *ComboBoxText {
+	if obj == nil {
+		return nil
+	}
+
 	return &ComboBoxText{*wrapComboBox(obj)}
 }
 
diff --git a/vendor/github.com/gotk3/gotk3/gtk/fixed.go b/vendor/github.com/gotk3/gotk3/gtk/fixed.go
index edf664842f68..ace0670b93a7 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/fixed.go
+++ b/vendor/github.com/gotk3/gotk3/gtk/fixed.go
@@ -44,6 +44,10 @@ func marshalFixed(p uintptr) (interface{}, error) {
 }
 
 func wrapFixed(obj *glib.Object) *Fixed {
+	if obj == nil {
+		return nil
+	}
+
 	return &Fixed{Container{Widget{glib.InitiallyUnowned{obj}}}}
 }
 
diff --git a/vendor/github.com/gotk3/gotk3/gtk/fixed.go.h b/vendor/github.com/gotk3/gotk3/gtk/fixed.go.h
index 6007f53b6d9e..76cee7eb37c6 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/fixed.go.h
+++ b/vendor/github.com/gotk3/gotk3/gtk/fixed.go.h
@@ -1,5 +1 @@
-static GtkFixed *
-toGtkFixed(void *p)
-{
-	return (GTK_FIXED(p));
-}
\ No newline at end of file
+static GtkFixed *toGtkFixed(void *p) { return (GTK_FIXED(p)); }
\ No newline at end of file
diff --git a/vendor/github.com/gotk3/gotk3/gtk/font_chooser.go b/vendor/github.com/gotk3/gotk3/gtk/font_chooser.go
index 753d624f2777..622e98687fa0 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/font_chooser.go
+++ b/vendor/github.com/gotk3/gotk3/gtk/font_chooser.go
@@ -55,6 +55,10 @@ func marshalFontChooser(p uintptr) (interface{}, error) {
 }
 
 func wrapFontChooser(obj *glib.Object) *FontChooser {
+	if obj == nil {
+		return nil
+	}
+
 	return &FontChooser{obj}
 }
 
@@ -120,6 +124,10 @@ func marshalFontButton(p uintptr) (interface{}, error) {
 }
 
 func wrapFontButton(obj *glib.Object) *FontButton {
+	if obj == nil {
+		return nil
+	}
+
 	button := wrapButton(obj)
 	fc := wrapFontChooser(obj)
 	return &FontButton{*button, *fc}
diff --git a/vendor/github.com/gotk3/gotk3/gtk/gdk.go b/vendor/github.com/gotk3/gotk3/gtk/gdk.go
index 2cf4d1348b01..8bf657903f73 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/gdk.go
+++ b/vendor/github.com/gotk3/gotk3/gtk/gdk.go
@@ -33,7 +33,7 @@ func nativeGdkGeometry(geom gdk.Geometry) *C.GdkGeometry {
 		base_width:  C.gint(geom.GetBaseWidth()),
 		base_height: C.gint(geom.GetBaseHeight()),
 		width_inc:   C.gint(geom.GetWidthInc()),
-		height_inc:  C.gint(geom.GetHeightInc()),		
+		height_inc:  C.gint(geom.GetHeightInc()),
 		min_aspect:  C.gdouble(geom.GetMinAspect()),
 		max_aspect:  C.gdouble(geom.GetMaxAspect()),
 		win_gravity: C.GdkGravity(geom.GetWinGravity()),
diff --git a/vendor/github.com/gotk3/gotk3/gtk/glarea.go b/vendor/github.com/gotk3/gotk3/gtk/glarea.go
index 3ff967944d9b..0851ff791588 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/glarea.go
+++ b/vendor/github.com/gotk3/gotk3/gtk/glarea.go
@@ -68,6 +68,10 @@ func marshalGLArea(p uintptr) (interface{}, error) {
 }
 
 func wrapGLArea(obj *glib.Object) *GLArea {
+	if obj == nil {
+		return nil
+	}
+
 	return &GLArea{Widget{glib.InitiallyUnowned{obj}}}
 }
 
@@ -108,7 +112,6 @@ func (v *GLArea) SetRequiredVersion(major, minor int) {
 }
 
 // TODO:
-// void gtk_gl_area_set_error (GtkGLArea *area, const GError *error);
 // gtk_gl_area_set_has_alpha().
 // gtk_gl_area_get_has_alpha().
 
@@ -167,7 +170,7 @@ func (v *GLArea) AttachBuffers() {
 	C.gtk_gl_area_attach_buffers(v.native())
 }
 
-// GError* gtk_gl_area_get_error (GtkGLArea *area);
+// GetError is a wrapper around gtk_gl_area_get_error().
 func (v *GLArea) GetError() error {
 	var err *C.GError = nil
 	err = C.gtk_gl_area_get_error(v.native())
@@ -177,3 +180,14 @@ func (v *GLArea) GetError() error {
 	}
 	return nil
 }
+
+// SetError is a wrapper around gtk_gl_area_set_error().
+func (v *GLArea) SetError(domain glib.Quark, code int, err error) {
+	cstr := (*C.gchar)(C.CString(err.Error()))
+	defer C.free(unsafe.Pointer(cstr))
+
+	gerr := C.g_error_new_literal(C.GQuark(domain), C.gint(code), cstr)
+	defer C.g_error_free(gerr)
+
+	C.gtk_gl_area_set_error(v.native(), gerr)
+}
\ No newline at end of file
diff --git a/vendor/github.com/gotk3/gotk3/gtk/glarea_since_3_22.go b/vendor/github.com/gotk3/gotk3/gtk/glarea_since_3_22.go
index bf4cb4c23e6a..4d196673517e 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/glarea_since_3_22.go
+++ b/vendor/github.com/gotk3/gotk3/gtk/glarea_since_3_22.go
@@ -15,4 +15,3 @@ func (v *GLArea) GetUseES() bool {
 func (v *GLArea) SetUseES(es bool) {
 	C.gtk_gl_area_set_use_es(v.native(), gbool(es))
 }
- 
\ No newline at end of file
diff --git a/vendor/github.com/gotk3/gotk3/gtk/glib.go b/vendor/github.com/gotk3/gotk3/gtk/glib.go
new file mode 100644
index 000000000000..6a7e0f548a92
--- /dev/null
+++ b/vendor/github.com/gotk3/gotk3/gtk/glib.go
@@ -0,0 +1,20 @@
+package gtk
+
+// #include <gtk/gtk.h>
+// #include "gtk.go.h"
+import "C"
+import (
+	"unsafe"
+
+	"github.com/gotk3/gotk3/glib"
+)
+
+func nativeGPermission(permission *glib.Permission) *C.GPermission {
+	// Note: would return C type prefixed with glib package.
+	// Go issue: here https://github.com/golang/go/issues/13467.
+	var perm *C.GPermission
+	if permission != nil {
+		perm = (*C.GPermission)(unsafe.Pointer(permission.Native()))
+	}
+	return perm
+}
diff --git a/vendor/github.com/gotk3/gotk3/gtk/gtk.go b/vendor/github.com/gotk3/gotk3/gtk/gtk.go
index c93bf6cfcff8..4153c76b8e00 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/gtk.go
+++ b/vendor/github.com/gotk3/gotk3/gtk/gtk.go
@@ -45,6 +45,7 @@
 package gtk
 
 // #cgo pkg-config: gdk-3.0 gio-2.0 glib-2.0 gobject-2.0 gtk+-3.0
+// #include <gio/gio.h>
 // #include <gtk/gtk.h>
 // #include "gtk.go.h"
 import "C"
@@ -59,6 +60,8 @@ import (
 	"github.com/gotk3/gotk3/cairo"
 	"github.com/gotk3/gotk3/gdk"
 	"github.com/gotk3/gotk3/glib"
+	"github.com/gotk3/gotk3/internal/callback"
+	"github.com/gotk3/gotk3/pango"
 )
 
 func init() {
@@ -73,6 +76,9 @@ func init() {
 		{glib.Type(C.gtk_assistant_page_type_get_type()), marshalAssistantPageType},
 		{glib.Type(C.gtk_buttons_type_get_type()), marshalButtonsType},
 		{glib.Type(C.gtk_calendar_display_options_get_type()), marshalCalendarDisplayOptions},
+		{glib.Type(C.gtk_cell_renderer_accel_mode_get_type()), marshalCellRendererAccelMode},
+		{glib.Type(C.gtk_cell_renderer_mode_get_type()), marshalCellRendererMode},
+		{glib.Type(C.gtk_cell_renderer_state_get_type()), marshalCellRendererState},
 		{glib.Type(C.gtk_corner_type_get_type()), marshalCornerType},
 		{glib.Type(C.gtk_dest_defaults_get_type()), marshalDestDefaults},
 		{glib.Type(C.gtk_dialog_flags_get_type()), marshalDialogFlags},
@@ -83,6 +89,7 @@ func init() {
 		{glib.Type(C.gtk_image_type_get_type()), marshalImageType},
 		{glib.Type(C.gtk_input_hints_get_type()), marshalInputHints},
 		{glib.Type(C.gtk_input_purpose_get_type()), marshalInputPurpose},
+		{glib.Type(C.gtk_direction_type_get_type()), marshalDirectionType},
 		{glib.Type(C.gtk_justification_get_type()), marshalJustification},
 		{glib.Type(C.gtk_license_get_type()), marshalLicense},
 		{glib.Type(C.gtk_message_type_get_type()), marshalMessageType},
@@ -94,8 +101,13 @@ func init() {
 		{glib.Type(C.gtk_relief_style_get_type()), marshalReliefStyle},
 		{glib.Type(C.gtk_response_type_get_type()), marshalResponseType},
 		{glib.Type(C.gtk_selection_mode_get_type()), marshalSelectionMode},
+		{glib.Type(C.gtk_scroll_type_get_type()), marshalScrollType},
+		{glib.Type(C.gtk_scroll_step_get_type()), marshalScrollStep},
+		{glib.Type(C.gtk_sensitivity_type_get_type()), marshalSensitivityType},
 		{glib.Type(C.gtk_shadow_type_get_type()), marshalShadowType},
 		{glib.Type(C.gtk_sort_type_get_type()), marshalSortType},
+		{glib.Type(C.gtk_spin_button_update_policy_get_type()), marshalSpinButtonUpdatePolicy},
+		{glib.Type(C.gtk_spin_type_get_type()), marshalSpinType},
 		{glib.Type(C.gtk_state_flags_get_type()), marshalStateFlags},
 		{glib.Type(C.gtk_target_flags_get_type()), marshalTargetFlags},
 		{glib.Type(C.gtk_text_direction_get_type()), marshalTextDirection},
@@ -120,12 +132,16 @@ func init() {
 		{glib.Type(C.gtk_box_get_type()), marshalBox},
 		{glib.Type(C.gtk_calendar_get_type()), marshalCalendar},
 		{glib.Type(C.gtk_cell_layout_get_type()), marshalCellLayout},
+		{glib.Type(C.gtk_cell_editable_get_type()), marshalCellEditable},
 		{glib.Type(C.gtk_cell_renderer_get_type()), marshalCellRenderer},
 		{glib.Type(C.gtk_cell_renderer_spinner_get_type()), marshalCellRendererSpinner},
 		{glib.Type(C.gtk_cell_renderer_pixbuf_get_type()), marshalCellRendererPixbuf},
 		{glib.Type(C.gtk_cell_renderer_text_get_type()), marshalCellRendererText},
 		{glib.Type(C.gtk_cell_renderer_progress_get_type()), marshalCellRendererProgress},
 		{glib.Type(C.gtk_cell_renderer_toggle_get_type()), marshalCellRendererToggle},
+		{glib.Type(C.gtk_cell_renderer_combo_get_type()), marshalCellRendererCombo},
+		{glib.Type(C.gtk_cell_renderer_accel_get_type()), marshalCellRendererAccel},
+		{glib.Type(C.gtk_cell_renderer_spin_get_type()), marshalCellRendererSpin},
 		{glib.Type(C.gtk_check_button_get_type()), marshalCheckButton},
 		{glib.Type(C.gtk_check_menu_item_get_type()), marshalCheckMenuItem},
 		{glib.Type(C.gtk_clipboard_get_type()), marshalClipboard},
@@ -149,6 +165,7 @@ func init() {
 		{glib.Type(C.gtk_image_get_type()), marshalImage},
 		{glib.Type(C.gtk_label_get_type()), marshalLabel},
 		{glib.Type(C.gtk_link_button_get_type()), marshalLinkButton},
+		{glib.Type(C.gtk_lock_button_get_type()), marshalLockButton},
 		{glib.Type(C.gtk_layout_get_type()), marshalLayout},
 		{glib.Type(C.gtk_tree_model_sort_get_type()), marshalTreeModelSort},
 		{glib.Type(C.gtk_list_store_get_type()), marshalListStore},
@@ -172,7 +189,7 @@ func init() {
 		{glib.Type(C.gtk_scrollbar_get_type()), marshalScrollbar},
 		{glib.Type(C.gtk_scrolled_window_get_type()), marshalScrolledWindow},
 		{glib.Type(C.gtk_search_entry_get_type()), marshalSearchEntry},
-		//{glib.Type(C.gtk_selection_data_get_type()), marshalSelectionData},
+		{glib.Type(C.gtk_selection_data_get_type()), marshalSelectionData},
 		{glib.Type(C.gtk_separator_get_type()), marshalSeparator},
 		{glib.Type(C.gtk_separator_menu_item_get_type()), marshalSeparatorMenuItem},
 		{glib.Type(C.gtk_separator_tool_item_get_type()), marshalSeparatorToolItem},
@@ -196,6 +213,9 @@ func init() {
 		{glib.Type(C.gtk_tree_store_get_type()), marshalTreeStore},
 		{glib.Type(C.gtk_tree_view_get_type()), marshalTreeView},
 		{glib.Type(C.gtk_tree_view_column_get_type()), marshalTreeViewColumn},
+		{glib.Type(C.gtk_cell_area_get_type()), marshalCellArea},
+		{glib.Type(C.gtk_cell_area_context_get_type()), marshalCellAreaContext},
+		{glib.Type(C.gtk_cell_area_box_get_type()), marshalCellAreaBox},
 		{glib.Type(C.gtk_volume_button_get_type()), marshalVolumeButton},
 		{glib.Type(C.gtk_widget_get_type()), marshalWidget},
 		{glib.Type(C.gtk_window_get_type()), marshalWindow},
@@ -211,6 +231,15 @@ func init() {
 	glib.RegisterGValueMarshalers(tm)
 }
 
+/*
+ * Callback helpers
+ */
+
+//export gotk3_callbackDelete
+func gotk3_callbackDelete(callbackID C.gpointer) {
+	callback.Delete(uintptr(callbackID))
+}
+
 /*
  * Type conversions
  */
@@ -253,19 +282,61 @@ func free(str ...interface{}) {
 	}
 }
 
+// nextguchar increments guchar by 1. Hopefully, this could be inlined by the Go
+// compiler.
+func nextguchar(guchar *C.guchar) *C.guchar {
+	return (*C.guchar)(unsafe.Pointer(uintptr(unsafe.Pointer(guchar)) + 1))
+}
+
+// ucharString returns a copy of the given guchar pointer. The pointer guchar
+// array is assumed to have valid UTF-8.
+func ucharString(guchar *C.guchar) string {
+	// Seek and find the string length.
+	var strlen int
+	for ptr := guchar; *ptr != 0; ptr = nextguchar(ptr) {
+		strlen++
+	}
+
+	// Array of unsigned char means GoString is unavailable, so maybe this is
+	// fine.
+	var data []byte
+	sliceHeader := (*reflect.SliceHeader)(unsafe.Pointer(&data))
+	sliceHeader.Len = strlen
+	sliceHeader.Cap = strlen
+	sliceHeader.Data = uintptr(unsafe.Pointer(guchar))
+
+	// Return a copy of the string.
+	return string(data)
+}
+
+// nextgcharptr increments gcharptr by 1. Hopefully, this could be inlined by
+// the Go compiler.
+func nextgcharptr(gcharptr **C.gchar) **C.gchar {
+	return (**C.gchar)(unsafe.Pointer(uintptr(unsafe.Pointer(gcharptr)) + 1))
+}
+
 func goString(cstr *C.gchar) string {
 	return C.GoString((*C.char)(cstr))
 }
 
 // same implementation as package glib
 func toGoStringArray(c **C.gchar) []string {
-	var strs []string
-	originalc := c
-	defer C.g_strfreev(originalc)
+	if c == nil {
+		return nil
+	}
+
+	// free when done
+	defer C.g_strfreev(c)
+
+	strsLen := 0
+	for scan := c; *scan != nil; scan = nextgcharptr(scan) {
+		strsLen++
+	}
 
-	for *c != nil {
-		strs = append(strs, C.GoString((*C.char)(*c)))
-		c = C.next_gcharptr(c)
+	strs := make([]string, strsLen)
+	for i := range strs {
+		strs[i] = C.GoString((*C.char)(*c))
+		c = nextgcharptr(c)
 	}
 
 	return strs
@@ -376,8 +447,19 @@ func marshalButtonsType(p uintptr) (interface{}, error) {
 	return ButtonsType(c), nil
 }
 
-// TODO:
-// GtkSensitivityType
+// SensitivityType is a representation of GTK's GtkSensitivityType
+type SensitivityType int
+
+const (
+	SENSITIVITY_AUTO SensitivityType = C.GTK_SENSITIVITY_AUTO
+	SENSITIVITY_ON   SensitivityType = C.GTK_SENSITIVITY_ON
+	SENSITIVITY_OFF  SensitivityType = C.GTK_SENSITIVITY_OFF
+)
+
+func marshalSensitivityType(p uintptr) (interface{}, error) {
+	c := C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))
+	return SensitivityType(c), nil
+}
 
 // CalendarDisplayOptions is a representation of GTK's GtkCalendarDisplayOptions
 type CalendarDisplayOptions int
@@ -456,10 +538,10 @@ type IconLookupFlags int
 
 const (
 	ICON_LOOKUP_NO_SVG           IconLookupFlags = C.GTK_ICON_LOOKUP_NO_SVG
-	ICON_LOOKUP_FORCE_SVG                        = C.GTK_ICON_LOOKUP_FORCE_SVG
-	ICON_LOOKUP_USE_BUILTIN                      = C.GTK_ICON_LOOKUP_USE_BUILTIN
-	ICON_LOOKUP_GENERIC_FALLBACK                 = C.GTK_ICON_LOOKUP_GENERIC_FALLBACK
-	ICON_LOOKUP_FORCE_SIZE                       = C.GTK_ICON_LOOKUP_FORCE_SIZE
+	ICON_LOOKUP_FORCE_SVG        IconLookupFlags = C.GTK_ICON_LOOKUP_FORCE_SVG
+	ICON_LOOKUP_USE_BUILTIN      IconLookupFlags = C.GTK_ICON_LOOKUP_USE_BUILTIN
+	ICON_LOOKUP_GENERIC_FALLBACK IconLookupFlags = C.GTK_ICON_LOOKUP_GENERIC_FALLBACK
+	ICON_LOOKUP_FORCE_SIZE       IconLookupFlags = C.GTK_ICON_LOOKUP_FORCE_SIZE
 )
 
 func marshalIconLookupFlags(p uintptr) (interface{}, error) {
@@ -554,9 +636,25 @@ func marshalInputPurpose(p uintptr) (interface{}, error) {
 // TODO:
 // GtkBaselinePosition
 // GtkDeleteType
-// GtkDirectionType
 
-// Justify is a representation of GTK's GtkJustification.
+// DirectionType is a representation of GTK's GtkDirectionType.
+type DirectionType int
+
+const (
+	DIR_TAB_FORWARD  DirectionType = C.GTK_DIR_TAB_FORWARD
+	DIR_TAB_BACKWARD DirectionType = C.GTK_DIR_TAB_BACKWARD
+	DIR_UP           DirectionType = C.GTK_DIR_UP
+	DIR_DOWN         DirectionType = C.GTK_DIR_DOWN
+	DIR_LEFT         DirectionType = C.GTK_DIR_LEFT
+	DIR_RIGHT        DirectionType = C.GTK_DIR_RIGHT
+)
+
+func marshalDirectionType(p uintptr) (interface{}, error) {
+	c := C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))
+	return DirectionType(c), nil
+}
+
+// Justification is a representation of GTK's GtkJustification.
 type Justification int
 
 const (
@@ -664,9 +762,35 @@ func marshalPolicyType(p uintptr) (interface{}, error) {
 	return PolicyType(c), nil
 }
 
-// TODO:
-// GtkSpinButtonUpdatePolicy
-// GtkSpinType
+// SpinButtonUpdatePolicy is a representation of GTK's GtkSpinButtonUpdatePolicy.
+type SpinButtonUpdatePolicy int
+
+const (
+	UPDATE_ALWAYS   SpinButtonUpdatePolicy = C.GTK_UPDATE_ALWAYS
+	UPDATE_IF_VALID SpinButtonUpdatePolicy = C.GTK_UPDATE_IF_VALID
+)
+
+func marshalSpinButtonUpdatePolicy(p uintptr) (interface{}, error) {
+	c := C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))
+	return SpinButtonUpdatePolicy(c), nil
+}
+
+// SpinType is a representation of GTK's GtkSpinType.
+type SpinType int
+
+const (
+	SPIN_STEP_FORWARD  SpinType = C.GTK_SPIN_STEP_FORWARD
+	SPIN_STEP_BACKWARD SpinType = C.GTK_SPIN_STEP_BACKWARD
+	SPIN_PAGE_BACKWARD SpinType = C.GTK_SPIN_PAGE_BACKWARD
+	SPIN_HOME          SpinType = C.GTK_SPIN_HOME
+	SPIN_END           SpinType = C.GTK_SPIN_END
+	SPIN_USER_DEFINED  SpinType = C.GTK_SPIN_USER_DEFINED
+)
+
+func marshalSpinType(p uintptr) (interface{}, error) {
+	c := C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))
+	return SpinType(c), nil
+}
 
 // TreeViewGridLine is a representation of GTK's GtkTreeViewGridLines.
 type TreeViewGridLines int
@@ -678,6 +802,53 @@ const (
 	TREE_VIEW_GRID_LINES_BOTH       TreeViewGridLines = C.GTK_TREE_VIEW_GRID_LINES_BOTH
 )
 
+// CellRendererAccelMode is a representation of GtkCellRendererAccelMode
+type CellRendererAccelMode int
+
+const (
+	// CELL_RENDERER_ACCEL_MODE_GTK is documented as GTK+ accelerators mode
+	CELL_RENDERER_ACCEL_MODE_GTK CellRendererAccelMode = C.GTK_CELL_RENDERER_ACCEL_MODE_GTK
+	// CELL_RENDERER_ACCEL_MODE_OTHER is documented as Other accelerator mode
+	CELL_RENDERER_ACCEL_MODE_OTHER CellRendererAccelMode = C.GTK_CELL_RENDERER_ACCEL_MODE_OTHER
+)
+
+func marshalCellRendererAccelMode(p uintptr) (interface{}, error) {
+	c := C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))
+	return CellRendererAccelMode(c), nil
+}
+
+// CellRendererState is a representation of GTK's GtkCellRendererState
+type CellRendererState int
+
+const (
+	CELL_RENDERER_SELECTED    CellRendererState = C.GTK_CELL_RENDERER_SELECTED
+	CELL_RENDERER_PRELIT      CellRendererState = C.GTK_CELL_RENDERER_PRELIT
+	CELL_RENDERER_INSENSITIVE CellRendererState = C.GTK_CELL_RENDERER_INSENSITIVE
+	CELL_RENDERER_SORTED      CellRendererState = C.GTK_CELL_RENDERER_SORTED
+	CELL_RENDERER_FOCUSED     CellRendererState = C.GTK_CELL_RENDERER_FOCUSED
+	CELL_RENDERER_EXPANDABLE  CellRendererState = C.GTK_CELL_RENDERER_EXPANDABLE // since 3.4
+	CELL_RENDERER_EXPANDED    CellRendererState = C.GTK_CELL_RENDERER_EXPANDED   // since 3.4
+)
+
+func marshalCellRendererState(p uintptr) (interface{}, error) {
+	c := C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))
+	return CellRendererState(c), nil
+}
+
+// CellRendererMode is a representation of GTK's GtkCellRendererMode
+type CellRendererMode int
+
+const (
+	CELL_RENDERER_MODE_INERT       CellRendererMode = C.GTK_CELL_RENDERER_MODE_INERT
+	CELL_RENDERER_MODE_ACTIVATABLE CellRendererMode = C.GTK_CELL_RENDERER_MODE_ACTIVATABLE
+	CELL_RENDERER_MODE_EDITABLE    CellRendererMode = C.GTK_CELL_RENDERER_MODE_EDITABLE
+)
+
+func marshalCellRendererMode(p uintptr) (interface{}, error) {
+	c := C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))
+	return CellRendererMode(c), nil
+}
+
 // PositionType is a representation of GTK's GtkPositionType.
 type PositionType int
 
@@ -729,9 +900,49 @@ func marshalResponseType(p uintptr) (interface{}, error) {
 	return ResponseType(c), nil
 }
 
-// TODO:
-// GtkScrollStep
-// GtkScrollType
+// ScrollType is a representation of GTK's GtkScrollType.
+type ScrollType int
+
+const (
+	SCROLL_NONE          ScrollType = C.GTK_SCROLL_NONE
+	SCROLL_JUMP          ScrollType = C.GTK_SCROLL_JUMP
+	SCROLL_STEP_BACKWARD ScrollType = C.GTK_SCROLL_STEP_BACKWARD
+	SCROLL_STEP_FORWARD  ScrollType = C.GTK_SCROLL_STEP_FORWARD
+	SCROLL_PAGE_BACKWARD ScrollType = C.GTK_SCROLL_PAGE_BACKWARD
+	SCROLL_PAGE_FORWARD  ScrollType = C.GTK_SCROLL_PAGE_FORWARD
+	SCROLL_STEP_UP       ScrollType = C.GTK_SCROLL_STEP_UP
+	SCROLL_STEP_DOWN     ScrollType = C.GTK_SCROLL_STEP_DOWN
+	SCROLL_PAGE_UP       ScrollType = C.GTK_SCROLL_PAGE_UP
+	SCROLL_PAGE_DOWN     ScrollType = C.GTK_SCROLL_PAGE_DOWN
+	SCROLL_STEP_LEFT     ScrollType = C.GTK_SCROLL_STEP_LEFT
+	SCROLL_STEP_RIGHT    ScrollType = C.GTK_SCROLL_STEP_RIGHT
+	SCROLL_PAGE_LEFT     ScrollType = C.GTK_SCROLL_PAGE_LEFT
+	SCROLL_PAGE_RIGHT    ScrollType = C.GTK_SCROLL_PAGE_RIGHT
+	SCROLL_START         ScrollType = C.GTK_SCROLL_START
+	SCROLL_END           ScrollType = C.GTK_SCROLL_END
+)
+
+func marshalScrollType(p uintptr) (interface{}, error) {
+	c := C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))
+	return ScrollType(c), nil
+}
+
+// ScrollStep is a representation of GTK's GtkScrollStep.
+type ScrollStep int
+
+const (
+	SCROLL_STEPS            ScrollStep = C.GTK_SCROLL_STEPS
+	SCROLL_PAGES            ScrollStep = C.GTK_SCROLL_PAGES
+	SCROLL_ENDS             ScrollStep = C.GTK_SCROLL_ENDS
+	SCROLL_HORIZONTAL_STEPS ScrollStep = C.GTK_SCROLL_HORIZONTAL_STEPS
+	SCROLL_HORIZONTAL_PAGES ScrollStep = C.GTK_SCROLL_HORIZONTAL_PAGES
+	SCROLL_HORIZONTAL_ENDS  ScrollStep = C.GTK_SCROLL_HORIZONTAL_ENDS
+)
+
+func marshalScrollStep(p uintptr) (interface{}, error) {
+	c := C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))
+	return ScrollStep(c), nil
+}
 
 // SelectionMode is a representation of GTK's GtkSelectionMode.
 type SelectionMode int
@@ -1076,6 +1287,10 @@ func marshalAdjustment(p uintptr) (interface{}, error) {
 }
 
 func wrapAdjustment(obj *glib.Object) *Adjustment {
+	if obj == nil {
+		return nil
+	}
+
 	return &Adjustment{glib.InitiallyUnowned{obj}}
 }
 
@@ -1204,6 +1419,10 @@ func marshalAssistant(p uintptr) (interface{}, error) {
 }
 
 func wrapAssistant(obj *glib.Object) *Assistant {
+	if obj == nil {
+		return nil
+	}
+
 	return &Assistant{Window{Bin{Container{Widget{glib.InitiallyUnowned{obj}}}}}}
 }
 
@@ -1235,14 +1454,12 @@ func (v *Assistant) GetNPages() int {
 }
 
 // GetNthPage is a wrapper around gtk_assistant_get_nth_page().
-func (v *Assistant) GetNthPage(pageNum int) (*Widget, error) {
+func (v *Assistant) GetNthPage(pageNum int) (IWidget, error) {
 	c := C.gtk_assistant_get_nth_page(v.native(), C.gint(pageNum))
 	if c == nil {
 		return nil, fmt.Errorf("page %d is out of bounds", pageNum)
 	}
-
-	obj := glib.Take(unsafe.Pointer(c))
-	return wrapWidget(obj), nil
+	return castWidget(c)
 }
 
 // PrependPage is a wrapper around gtk_assistant_prepend_page().
@@ -1363,17 +1580,20 @@ func marshalBin(p uintptr) (interface{}, error) {
 }
 
 func wrapBin(obj *glib.Object) *Bin {
+	if obj == nil {
+		return nil
+	}
+
 	return &Bin{Container{Widget{glib.InitiallyUnowned{obj}}}}
 }
 
 // GetChild is a wrapper around gtk_bin_get_child().
-func (v *Bin) GetChild() (*Widget, error) {
+func (v *Bin) GetChild() (IWidget, error) {
 	c := C.gtk_bin_get_child(v.native())
 	if c == nil {
-		return nil, nilPtrErr
+		return nil, nil
 	}
-	obj := glib.Take(unsafe.Pointer(c))
-	return wrapWidget(obj), nil
+	return castWidget(c)
 }
 
 /*
@@ -1410,34 +1630,6 @@ func BuilderNew() (*Builder, error) {
 	return &Builder{obj}, nil
 }
 
-// BuilderNewFromFile is a wrapper around gtk_builder_new_from_file().
-func BuilderNewFromFile(filePath string) (*Builder, error) {
-	cstr := C.CString(filePath)
-	defer C.free(unsafe.Pointer(cstr))
-
-	c := C.gtk_builder_new_from_file((*C.gchar)(cstr))
-	if c == nil {
-		return nil, nilPtrErr
-	}
-
-	obj := glib.Take(unsafe.Pointer(c))
-	return &Builder{obj}, nil
-}
-
-// BuilderNewFromResource is a wrapper around gtk_builder_new_from_resource().
-func BuilderNewFromResource(resourcePath string) (*Builder, error) {
-	cstr := C.CString(resourcePath)
-	defer C.free(unsafe.Pointer(cstr))
-
-	c := C.gtk_builder_new_from_resource((*C.gchar)(cstr))
-	if c == nil {
-		return nil, nilPtrErr
-	}
-
-	obj := glib.Take(unsafe.Pointer(c))
-	return &Builder{obj}, nil
-}
-
 // AddFromFile is a wrapper around gtk_builder_add_from_file().
 func (b *Builder) AddFromFile(filename string) error {
 	cstr := C.CString(filename)
@@ -1570,6 +1762,10 @@ func marshalButton(p uintptr) (interface{}, error) {
 }
 
 func wrapButton(obj *glib.Object) *Button {
+	if obj == nil {
+		return nil
+	}
+
 	actionable := &Actionable{obj}
 	return &Button{Bin{Container{Widget{glib.InitiallyUnowned{obj}}}}, actionable}
 }
@@ -1657,13 +1853,12 @@ func (v *Button) SetImage(image IWidget) {
 }
 
 // GetImage() is a wrapper around gtk_button_get_image().
-func (v *Button) GetImage() (*Widget, error) {
+func (v *Button) GetImage() (IWidget, error) {
 	c := C.gtk_button_get_image(v.native())
 	if c == nil {
-		return nil, nilPtrErr
+		return nil, nil
 	}
-	obj := glib.Take(unsafe.Pointer(c))
-	return wrapWidget(obj), nil
+	return castWidget(c)
 }
 
 // SetImagePosition() is a wrapper around gtk_button_set_image_position().
@@ -1721,6 +1916,10 @@ func (v *ColorButton) native() *C.GtkColorButton {
 }
 
 func wrapColorButton(obj *glib.Object) *ColorButton {
+	if obj == nil {
+		return nil
+	}
+
 	cc := wrapColorChooser(obj)
 	actionable := wrapActionable(obj)
 	return &ColorButton{Button{Bin{Container{Widget{
@@ -1784,6 +1983,10 @@ func marshalBox(p uintptr) (interface{}, error) {
 }
 
 func wrapBox(obj *glib.Object) *Box {
+	if obj == nil {
+		return nil
+	}
+
 	return &Box{Container{Widget{glib.InitiallyUnowned{obj}}}}
 }
 
@@ -1895,6 +2098,10 @@ func marshalCalendar(p uintptr) (interface{}, error) {
 }
 
 func wrapCalendar(obj *glib.Object) *Calendar {
+	if obj == nil {
+		return nil
+	}
+
 	return &Calendar{Widget{glib.InitiallyUnowned{obj}}}
 }
 
@@ -2019,6 +2226,10 @@ func marshalCellLayout(p uintptr) (interface{}, error) {
 }
 
 func wrapCellLayout(obj *glib.Object) *CellLayout {
+	if obj == nil {
+		return nil
+	}
+
 	return &CellLayout{obj}
 }
 
@@ -2043,6 +2254,11 @@ func (v *CellLayout) AddAttribute(cell ICellRenderer, attribute string, column i
 		(*C.gchar)(cstr), C.gint(column))
 }
 
+// ClearAttributes is a wrapper around gtk_cell_layout_clear_attributes()
+func (v *CellLayout) ClearAttributes(cell ICellRenderer) {
+	C.gtk_cell_layout_clear_attributes(v.native(), cell.toCellRenderer())
+}
+
 /*
  * GtkCellView
  */
@@ -2068,11 +2284,77 @@ func (v *CellLayout) AddAttribute(cell ICellRenderer, attribute string, column i
  * GtkCellEditable
  */
 
-// TODO:
-// GtkCellEditableIface
-// gtk_cell_editable_start_editing().
-// gtk_cell_editable_editing_done().
-// gtk_cell_editable_remove_widget().
+// CellEditable is a representation of GTK's GtkCellEditable GInterface.
+type CellEditable struct {
+	glib.InitiallyUnowned
+	// Widget
+}
+
+// ICellEditable is an interface type implemented by all structs
+// embedding an CellEditable. It is meant to be used as an argument type
+// for wrapper functions that wrap around a C GTK function taking a
+// GtkCellEditable.
+type ICellEditable interface {
+	toCellEditable() *C.GtkCellEditable
+	ToEntry() *Entry
+}
+
+// native() returns a pointer to the underlying GObject as a GtkCellEditable.
+func (v *CellEditable) native() *C.GtkCellEditable {
+	if v == nil || v.GObject == nil {
+		return nil
+	}
+	p := unsafe.Pointer(v.GObject)
+	return C.toGtkCellEditable(p)
+}
+
+func marshalCellEditable(p uintptr) (interface{}, error) {
+	c := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
+	obj := glib.Take(unsafe.Pointer(c))
+	return wrapCellEditable(obj), nil
+}
+
+func wrapCellEditable(obj *glib.Object) *CellEditable {
+	if obj == nil {
+		return nil
+	}
+
+	// return &CellEditable{Widget{glib.InitiallyUnowned{obj}}}
+	return &CellEditable{glib.InitiallyUnowned{obj}}
+}
+
+func (v *CellEditable) toCellEditable() *C.GtkCellEditable {
+	if v == nil {
+		return nil
+	}
+	return v.native()
+}
+
+// ToEntry is a helper tool, e.g: it returns *gtk.CellEditable as a *gtk.Entry
+// that embedding this CellEditable instance, then it can be used with
+// CellRendererText to adding EntryCompletion tools or intercepting EntryBuffer,
+// (to bypass "canceled" signal for example) then record entry, and much more.
+func (v *CellEditable) ToEntry() *Entry {
+	return &Entry{Widget{glib.InitiallyUnowned{v.Object}},
+		Editable{v.Object},
+		*v}
+}
+
+// StartEditing is a wrapper around gtk_cell_editable_start_editing().
+func (v *CellEditable) StartEditing(event *gdk.Event) {
+	C.gtk_cell_editable_start_editing(v.native(),
+		(*C.GdkEvent)(unsafe.Pointer(event.Native())))
+}
+
+// EditingDone is a wrapper around gtk_cell_editable_editing_done().
+func (v *CellEditable) EditingDone() {
+	C.gtk_cell_editable_editing_done(v.native())
+}
+
+// RemoveWidget is a wrapper around gtk_cell_editable_remove_widget().
+func (v *CellEditable) RemoveWidget() {
+	C.gtk_cell_editable_remove_widget(v.native())
+}
 
 /*
  * GtkCellRenderer
@@ -2114,9 +2396,112 @@ func marshalCellRenderer(p uintptr) (interface{}, error) {
 }
 
 func wrapCellRenderer(obj *glib.Object) *CellRenderer {
+	if obj == nil {
+		return nil
+	}
+
 	return &CellRenderer{glib.InitiallyUnowned{obj}}
 }
 
+// Activate is a wrapper around gtk_cell_renderer_activate().
+func (v *CellRenderer) Activate(event *gdk.Event, widget IWidget, path string,
+	backgroundArea, cellArea *gdk.Rectangle, flags CellRendererState) bool {
+
+	cstr := C.CString(path)
+	defer C.free(unsafe.Pointer(cstr))
+	e := (*C.GdkEvent)(unsafe.Pointer(event.Native()))
+
+	c := C.gtk_cell_renderer_activate(v.native(), e, widget.toWidget(),
+		(*C.gchar)(cstr), nativeGdkRectangle(*backgroundArea),
+		nativeGdkRectangle(*cellArea), C.GtkCellRendererState(flags))
+
+	return gobool(c)
+}
+
+// StartEditing is a wrapper around gtk_cell_renderer_start_editing().
+func (v *CellRenderer) StartEditing(event *gdk.Event, widget IWidget, path string,
+	backgroundArea, cellArea *gdk.Rectangle, flags CellRendererState) (ICellEditable, error) {
+
+	cstr := C.CString(path)
+	defer C.free(unsafe.Pointer(cstr))
+	e := (*C.GdkEvent)(unsafe.Pointer(event.Native()))
+
+	c := C.gtk_cell_renderer_start_editing(v.native(), e, widget.toWidget(),
+		(*C.gchar)(cstr), nativeGdkRectangle(*backgroundArea),
+		nativeGdkRectangle(*cellArea), C.GtkCellRendererState(flags))
+
+	return castCellEditable(c)
+}
+
+// StopEditing is a wrapper around gtk_cell_renderer_stop_editing().
+func (v *CellRenderer) StopEditing(canceled bool) {
+	C.gtk_cell_renderer_stop_editing(v.native(), gbool(canceled))
+}
+
+// GetVisible is a wrapper around gtk_cell_renderer_get_visible().
+func (v *CellRenderer) GetVisible() bool {
+	return gobool(C.gtk_cell_renderer_get_visible(v.native()))
+}
+
+// SetVisible is a wrapper around gtk_cell_renderer_set_visible().
+func (v *CellRenderer) SetVisible(visible bool) {
+	C.gtk_cell_renderer_set_visible(v.native(), gbool(visible))
+}
+
+// GetSensitive is a wrapper around gtk_cell_renderer_get_sensitive().
+func (v *CellRenderer) GetSensitive() bool {
+	return gobool(C.gtk_cell_renderer_get_sensitive(v.native()))
+}
+
+// SetSentitive is a wrapper around gtk_cell_renderer_set_sensitive().
+func (v *CellRenderer) SetSentitive(sensitive bool) {
+	C.gtk_cell_renderer_set_sensitive(v.native(), gbool(sensitive))
+}
+
+// IsActivatable is a wrapper around gtk_cell_renderer_is_activatable().
+func (v *CellRenderer) IsActivatable() bool {
+	return gobool(C.gtk_cell_renderer_is_activatable(v.native()))
+}
+
+// GetState is a wrapper around gtk_cell_renderer_get_state().
+func (v *CellRenderer) GetState(widget IWidget,
+	flags CellRendererState) StateFlags {
+
+	return StateFlags(C.gtk_cell_renderer_get_state(v.native(),
+		widget.toWidget(),
+		C.GtkCellRendererState(flags)))
+}
+
+// SetAlignment is a wrapper around gtk_tree_view_column_set_alignment().
+func (v *CellRenderer) SetAlignment(xalign float64, yalign float64) {
+	C.gtk_cell_renderer_set_alignment(v.native(), C.gfloat(xalign), C.gfloat(yalign))
+}
+
+// TODO: gtk_cell_renderer_get_aligned_area
+// TODO: gtk_cell_renderer_get_size
+// TODO: gtk_cell_renderer_render
+// TODO: gtk_cell_renderer_activate
+// TODO: gtk_cell_renderer_start_editing
+// TODO: gtk_cell_renderer_stop_editing
+// TODO: gtk_cell_renderer_get_fixed_size
+// TODO: gtk_cell_renderer_set_fixed_size
+// TODO: gtk_cell_renderer_get_visible
+// TODO: gtk_cell_renderer_set_visible
+// TODO: gtk_cell_renderer_get_sensitive
+// TODO: gtk_cell_renderer_set_sensitive
+// TODO: gtk_cell_renderer_get_alignment
+// TODO: gtk_cell_renderer_set_alignment
+// TODO: gtk_cell_renderer_get_padding
+// TODO: gtk_cell_renderer_set_padding
+// TODO: gtk_cell_renderer_get_state
+// TODO: gtk_cell_renderer_is_activatable
+// TODO: gtk_cell_renderer_get_preferred_height
+// TODO: gtk_cell_renderer_get_preferred_height_for_width
+// TODO: gtk_cell_renderer_get_preferred_size
+// TODO: gtk_cell_renderer_get_preferred_width
+// TODO: gtk_cell_renderer_get_preferred_width_for_height
+// TODO: gtk_cell_renderer_get_request_mode
+
 /*
  * GtkCellRendererSpinner
  */
@@ -2142,6 +2527,10 @@ func marshalCellRendererSpinner(p uintptr) (interface{}, error) {
 }
 
 func wrapCellRendererSpinner(obj *glib.Object) *CellRendererSpinner {
+	if obj == nil {
+		return nil
+	}
+
 	return &CellRendererSpinner{CellRenderer{glib.InitiallyUnowned{obj}}}
 }
 
@@ -2180,6 +2569,10 @@ func marshalCellRendererPixbuf(p uintptr) (interface{}, error) {
 }
 
 func wrapCellRendererPixbuf(obj *glib.Object) *CellRendererPixbuf {
+	if obj == nil {
+		return nil
+	}
+
 	return &CellRendererPixbuf{CellRenderer{glib.InitiallyUnowned{obj}}}
 }
 
@@ -2218,6 +2611,10 @@ func marshalCellRendererProgress(p uintptr) (interface{}, error) {
 }
 
 func wrapCellRendererProgress(obj *glib.Object) *CellRendererProgress {
+	if obj == nil {
+		return nil
+	}
+
 	return &CellRendererProgress{CellRenderer{glib.InitiallyUnowned{obj}}}
 }
 
@@ -2256,6 +2653,10 @@ func marshalCellRendererText(p uintptr) (interface{}, error) {
 }
 
 func wrapCellRendererText(obj *glib.Object) *CellRendererText {
+	if obj == nil {
+		return nil
+	}
+
 	return &CellRendererText{CellRenderer{glib.InitiallyUnowned{obj}}}
 }
 
@@ -2269,6 +2670,11 @@ func CellRendererTextNew() (*CellRendererText, error) {
 	return wrapCellRendererText(obj), nil
 }
 
+// SetFixedHeightFromFont is a wrapper around gtk_cell_renderer_text_set_fixed_height_from_font
+func (v *CellRendererText) SetFixedHeightFromFont(numberOfRows int) {
+	C.gtk_cell_renderer_text_set_fixed_height_from_font(v.native(), C.gint(numberOfRows))
+}
+
 /*
  * GtkCellRendererToggle
  */
@@ -2301,6 +2707,10 @@ func marshalCellRendererToggle(p uintptr) (interface{}, error) {
 }
 
 func wrapCellRendererToggle(obj *glib.Object) *CellRendererToggle {
+	if obj == nil {
+		return nil
+	}
+
 	return &CellRendererToggle{CellRenderer{glib.InitiallyUnowned{obj}}}
 }
 
@@ -2349,56 +2759,186 @@ func (v *CellRendererToggle) GetActivatable() bool {
 }
 
 /*
- * GtkCheckButton
+ * GtkCellRendererAccel
  */
 
-// CheckButton is a wrapper around GTK's GtkCheckButton.
-type CheckButton struct {
-	ToggleButton
+// CellRendererAccel is a representation of GtkCellRendererAccel.
+type CellRendererAccel struct {
+	CellRendererText
 }
 
-// native returns a pointer to the underlying GtkCheckButton.
-func (v *CheckButton) native() *C.GtkCheckButton {
+// native returns a pointer to the underlying GtkCellRendererAccel.
+func (v *CellRendererAccel) native() *C.GtkCellRendererAccel {
 	if v == nil || v.GObject == nil {
 		return nil
 	}
 	p := unsafe.Pointer(v.GObject)
-	return C.toGtkCheckButton(p)
+	return C.toGtkCellRendererAccel(p)
 }
 
-func marshalCheckButton(p uintptr) (interface{}, error) {
+func marshalCellRendererAccel(p uintptr) (interface{}, error) {
 	c := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
 	obj := glib.Take(unsafe.Pointer(c))
-	return wrapCheckButton(obj), nil
+	return wrapCellRendererAccel(obj), nil
 }
 
-func wrapCheckButton(obj *glib.Object) *CheckButton {
-	actionable := wrapActionable(obj)
-	return &CheckButton{ToggleButton{Button{Bin{Container{Widget{
-		glib.InitiallyUnowned{obj}}}}, actionable}}}
+func wrapCellRendererAccel(obj *glib.Object) *CellRendererAccel {
+	if obj == nil {
+		return nil
+	}
+
+	return &CellRendererAccel{CellRendererText{CellRenderer{glib.InitiallyUnowned{obj}}}}
 }
 
-// CheckButtonNew is a wrapper around gtk_check_button_new().
-func CheckButtonNew() (*CheckButton, error) {
-	c := C.gtk_check_button_new()
+// CellRendererAccelNew is a wrapper around gtk_cell_renderer_accel_new().
+func CellRendererAccelNew() (*CellRendererAccel, error) {
+	c := C.gtk_cell_renderer_accel_new()
 	if c == nil {
 		return nil, nilPtrErr
 	}
 	obj := glib.Take(unsafe.Pointer(c))
-	return wrapCheckButton(obj), nil
+	return wrapCellRendererAccel(obj), nil
 }
 
-// CheckButtonNewWithLabel is a wrapper around
-// gtk_check_button_new_with_label().
-func CheckButtonNewWithLabel(label string) (*CheckButton, error) {
-	cstr := C.CString(label)
-	defer C.free(unsafe.Pointer(cstr))
-	c := C.gtk_check_button_new_with_label((*C.gchar)(cstr))
-	if c == nil {
-		return nil, nilPtrErr
-	}
-	return wrapCheckButton(glib.Take(unsafe.Pointer(c))), nil
-}
+/*
+ * GtkCellRendererCombo
+ */
+
+// CellRendererCombo is a representation of GtkCellRendererCombo.
+type CellRendererCombo struct {
+	CellRendererText
+}
+
+// native returns a pointer to the underlying GtkCellRendererCombo.
+func (v *CellRendererCombo) native() *C.GtkCellRendererCombo {
+	if v == nil || v.GObject == nil {
+		return nil
+	}
+	p := unsafe.Pointer(v.GObject)
+	return C.toGtkCellRendererCombo(p)
+}
+
+func marshalCellRendererCombo(p uintptr) (interface{}, error) {
+	c := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
+	obj := glib.Take(unsafe.Pointer(c))
+	return wrapCellRendererCombo(obj), nil
+}
+
+func wrapCellRendererCombo(obj *glib.Object) *CellRendererCombo {
+	if obj == nil {
+		return nil
+	}
+
+	return &CellRendererCombo{CellRendererText{CellRenderer{glib.InitiallyUnowned{obj}}}}
+}
+
+// CellRendererComboNew is a wrapper around gtk_cell_renderer_combo_new().
+func CellRendererComboNew() (*CellRendererCombo, error) {
+	c := C.gtk_cell_renderer_combo_new()
+	if c == nil {
+		return nil, nilPtrErr
+	}
+	obj := glib.Take(unsafe.Pointer(c))
+	return wrapCellRendererCombo(obj), nil
+}
+
+/*
+ * GtkCellRendererSpin
+ */
+
+// CellRendererSpin is a representation of GtkCellRendererSpin.
+type CellRendererSpin struct {
+	CellRendererText
+}
+
+// native returns a pointer to the underlying GtkCellRendererSpin.
+func (v *CellRendererSpin) native() *C.GtkCellRendererSpin {
+	if v == nil || v.GObject == nil {
+		return nil
+	}
+	p := unsafe.Pointer(v.GObject)
+	return C.toGtkCellRendererSpin(p)
+}
+
+func marshalCellRendererSpin(p uintptr) (interface{}, error) {
+	c := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
+	obj := glib.Take(unsafe.Pointer(c))
+	return wrapCellRendererSpin(obj), nil
+}
+
+func wrapCellRendererSpin(obj *glib.Object) *CellRendererSpin {
+	if obj == nil {
+		return nil
+	}
+
+	return &CellRendererSpin{CellRendererText{CellRenderer{glib.InitiallyUnowned{obj}}}}
+}
+
+// CellRendererSpinNew is a wrapper around gtk_cell_renderer_spin_new().
+func CellRendererSpinNew() (*CellRendererSpin, error) {
+	c := C.gtk_cell_renderer_spin_new()
+	if c == nil {
+		return nil, nilPtrErr
+	}
+	obj := glib.Take(unsafe.Pointer(c))
+	return wrapCellRendererSpin(obj), nil
+}
+
+/*
+ * GtkCheckButton
+ */
+
+// CheckButton is a wrapper around GTK's GtkCheckButton.
+type CheckButton struct {
+	ToggleButton
+}
+
+// native returns a pointer to the underlying GtkCheckButton.
+func (v *CheckButton) native() *C.GtkCheckButton {
+	if v == nil || v.GObject == nil {
+		return nil
+	}
+	p := unsafe.Pointer(v.GObject)
+	return C.toGtkCheckButton(p)
+}
+
+func marshalCheckButton(p uintptr) (interface{}, error) {
+	c := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
+	obj := glib.Take(unsafe.Pointer(c))
+	return wrapCheckButton(obj), nil
+}
+
+func wrapCheckButton(obj *glib.Object) *CheckButton {
+	if obj == nil {
+		return nil
+	}
+
+	actionable := wrapActionable(obj)
+	return &CheckButton{ToggleButton{Button{Bin{Container{Widget{
+		glib.InitiallyUnowned{obj}}}}, actionable}}}
+}
+
+// CheckButtonNew is a wrapper around gtk_check_button_new().
+func CheckButtonNew() (*CheckButton, error) {
+	c := C.gtk_check_button_new()
+	if c == nil {
+		return nil, nilPtrErr
+	}
+	obj := glib.Take(unsafe.Pointer(c))
+	return wrapCheckButton(obj), nil
+}
+
+// CheckButtonNewWithLabel is a wrapper around
+// gtk_check_button_new_with_label().
+func CheckButtonNewWithLabel(label string) (*CheckButton, error) {
+	cstr := C.CString(label)
+	defer C.free(unsafe.Pointer(cstr))
+	c := C.gtk_check_button_new_with_label((*C.gchar)(cstr))
+	if c == nil {
+		return nil, nilPtrErr
+	}
+	return wrapCheckButton(glib.Take(unsafe.Pointer(c))), nil
+}
 
 // CheckButtonNewWithMnemonic is a wrapper around
 // gtk_check_button_new_with_mnemonic().
@@ -2437,6 +2977,10 @@ func marshalCheckMenuItem(p uintptr) (interface{}, error) {
 }
 
 func wrapCheckMenuItem(obj *glib.Object) *CheckMenuItem {
+	if obj == nil {
+		return nil
+	}
+
 	return &CheckMenuItem{MenuItem{Bin{Container{Widget{
 		glib.InitiallyUnowned{obj}}}}}}
 }
@@ -2538,6 +3082,10 @@ func marshalClipboard(p uintptr) (interface{}, error) {
 }
 
 func wrapClipboard(obj *glib.Object) *Clipboard {
+	if obj == nil {
+		return nil
+	}
+
 	return &Clipboard{obj}
 }
 
@@ -2670,6 +3218,10 @@ func marshalContainer(p uintptr) (interface{}, error) {
 }
 
 func wrapContainer(obj *glib.Object) *Container {
+	if obj == nil {
+		return nil
+	}
+
 	return &Container{Widget{glib.InitiallyUnowned{obj}}}
 }
 
@@ -2695,6 +3247,10 @@ func (v *Container) CheckResize() {
 // GetChildren is a wrapper around gtk_container_get_children().
 func (v *Container) GetChildren() *glib.List {
 	clist := C.gtk_container_get_children(v.native())
+	if clist == nil {
+		return nil
+	}
+
 	glist := glib.WrapList(uintptr(unsafe.Pointer(clist)))
 	glist.DataWrapper(func(ptr unsafe.Pointer) interface{} {
 		return wrapWidget(glib.Take(ptr))
@@ -2706,13 +3262,12 @@ func (v *Container) GetChildren() *glib.List {
 // TODO: gtk_container_get_path_for_child
 
 // GetFocusChild is a wrapper around gtk_container_get_focus_child().
-func (v *Container) GetFocusChild() *Widget {
+func (v *Container) GetFocusChild() (IWidget, error) {
 	c := C.gtk_container_get_focus_child(v.native())
 	if c == nil {
-		return nil
+		return nil, nil
 	}
-	obj := glib.Take(unsafe.Pointer(c))
-	return wrapWidget(obj)
+	return castWidget(c)
 }
 
 // SetFocusChild is a wrapper around gtk_container_set_focus_child().
@@ -2858,6 +3413,10 @@ func (v *CssProvider) native() *C.GtkCssProvider {
 }
 
 func wrapCssProvider(obj *glib.Object) *CssProvider {
+	if obj == nil {
+		return nil
+	}
+
 	return &CssProvider{obj}
 }
 
@@ -2904,7 +3463,7 @@ func (v *CssProvider) ToString() (string, error) {
 	return C.GoString(c), nil
 }
 
-// GetNamed is a wrapper around gtk_css_provider_get_named().
+// CssProviderGetNamed is a wrapper around gtk_css_provider_get_named().
 func CssProviderGetNamed(name string, variant string) (*CssProvider, error) {
 	cname := C.CString(name)
 	defer C.free(unsafe.Pointer(cname))
@@ -2945,6 +3504,10 @@ func marshalDialog(p uintptr) (interface{}, error) {
 }
 
 func wrapDialog(obj *glib.Object) *Dialog {
+	if obj == nil {
+		return nil
+	}
+
 	return &Dialog{Window{Bin{Container{Widget{glib.InitiallyUnowned{obj}}}}}}
 }
 
@@ -3009,13 +3572,12 @@ func (v *Dialog) GetResponseForWidget(widget IWidget) ResponseType {
 }
 
 // GetWidgetForResponse is a wrapper around gtk_dialog_get_widget_for_response().
-func (v *Dialog) GetWidgetForResponse(id ResponseType) (*Widget, error) {
+func (v *Dialog) GetWidgetForResponse(id ResponseType) (IWidget, error) {
 	c := C.gtk_dialog_get_widget_for_response(v.native(), C.gint(id))
 	if c == nil {
-		return nil, nilPtrErr
+		return nil, nil
 	}
-	obj := glib.Take(unsafe.Pointer(c))
-	return wrapWidget(obj), nil
+	return castWidget(c)
 }
 
 // GetContentArea() is a wrapper around gtk_dialog_get_content_area().
@@ -3083,6 +3645,10 @@ func marshalDrawingArea(p uintptr) (interface{}, error) {
 }
 
 func wrapDrawingArea(obj *glib.Object) *DrawingArea {
+	if obj == nil {
+		return nil
+	}
+
 	return &DrawingArea{Widget{glib.InitiallyUnowned{obj}}}
 }
 
@@ -3129,6 +3695,10 @@ func marshalEditable(p uintptr) (interface{}, error) {
 }
 
 func wrapEditable(obj *glib.Object) *Editable {
+	if obj == nil {
+		return nil
+	}
+
 	return &Editable{obj}
 }
 
@@ -3229,6 +3799,7 @@ type Entry struct {
 
 	// Interfaces
 	Editable
+	CellEditable
 }
 
 type IEntry interface {
@@ -3255,8 +3826,13 @@ func marshalEntry(p uintptr) (interface{}, error) {
 }
 
 func wrapEntry(obj *glib.Object) *Entry {
+	if obj == nil {
+		return nil
+	}
+
 	e := wrapEditable(obj)
-	return &Entry{Widget{glib.InitiallyUnowned{obj}}, *e}
+	ce := wrapCellEditable(obj)
+	return &Entry{Widget{glib.InitiallyUnowned{obj}}, *e, *ce}
 }
 
 // EntryNew() is a wrapper around gtk_entry_new().
@@ -3421,12 +3997,11 @@ func (v *Entry) GetOverwriteMode() bool {
 	return gobool(c)
 }
 
-// TODO(jrick) Pangolayout
-/*
-// gtk_entry_get_layout().
-func (v *Entry) GetLayout() {
+// GetLayout is a wrapper around gtk_entry_get_layout().
+func (v *Entry) GetLayout() *pango.Layout {
+	c := C.gtk_entry_get_layout(v.native())
+	return pango.WrapLayout(uintptr(unsafe.Pointer(c)))
 }
-*/
 
 // GetLayoutOffsets is a wrapper around gtk_entry_get_layout_offsets().
 func (v *Entry) GetLayoutOffsets() (x, y int) {
@@ -3449,19 +4024,21 @@ func (v *Entry) TextIndexToLayoutIndex(textIndex int) int {
 	return int(c)
 }
 
-// TODO(jrick) PandoAttrList
-/*
-// gtk_entry_set_attributes().
-func (v *Entry) SetAttributes() {
-}
-*/
+// TODO: depends on PandoAttrList
+// SetAttributes is a wrapper around gtk_entry_set_attributes().
+// func (v *Entry) SetAttributes(attrList *pango.AttrList) {
+// 	C.gtk_entry_set_attributes(v.native(), (*C.PangoAttrList)(unsafe.Pointer(attrList.Native())))
+// }
 
-// TODO(jrick) PandoAttrList
-/*
-// gtk_entry_get_attributes().
-func (v *Entry) GetAttributes() {
-}
-*/
+// TODO: depends on PandoAttrList
+// GetAttributes is a wrapper around gtk_entry_get_attributes().
+// func (v *Entry) GetAttributes() (*pango.AttrList, error) {
+// 	c := C.gtk_entry_get_attributes(v.native())
+// 	if c == nil {
+// 		return nil, nilPtrErr
+// 	}
+// 	return &pango.AttrList{unsafe.Pointer(c)}, nil
+// }
 
 // GetMaxLength is a wrapper around gtk_entry_get_max_length().
 func (v *Entry) GetMaxLength() int {
@@ -3522,7 +4099,7 @@ func (v *Entry) SetProgressPulseStep(fraction float64) {
 	C.gtk_entry_set_progress_pulse_step(v.native(), C.gdouble(fraction))
 }
 
-// GetProgressPulseSte) is a wrapper around gtk_entry_get_progress_pulse_step().
+// GetProgressPulseStep is a wrapper around gtk_entry_get_progress_pulse_step().
 func (v *Entry) GetProgressPulseStep() float64 {
 	c := C.gtk_entry_get_progress_pulse_step(v.native())
 	return float64(c)
@@ -3533,12 +4110,12 @@ func (v *Entry) ProgressPulse() {
 	C.gtk_entry_progress_pulse(v.native())
 }
 
-// TODO(jrick) GdkEventKey
-/*
-// gtk_entry_im_context_filter_keypress
-func (v *Entry) IMContextFilterKeypress() {
+// IMContextFilterKeypress is a wrapper around gtk_entry_im_context_filter_keypress().
+func (v *Entry) IMContextFilterKeypress(eventKey *gdk.EventKey) bool {
+	key := (*C.GdkEventKey)(unsafe.Pointer(eventKey.Native()))
+	c := C.gtk_entry_im_context_filter_keypress(v.native(), key)
+	return gobool(c)
 }
-*/
 
 // ResetIMContext is a wrapper around gtk_entry_reset_im_context().
 func (v *Entry) ResetIMContext() {
@@ -3547,86 +4124,94 @@ func (v *Entry) ResetIMContext() {
 
 // SetIconFromPixbuf is a wrapper around gtk_entry_set_icon_from_pixbuf().
 func (v *Entry) SetIconFromPixbuf(iconPos EntryIconPosition, pixbuf *gdk.Pixbuf) {
-	C.gtk_entry_set_icon_from_pixbuf(v.native(),
-		C.GtkEntryIconPosition(iconPos),
-		(*C.GdkPixbuf)(unsafe.Pointer(pixbuf.Native())))
+	var pb *C.GdkPixbuf
+	if pixbuf != nil {
+		pb = (*C.GdkPixbuf)(unsafe.Pointer(pixbuf.Native()))
+	}
+
+	C.gtk_entry_set_icon_from_pixbuf(v.native(), C.GtkEntryIconPosition(iconPos), pb)
 }
 
 // SetIconFromIconName is a wrapper around gtk_entry_set_icon_from_icon_name().
 func (v *Entry) SetIconFromIconName(iconPos EntryIconPosition, name string) {
-	cstr := C.CString(name)
-	defer C.free(unsafe.Pointer(cstr))
-	C.gtk_entry_set_icon_from_icon_name(v.native(),
-		C.GtkEntryIconPosition(iconPos), (*C.gchar)(cstr))
+	var icon *C.gchar
+	if name != "" {
+		n := C.CString(name)
+		defer C.free(unsafe.Pointer(n))
+		icon = (*C.gchar)(n)
+	}
+
+	C.gtk_entry_set_icon_from_icon_name(v.native(), C.GtkEntryIconPosition(iconPos), icon)
 }
 
 // RemoveIcon is a convenience func to set a nil pointer to the icon name.
 func (v *Entry) RemoveIcon(iconPos EntryIconPosition) {
-	C.gtk_entry_set_icon_from_icon_name(v.native(),
-		C.GtkEntryIconPosition(iconPos), nil)
+	C.gtk_entry_set_icon_from_icon_name(v.native(), C.GtkEntryIconPosition(iconPos), nil)
 }
 
-// TODO(jrick) GIcon
-/*
-// gtk_entry_set_icon_from_gicon().
-func (v *Entry) SetIconFromGIcon() {
+// TODO: Needs gio/GIcon implemented first
+// SetIconFromGIcon is a wrapper around gtk_entry_set_icon_from_gicon().
+func (v *Entry) SetIconFromGIcon(iconPos EntryIconPosition, icon *glib.Icon) {
+	C.gtk_entry_set_icon_from_gicon(v.native(),
+		C.GtkEntryIconPosition(iconPos),
+		(*C.GIcon)(icon.NativePrivate()))
 }
-*/
 
 // GetIconStorageType is a wrapper around gtk_entry_get_icon_storage_type().
 func (v *Entry) GetIconStorageType(iconPos EntryIconPosition) ImageType {
-	c := C.gtk_entry_get_icon_storage_type(v.native(),
-		C.GtkEntryIconPosition(iconPos))
+	c := C.gtk_entry_get_icon_storage_type(v.native(), C.GtkEntryIconPosition(iconPos))
 	return ImageType(c)
 }
 
-// TODO(jrick) GdkPixbuf
-/*
-// gtk_entry_get_icon_pixbuf().
-func (v *Entry) GetIconPixbuf() {
+// GetIconPixbuf is a wrapper around gtk_entry_get_icon_pixbuf().
+func (v *Entry) GetIconPixbuf(iconPos EntryIconPosition) (*gdk.Pixbuf, error) {
+	c := C.gtk_entry_get_icon_pixbuf(v.native(), C.GtkEntryIconPosition(iconPos))
+	if c == nil {
+		return nil, nilPtrErr
+	}
+	return &gdk.Pixbuf{glib.Take(unsafe.Pointer(c))}, nil
 }
-*/
 
 // GetIconName is a wrapper around gtk_entry_get_icon_name().
 func (v *Entry) GetIconName(iconPos EntryIconPosition) (string, error) {
-	c := C.gtk_entry_get_icon_name(v.native(),
-		C.GtkEntryIconPosition(iconPos))
+	c := C.gtk_entry_get_icon_name(v.native(), C.GtkEntryIconPosition(iconPos))
 	if c == nil {
 		return "", nilPtrErr
 	}
 	return goString(c), nil
 }
 
-// TODO(jrick) GIcon
-/*
-// gtk_entry_get_icon_gicon().
-func (v *Entry) GetIconGIcon() {
+// GetIconGIcon is a wrapper around gtk_entry_get_icon_gicon().
+func (v *Entry) GetIconGIcon(iconPos EntryIconPosition) (*glib.Icon, error) {
+	c := C.gtk_entry_get_icon_gicon(v.native(), C.GtkEntryIconPosition(iconPos))
+	if c == nil {
+		return nil, nilPtrErr
+	}
+	obj := &glib.Object{glib.ToGObject(unsafe.Pointer(c))}
+	i := &glib.Icon{obj}
+	runtime.SetFinalizer(i, func(_ interface{}) { obj.Unref() })
+	return i, nil
 }
-*/
 
 // SetIconActivatable is a wrapper around gtk_entry_set_icon_activatable().
 func (v *Entry) SetIconActivatable(iconPos EntryIconPosition, activatable bool) {
-	C.gtk_entry_set_icon_activatable(v.native(),
-		C.GtkEntryIconPosition(iconPos), gbool(activatable))
+	C.gtk_entry_set_icon_activatable(v.native(), C.GtkEntryIconPosition(iconPos), gbool(activatable))
 }
 
 // GetIconActivatable is a wrapper around gtk_entry_get_icon_activatable().
 func (v *Entry) GetIconActivatable(iconPos EntryIconPosition) bool {
-	c := C.gtk_entry_get_icon_activatable(v.native(),
-		C.GtkEntryIconPosition(iconPos))
+	c := C.gtk_entry_get_icon_activatable(v.native(), C.GtkEntryIconPosition(iconPos))
 	return gobool(c)
 }
 
 // SetIconSensitive is a wrapper around gtk_entry_set_icon_sensitive().
 func (v *Entry) SetIconSensitive(iconPos EntryIconPosition, sensitive bool) {
-	C.gtk_entry_set_icon_sensitive(v.native(),
-		C.GtkEntryIconPosition(iconPos), gbool(sensitive))
+	C.gtk_entry_set_icon_sensitive(v.native(), C.GtkEntryIconPosition(iconPos), gbool(sensitive))
 }
 
 // GetIconSensitive is a wrapper around gtk_entry_get_icon_sensitive().
 func (v *Entry) GetIconSensitive(iconPos EntryIconPosition) bool {
-	c := C.gtk_entry_get_icon_sensitive(v.native(),
-		C.GtkEntryIconPosition(iconPos))
+	c := C.gtk_entry_get_icon_sensitive(v.native(), C.GtkEntryIconPosition(iconPos))
 	return gobool(c)
 }
 
@@ -3638,10 +4223,14 @@ func (v *Entry) GetIconAtPos(x, y int) int {
 
 // SetIconTooltipText is a wrapper around gtk_entry_set_icon_tooltip_text().
 func (v *Entry) SetIconTooltipText(iconPos EntryIconPosition, tooltip string) {
-	cstr := C.CString(tooltip)
-	defer C.free(unsafe.Pointer(cstr))
-	C.gtk_entry_set_icon_tooltip_text(v.native(),
-		C.GtkEntryIconPosition(iconPos), (*C.gchar)(cstr))
+	var text *C.gchar
+	if tooltip != "" {
+		cstr := C.CString(tooltip)
+		defer C.free(unsafe.Pointer(cstr))
+		text = cstr
+	}
+
+	C.gtk_entry_set_icon_tooltip_text(v.native(), C.GtkEntryIconPosition(iconPos), text)
 }
 
 // GetIconTooltipText is a wrapper around gtk_entry_get_icon_tooltip_text().
@@ -3656,10 +4245,14 @@ func (v *Entry) GetIconTooltipText(iconPos EntryIconPosition) (string, error) {
 
 // SetIconTooltipMarkup is a wrapper around gtk_entry_set_icon_tooltip_markup().
 func (v *Entry) SetIconTooltipMarkup(iconPos EntryIconPosition, tooltip string) {
-	cstr := C.CString(tooltip)
-	defer C.free(unsafe.Pointer(cstr))
-	C.gtk_entry_set_icon_tooltip_markup(v.native(),
-		C.GtkEntryIconPosition(iconPos), (*C.gchar)(cstr))
+	var text *C.gchar
+	if tooltip != "" {
+		cstr := C.CString(tooltip)
+		defer C.free(unsafe.Pointer(cstr))
+		text = cstr
+	}
+
+	C.gtk_entry_set_icon_tooltip_markup(v.native(), C.GtkEntryIconPosition(iconPos), text)
 }
 
 // GetIconTooltipMarkup is a wrapper around gtk_entry_get_icon_tooltip_markup().
@@ -3672,12 +4265,12 @@ func (v *Entry) GetIconTooltipMarkup(iconPos EntryIconPosition) (string, error)
 	return goString(c), nil
 }
 
-// TODO(jrick) GdkDragAction
-/*
-// gtk_entry_set_icon_drag_source().
-func (v *Entry) SetIconDragSource() {
-}
-*/
+// TODO: depends on GtkTargetList
+// SetIconDragSource is a wrapper around gtk_entry_set_icon_drag_source().
+// func (v *Entry) SetIconDragSource(iconPos EntryIconPosition, targetList *TargetList, action gdk.DragAction) {
+// 	C.gtk_entry_set_icon_drag_source(v.native(), C.GtkEntryIconPosition(iconPos),
+// 		targetList.native(), C.GdkDragAction(action))
+// }
 
 // GetCurrentIconDragSource is a wrapper around gtk_entry_get_current_icon_drag_source().
 func (v *Entry) GetCurrentIconDragSource() int {
@@ -3740,6 +4333,10 @@ func marshalEntryBuffer(p uintptr) (interface{}, error) {
 }
 
 func wrapEntryBuffer(obj *glib.Object) *EntryBuffer {
+	if obj == nil {
+		return nil
+	}
+
 	return &EntryBuffer{obj}
 }
 
@@ -3853,6 +4450,10 @@ func marshalEntryCompletion(p uintptr) (interface{}, error) {
 }
 
 func wrapEntryCompletion(obj *glib.Object) *EntryCompletion {
+	if obj == nil {
+		return nil
+	}
+
 	return &EntryCompletion{obj}
 }
 
@@ -3883,13 +4484,12 @@ func (v *EntryCompletion) SetModel(model ITreeModel) {
 }
 
 // GetModel is a wrapper around gtk_entry_completion_get_model
-func (v *EntryCompletion) GetModel() (*TreeModel, error) {
+func (v *EntryCompletion) GetModel() (ITreeModel, error) {
 	c := C.gtk_entry_completion_get_model(v.native())
 	if c == nil {
 		return nil, nilPtrErr
 	}
-	obj := glib.Take(unsafe.Pointer(c))
-	return wrapTreeModel(obj), nil
+	return castTreeModel(c)
 }
 
 // TODO:
@@ -3992,6 +4592,10 @@ func marshalEventBox(p uintptr) (interface{}, error) {
 }
 
 func wrapEventBox(obj *glib.Object) *EventBox {
+	if obj == nil {
+		return nil
+	}
+
 	return &EventBox{Bin{Container{Widget{glib.InitiallyUnowned{obj}}}}}
 }
 
@@ -4052,6 +4656,10 @@ func marshalExpander(p uintptr) (interface{}, error) {
 }
 
 func wrapExpander(obj *glib.Object) *Expander {
+	if obj == nil {
+		return nil
+	}
+
 	return &Expander{Bin{Container{Widget{glib.InitiallyUnowned{obj}}}}}
 }
 
@@ -4059,10 +4667,10 @@ func wrapExpander(obj *glib.Object) *Expander {
 func ExpanderNew(label string) (*Expander, error) {
 	var cstr *C.gchar
 	if label != "" {
-		cstr := C.CString(label)
+		cstr = (*C.gchar)(C.CString(label))
 		defer C.free(unsafe.Pointer(cstr))
 	}
-	c := C.gtk_expander_new((*C.gchar)(cstr))
+	c := C.gtk_expander_new(cstr)
 	if c == nil {
 		return nil, nilPtrErr
 	}
@@ -4143,6 +4751,10 @@ func marshalFileChooser(p uintptr) (interface{}, error) {
 }
 
 func wrapFileChooser(obj *glib.Object) *FileChooser {
+	if obj == nil {
+		return nil
+	}
+
 	return &FileChooser{obj}
 }
 
@@ -4188,21 +4800,46 @@ func (v *FileChooser) UnselectAll() {
 }
 
 // GetFilenames is a wrapper around gtk_file_chooser_get_filenames().
-func (v *FileChooser) GetFilenames() (*glib.SList, error) {
-	c := C.gtk_file_chooser_get_filenames(v.native())
-	if c == nil {
+func (v *FileChooser) GetFilenames() ([]string, error) {
+	clist := C.gtk_file_chooser_get_filenames(v.native())
+	if clist == nil {
 		return nil, nilPtrErr
 	}
-	return glib.WrapSList(uintptr(unsafe.Pointer(c))), nil
+
+	slist := glib.WrapSList(uintptr(unsafe.Pointer(clist)))
+	defer slist.Free()
+
+	var filenames = make([]string, 0, slist.Length())
+	for ; slist.DataRaw() != nil; slist = slist.Next() {
+		w := (*C.char)(slist.DataRaw())
+		defer C.free(unsafe.Pointer(w))
+
+		filenames = append(filenames, C.GoString(w))
+	}
+
+	return filenames, nil
 }
 
 // GetURIs is a wrapper around gtk_file_chooser_get_uris().
-func (v FileChooser) GetURIs() (*glib.SList, error) {
-	c := C.gtk_file_chooser_get_uris(v.native())
-	if c == nil {
+func (v FileChooser) GetURIs() ([]string, error) {
+	// TODO: do the same as in (v *FileChooser) GetFilenames()
+	clist := C.gtk_file_chooser_get_uris(v.native())
+	if clist == nil {
 		return nil, nilPtrErr
 	}
-	return glib.WrapSList(uintptr(unsafe.Pointer(c))), nil
+
+	slist := glib.WrapSList(uintptr(unsafe.Pointer(clist)))
+	defer slist.Free()
+
+	var uris = make([]string, 0, slist.Length())
+	for ; slist.DataRaw() != nil; slist = slist.Next() {
+		w := (*C.char)(slist.DataRaw())
+		defer C.free(unsafe.Pointer(w))
+
+		uris = append(uris, C.GoString(w))
+	}
+
+	return uris, nil
 }
 
 // SetDoOverwriteConfirmation is a wrapper around gtk_file_chooser_set_do_overwrite_confirmation().
@@ -4351,6 +4988,10 @@ func marshalFileChooserButton(p uintptr) (interface{}, error) {
 }
 
 func wrapFileChooserButton(obj *glib.Object) *FileChooserButton {
+	if obj == nil {
+		return nil
+	}
+
 	fc := wrapFileChooser(obj)
 	return &FileChooserButton{Box{Container{Widget{glib.InitiallyUnowned{obj}}}}, *fc}
 }
@@ -4368,12 +5009,37 @@ func FileChooserButtonNew(title string, action FileChooserAction) (*FileChooserB
 	return wrapFileChooserButton(obj), nil
 }
 
-// TODO:
-// gtk_file_chooser_button_new_with_dialog().
-// gtk_file_chooser_button_get_title().
-// gtk_file_chooser_button_set_title().
-// gtk_file_chooser_button_get_width_chars().
-// gtk_file_chooser_button_set_width_chars().
+// FileChooserButtonNewWithDialog is a wrapper around gtk_file_chooser_button_new_with_dialog().
+func FileChooserButtonNewWithDialog(dialog IWidget) (*FileChooserButton, error) {
+	c := C.gtk_file_chooser_button_new_with_dialog(dialog.toWidget())
+	if c == nil {
+		return nil, nilPtrErr
+	}
+	return wrapFileChooserButton(glib.Take(unsafe.Pointer(c))), nil
+}
+
+// GetTitle is a wrapper around gtk_file_chooser_button_get_title().
+func (v *FileChooserButton) GetTitle() string {
+	// docs say: The returned value should not be modified or freed.
+	return goString(C.gtk_file_chooser_button_get_title(v.native()))
+}
+
+// SetTitle is a wrapper around gtk_file_chooser_button_set_title().
+func (v *FileChooserButton) SetTitle(title string) {
+	cstr := C.CString(title)
+	defer C.free(unsafe.Pointer(cstr))
+	C.gtk_file_chooser_button_set_title(v.native(), (*C.gchar)(cstr))
+}
+
+// GetWidthChars is a wrapper around gtk_file_chooser_button_get_width_chars().
+func (v *FileChooserButton) GetWidthChars() int {
+	return int(C.gtk_file_chooser_button_get_width_chars(v.native()))
+}
+
+// SetWidthChars is a wrapper around gtk_file_chooser_button_set_width_chars().
+func (v *FileChooserButton) SetWidthChars(width int) {
+	C.gtk_file_chooser_button_set_width_chars(v.native(), C.gint(width))
+}
 
 /*
  * GtkFileChooserDialog
@@ -4403,6 +5069,10 @@ func marshalFileChooserDialog(p uintptr) (interface{}, error) {
 }
 
 func wrapFileChooserDialog(obj *glib.Object) *FileChooserDialog {
+	if obj == nil {
+		return nil
+	}
+
 	fc := wrapFileChooser(obj)
 	return &FileChooserDialog{Dialog{Window{Bin{Container{Widget{glib.InitiallyUnowned{obj}}}}}}, *fc}
 }
@@ -4494,6 +5164,10 @@ func marshalFileChooserWidget(p uintptr) (interface{}, error) {
 }
 
 func wrapFileChooserWidget(obj *glib.Object) *FileChooserWidget {
+	if obj == nil {
+		return nil
+	}
+
 	fc := wrapFileChooser(obj)
 	return &FileChooserWidget{Box{Container{Widget{glib.InitiallyUnowned{obj}}}}, *fc}
 }
@@ -4533,6 +5207,10 @@ func marshalFileFilter(p uintptr) (interface{}, error) {
 }
 
 func wrapFileFilter(obj *glib.Object) *FileFilter {
+	if obj == nil {
+		return nil
+	}
+
 	return &FileFilter{obj}
 }
 
@@ -4553,6 +5231,15 @@ func (v *FileFilter) SetName(name string) {
 	C.gtk_file_filter_set_name(v.native(), (*C.gchar)(cstr))
 }
 
+// GetName is a wrapper around gtk_file_filter_get_name().
+func (v *FileFilter) GetName() (name string) {
+	cstr := C.gtk_file_filter_get_name(v.native())
+	if cstr != nil {
+		name = goString(cstr)
+	}
+	return
+}
+
 // AddMimeType is a wrapper around gtk_file_filter_add_mime_type().
 func (v *FileFilter) AddMimeType(mimeType string) {
 	cstr := C.CString(mimeType)
@@ -4597,6 +5284,10 @@ func marshalFrame(p uintptr) (interface{}, error) {
 }
 
 func wrapFrame(obj *glib.Object) *Frame {
+	if obj == nil {
+		return nil
+	}
+
 	return &Frame{Bin{Container{Widget{glib.InitiallyUnowned{obj}}}}}
 }
 
@@ -4652,13 +5343,12 @@ func (v *Frame) GetLabelAlign() (xAlign, yAlign float32) {
 }
 
 // GetLabelWidget is a wrapper around gtk_frame_get_label_widget().
-func (v *Frame) GetLabelWidget() (*Widget, error) {
+func (v *Frame) GetLabelWidget() (IWidget, error) {
 	c := C.gtk_frame_get_label_widget(v.native())
 	if c == nil {
-		return nil, nilPtrErr
+		return nil, nil
 	}
-	obj := glib.Take(unsafe.Pointer(c))
-	return wrapWidget(obj), nil
+	return castWidget(c)
 }
 
 // GetShadowType is a wrapper around gtk_frame_get_shadow_type().
@@ -4692,7 +5382,11 @@ func marshalAspectFrame(p uintptr) (interface{}, error) {
 }
 
 func wrapAspectFrame(obj *glib.Object) *AspectFrame {
-	return &AspectFrame{Frame{Bin{Container{Widget{glib.InitiallyUnowned{obj}}}}}}
+	if obj == nil {
+		return nil
+	}
+
+	return &AspectFrame{Frame{Bin{Container{Widget{glib.InitiallyUnowned{obj}}}}}}
 }
 
 // AspectFrameNew is a wrapper around gtk_aspect_frame_new().
@@ -4748,6 +5442,10 @@ func marshalGrid(p uintptr) (interface{}, error) {
 }
 
 func wrapGrid(obj *glib.Object) *Grid {
+	if obj == nil {
+		return nil
+	}
+
 	o := wrapOrientable(obj)
 	return &Grid{Container{Widget{glib.InitiallyUnowned{obj}}}, *o}
 }
@@ -4776,13 +5474,12 @@ func (v *Grid) AttachNextTo(child, sibling IWidget, side PositionType, width, he
 }
 
 // GetChildAt() is a wrapper around gtk_grid_get_child_at().
-func (v *Grid) GetChildAt(left, top int) (*Widget, error) {
+func (v *Grid) GetChildAt(left, top int) (IWidget, error) {
 	c := C.gtk_grid_get_child_at(v.native(), C.gint(left), C.gint(top))
 	if c == nil {
-		return nil, nilPtrErr
+		return nil, nil
 	}
-	obj := glib.Take(unsafe.Pointer(c))
-	return wrapWidget(obj), nil
+	return castWidget(c)
 }
 
 // InsertRow() is a wrapper around gtk_grid_insert_row().
@@ -4886,6 +5583,15 @@ func (v *IconTheme) LoadIcon(iconName string, size int, flags IconLookupFlags) (
 	return &gdk.Pixbuf{glib.Take(unsafe.Pointer(c))}, nil
 }
 
+// HasIcon is a wrapper around gtk_icon_theme_has_icon().
+func (v *IconTheme) HasIcon(iconName string) bool {
+	cstr := C.CString(iconName)
+	defer C.free(unsafe.Pointer(cstr))
+
+	c := C.gtk_icon_theme_has_icon(v.Theme, (*C.gchar)(cstr))
+	return gobool(c)
+}
+
 /*
  * GtkImage
  */
@@ -4911,6 +5617,10 @@ func marshalImage(p uintptr) (interface{}, error) {
 }
 
 func wrapImage(obj *glib.Object) *Image {
+	if obj == nil {
+		return nil
+	}
+
 	return &Image{Widget{glib.InitiallyUnowned{obj}}}
 }
 
@@ -4971,12 +5681,18 @@ func ImageNewFromIconName(iconName string, size IconSize) (*Image, error) {
 	return wrapImage(obj), nil
 }
 
-// TODO(jrick) GIcon
-/*
-// gtk_image_new_from_gicon().
-func ImageNewFromGIcon() {
+// ImageNewFromGIcon is a wrapper around gtk_image_new_from_gicon()
+func ImageNewFromGIcon(icon *glib.Icon, size IconSize) (*Image, error) {
+	c := C.gtk_image_new_from_gicon(
+		(*C.GIcon)(icon.NativePrivate()),
+		C.GtkIconSize(size))
+
+	if c == nil {
+		return nil, nilPtrErr
+	}
+	obj := glib.Take(unsafe.Pointer(c))
+	return wrapImage(obj), nil
 }
-*/
 
 // Clear() is a wrapper around gtk_image_clear().
 func (v *Image) Clear() {
@@ -5011,12 +5727,13 @@ func (v *Image) SetFromIconName(iconName string, size IconSize) {
 		C.GtkIconSize(size))
 }
 
-// TODO(jrick) GIcon
-/*
-// gtk_image_set_from_gicon().
-func (v *Image) SetFromGIcon() {
+// SetFromGIcon is a wrapper around gtk_image_set_from_gicon()
+func (v *Image) SetFromGIcon(icon *glib.Icon, size IconSize) {
+	C.gtk_image_set_from_gicon(
+		v.native(),
+		(*C.GIcon)(icon.NativePrivate()),
+		C.GtkIconSize(size))
 }
-*/
 
 // SetPixelSize() is a wrapper around gtk_image_set_pixel_size().
 func (v *Image) SetPixelSize(pixelSize int) {
@@ -5073,12 +5790,25 @@ func (v *Image) GetIconName() (string, IconSize) {
 	return goString(iconName), IconSize(size)
 }
 
-// TODO(jrick) GIcon
-/*
-// gtk_image_get_gicon().
-func (v *Image) GetGIcon() {
+// GetGIcon is a wrapper around gtk_image_get_gicon()
+func (v *Image) GetGIcon() (*glib.Icon, IconSize, error) {
+	var gicon *C.GIcon
+	var size *C.GtkIconSize
+	C.gtk_image_get_gicon(
+		v.native(),
+		&gicon,
+		size)
+
+	if gicon == nil {
+		return nil, ICON_SIZE_INVALID, nilPtrErr
+	}
+
+	obj := &glib.Object{glib.ToGObject(unsafe.Pointer(gicon))}
+	i := &glib.Icon{obj}
+
+	runtime.SetFinalizer(i, func(_ interface{}) { obj.Unref() })
+	return i, IconSize(*size), nil
 }
-*/
 
 // GetPixelSize() is a wrapper around gtk_image_get_pixel_size().
 func (v *Image) GetPixelSize() int {
@@ -5112,6 +5842,10 @@ func marshalLayout(p uintptr) (interface{}, error) {
 }
 
 func wrapLayout(obj *glib.Object) *Layout {
+	if obj == nil {
+		return nil
+	}
+
 	return &Layout{Container{Widget{glib.InitiallyUnowned{obj}}}}
 }
 
@@ -5175,6 +5909,10 @@ func marshalLinkButton(p uintptr) (interface{}, error) {
 }
 
 func wrapLinkButton(obj *glib.Object) *LinkButton {
+	if obj == nil {
+		return nil
+	}
+
 	actionable := wrapActionable(obj)
 	return &LinkButton{Button{Bin{Container{Widget{
 		glib.InitiallyUnowned{obj}}}}, actionable}}
@@ -5227,6 +5965,60 @@ func (v *LinkButton) SetVisited(visited bool) {
 	C.gtk_link_button_set_visited(v.native(), gbool(visited))
 }
 
+/*
+ * GtkLockButton
+ */
+
+// LockButton is a representation of GTK's GtkLockButton.
+type LockButton struct {
+	Button
+}
+
+// native returns a pointer to the underlying GtkLockButton.
+func (v *LockButton) native() *C.GtkLockButton {
+	if v == nil || v.GObject == nil {
+		return nil
+	}
+	p := unsafe.Pointer(v.GObject)
+	return C.toGtkLockButton(p)
+}
+
+func marshalLockButton(p uintptr) (interface{}, error) {
+	c := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
+	obj := glib.Take(unsafe.Pointer(c))
+	return wrapLockButton(obj), nil
+}
+
+func wrapLockButton(obj *glib.Object) *LockButton {
+	if obj == nil {
+		return nil
+	}
+
+	actionable := wrapActionable(obj)
+	return &LockButton{Button{Bin{Container{Widget{
+		glib.InitiallyUnowned{obj}}}}, actionable}}
+}
+
+// LockButtonNew is a wrapper around gtk_lock_button_new().
+func LockButtonNew(permission *glib.Permission) (*LockButton, error) {
+	c := C.gtk_lock_button_new(nativeGPermission(permission))
+	if c == nil {
+		return nil, nilPtrErr
+	}
+	return wrapLockButton(glib.Take(unsafe.Pointer(c))), nil
+}
+
+// GetPermission is a wrapper around gtk_lock_button_get_permission().
+func (v *LockButton) GetPermission() *glib.Permission {
+	c := C.gtk_lock_button_get_permission(v.native())
+	return glib.WrapPermission(unsafe.Pointer(c))
+}
+
+// SetPermission is a wrapper around gtk_lock_button_set_permission().
+func (v *LockButton) SetPermission(permission *glib.Permission) {
+	C.gtk_lock_button_set_permission(v.native(), nativeGPermission(permission))
+}
+
 /*
  * GtkListStore
  */
@@ -5256,6 +6048,10 @@ func marshalListStore(p uintptr) (interface{}, error) {
 }
 
 func wrapListStore(obj *glib.Object) *ListStore {
+	if obj == nil {
+		return nil
+	}
+
 	tm := wrapTreeModel(obj)
 	ts := wrapTreeSortable(obj)
 	return &ListStore{obj, *tm, *ts}
@@ -5297,11 +6093,16 @@ func (v *ListStore) Remove(iter *TreeIter) bool {
 	return gobool(c)
 }
 
-// TODO(jrick)
-/*
+// SetColumnTypes is a wrapper around gtk_list_store_set_column_types().
+// The size of glib.Type must match the number of columns
 func (v *ListStore) SetColumnTypes(types ...glib.Type) {
+	gtypes := C.alloc_types(C.int(len(types)))
+	for n, val := range types {
+		C.set_type(gtypes, C.int(n), C.GType(val))
+	}
+	defer C.g_free(C.gpointer(gtypes))
+	C.gtk_list_store_set_column_types(v.native(), C.gint(len(types)), gtypes)
 }
-*/
 
 // Set() is a wrapper around gtk_list_store_set_value() but provides
 // a function similar to gtk_list_store_set() in that multiple columns
@@ -5378,17 +6179,31 @@ func (v *ListStore) InsertWithValues(iter *TreeIter, position int, inColumns []i
 			return err
 		}
 
-		var cvp *C.GValue = (*C.GValue)(gv.Native())
+		var cvp *C.GValue = (*C.GValue)(unsafe.Pointer(gv.Native()))
 		cValues = append(cValues, *cvp)
 	}
-	var cColumnsPointer *C.gint = &cColumns[0]
-	var cValuesPointer *C.GValue = &cValues[0]
+	var cColumnsPointer *C.gint
+	if len(cColumns) > 0 {
+		cColumnsPointer = &cColumns[0]
+	}
+	var cValuesPointer *C.GValue
+	if len(cValues) > 0 {
+		cValuesPointer = &cValues[0]
+	}
 
 	C.gtk_list_store_insert_with_valuesv(v.native(), iter.native(), C.gint(position), cColumnsPointer, cValuesPointer, C.gint(length))
 
 	return nil
 }
 
+// Insert() is a wrapper around gtk_list_store_insert().
+func (v *ListStore) Insert(position int) *TreeIter {
+	var ti C.GtkTreeIter
+	C.gtk_list_store_insert(v.native(), &ti, C.gint(position))
+	iter := &TreeIter{ti}
+	return iter
+}
+
 // InsertBefore() is a wrapper around gtk_list_store_insert_before().
 func (v *ListStore) InsertBefore(sibling *TreeIter) *TreeIter {
 	var ti C.GtkTreeIter
@@ -5480,6 +6295,10 @@ func marshalMenuBar(p uintptr) (interface{}, error) {
 }
 
 func wrapMenuBar(obj *glib.Object) *MenuBar {
+	if obj == nil {
+		return nil
+	}
+
 	return &MenuBar{MenuShell{Container{Widget{glib.InitiallyUnowned{obj}}}}}
 }
 
@@ -5517,6 +6336,10 @@ func marshalMenuButton(p uintptr) (interface{}, error) {
 }
 
 func wrapMenuButton(obj *glib.Object) *MenuButton {
+	if obj == nil {
+		return nil
+	}
+
 	actionable := wrapActionable(obj)
 	return &MenuButton{ToggleButton{Button{Bin{Container{Widget{
 		glib.InitiallyUnowned{obj}}}}, actionable}}}
@@ -5576,12 +6399,12 @@ func (v *MenuButton) SetAlignWidget(alignWidget IWidget) {
 }
 
 // GetAlignWidget is a wrapper around gtk_menu_button_get_align_widget().
-func (v *MenuButton) GetAlignWidget() *Widget {
+func (v *MenuButton) GetAlignWidget() (IWidget, error) {
 	c := C.gtk_menu_button_get_align_widget(v.native())
 	if c == nil {
-		return nil
+		return nil, nil
 	}
-	return wrapWidget(glib.Take(unsafe.Pointer(c)))
+	return castWidget(c)
 }
 
 /*
@@ -5625,6 +6448,10 @@ func marshalMenuItem(p uintptr) (interface{}, error) {
 }
 
 func wrapMenuItem(obj *glib.Object) *MenuItem {
+	if obj == nil {
+		return nil
+	}
+
 	return &MenuItem{Bin{Container{Widget{glib.InitiallyUnowned{obj}}}}}
 }
 
@@ -5664,6 +6491,16 @@ func (v *MenuItem) SetSubmenu(submenu IWidget) {
 	C.gtk_menu_item_set_submenu(v.native(), submenu.toWidget())
 }
 
+// GetSubmenu is a wrapper around gtk_menu_item_get_submenu().
+func (v *MenuItem) GetSubmenu() (IMenu, error) {
+	c := C.gtk_menu_item_get_submenu(v.native())
+	if c == nil {
+		return nil, nilPtrErr
+	}
+	obj := glib.Take(unsafe.Pointer(c))
+	return wrapMenu(obj), nil
+}
+
 // SetLabel is a wrapper around gtk_menu_item_set_label().
 func (v *MenuItem) SetLabel(label string) {
 	cstr := C.CString(label)
@@ -5688,15 +6525,43 @@ func (v *MenuItem) GetUseUnderline() bool {
 	return gobool(c)
 }
 
-// TODO:
-// gtk_menu_item_get_submenu().
-// gtk_menu_item_select().
-// gtk_menu_item_deselect().
-// gtk_menu_item_activate().
-// gtk_menu_item_toggle_size_request().
-// gtk_menu_item_toggle_size_allocate().
-// gtk_menu_item_get_reserve_indicator().
-// gtk_menu_item_set_reserve_indicator().
+// Select is a wrapper around gtk_menu_item_select()
+func (v *MenuItem) Select() {
+	C.gtk_menu_item_select(v.native())
+}
+
+// Deselect is a wrapper around gtk_menu_item_deselect()
+func (v *MenuItem) Deselect() {
+	C.gtk_menu_item_deselect(v.native())
+}
+
+// Activate is a wrapper around gtk_menu_item_activate()
+func (v *MenuItem) Activate() {
+	C.gtk_menu_item_activate(v.native())
+}
+
+// ToggleSizeRequest is a wrapper around gtk_menu_item_toggle_size_request()
+func (v *MenuItem) ToggleSizeRequest(requisition int) int {
+	cint := new(C.gint)
+	*cint = C.gint(requisition)
+	C.gtk_menu_item_toggle_size_request(v.native(), cint)
+	return int(*cint)
+}
+
+// ToggleSizeAllocate is a wrapper around gtk_menu_item_toggle_size_allocate()
+func (v *MenuItem) ToggleSizeAllocate(allocation int) {
+	C.gtk_menu_item_toggle_size_allocate(v.native(), C.gint(allocation))
+}
+
+// GetReserveIndicator is a wrapper around gtk_menu_item_get_reserve_indicator().
+func (v *MenuItem) GetReserveIndicator() bool {
+	return gobool(C.gtk_menu_item_get_reserve_indicator(v.native()))
+}
+
+// SetReserveIndicator is a wrapper around gtk_menu_item_set_reserve_indicator().
+func (v *MenuItem) SetReserveIndicator(reserve bool) {
+	C.gtk_menu_item_set_reserve_indicator(v.native(), gbool(reserve))
+}
 
 /*
  * GtkMessageDialog
@@ -5723,14 +6588,18 @@ func marshalMessageDialog(p uintptr) (interface{}, error) {
 }
 
 func wrapMessageDialog(obj *glib.Object) *MessageDialog {
+	if obj == nil {
+		return nil
+	}
+
 	return &MessageDialog{Dialog{Window{Bin{Container{Widget{glib.InitiallyUnowned{obj}}}}}}}
 }
 
 // MessageDialogNew() is a wrapper around gtk_message_dialog_new().
 // The text is created and formatted by the format specifier and any
 // additional arguments.
-func MessageDialogNew(parent IWindow, flags DialogFlags, mType MessageType, buttons ButtonsType, format string, a ...interface{}) *MessageDialog {
-	s := fmt.Sprintf(format, a...)
+func MessageDialogNew(parent IWindow, flags DialogFlags, mType MessageType, buttons ButtonsType, format string, args ...interface{}) *MessageDialog {
+	s := fmt.Sprintf(format, args...)
 	cstr := C.CString(s)
 	defer C.free(unsafe.Pointer(cstr))
 	var w *C.GtkWindow = nil
@@ -5745,8 +6614,8 @@ func MessageDialogNew(parent IWindow, flags DialogFlags, mType MessageType, butt
 
 // MessageDialogNewWithMarkup is a wrapper around
 // gtk_message_dialog_new_with_markup().
-func MessageDialogNewWithMarkup(parent IWindow, flags DialogFlags, mType MessageType, buttons ButtonsType, format string, a ...interface{}) *MessageDialog {
-	s := fmt.Sprintf(format, a...)
+func MessageDialogNewWithMarkup(parent IWindow, flags DialogFlags, mType MessageType, buttons ButtonsType, format string, args ...interface{}) *MessageDialog {
+	s := fmt.Sprintf(format, args...)
 	cstr := C.CString(s)
 	defer C.free(unsafe.Pointer(cstr))
 	var w *C.GtkWindow = nil
@@ -5768,8 +6637,8 @@ func (v *MessageDialog) SetMarkup(str string) {
 
 // FormatSecondaryText is a wrapper around
 // gtk_message_dialog_format_secondary_text().
-func (v *MessageDialog) FormatSecondaryText(format string, a ...interface{}) {
-	s := fmt.Sprintf(format, a...)
+func (v *MessageDialog) FormatSecondaryText(format string, args ...interface{}) {
+	s := fmt.Sprintf(format, args...)
 	cstr := C.CString(s)
 	defer C.free(unsafe.Pointer(cstr))
 	C._gtk_message_dialog_format_secondary_text(v.native(),
@@ -5778,8 +6647,8 @@ func (v *MessageDialog) FormatSecondaryText(format string, a ...interface{}) {
 
 // FormatSecondaryMarkup is a wrapper around
 // gtk_message_dialog_format_secondary_text().
-func (v *MessageDialog) FormatSecondaryMarkup(format string, a ...interface{}) {
-	s := fmt.Sprintf(format, a...)
+func (v *MessageDialog) FormatSecondaryMarkup(format string, args ...interface{}) {
+	s := fmt.Sprintf(format, args...)
 	cstr := C.CString(s)
 	defer C.free(unsafe.Pointer(cstr))
 	C._gtk_message_dialog_format_secondary_markup(v.native(),
@@ -5822,6 +6691,10 @@ func marshalNotebook(p uintptr) (interface{}, error) {
 }
 
 func wrapNotebook(obj *glib.Object) *Notebook {
+	if obj == nil {
+		return nil
+	}
+
 	return &Notebook{Container{Widget{glib.InitiallyUnowned{obj}}}}
 }
 
@@ -5941,21 +6814,21 @@ func (v *Notebook) GetCurrentPage() int {
 }
 
 // GetMenuLabel() is a wrapper around gtk_notebook_get_menu_label().
-func (v *Notebook) GetMenuLabel(child IWidget) (*Widget, error) {
+func (v *Notebook) GetMenuLabel(child IWidget) (IWidget, error) {
 	c := C.gtk_notebook_get_menu_label(v.native(), child.toWidget())
 	if c == nil {
-		return nil, nilPtrErr
+		return nil, nil
 	}
-	return wrapWidget(glib.Take(unsafe.Pointer(c))), nil
+	return castWidget(c)
 }
 
 // GetNthPage() is a wrapper around gtk_notebook_get_nth_page().
-func (v *Notebook) GetNthPage(pageNum int) (*Widget, error) {
+func (v *Notebook) GetNthPage(pageNum int) (IWidget, error) {
 	c := C.gtk_notebook_get_nth_page(v.native(), C.gint(pageNum))
 	if c == nil {
-		return nil, nilPtrErr
+		return nil, fmt.Errorf("page %d is out of bounds", pageNum)
 	}
-	return wrapWidget(glib.Take(unsafe.Pointer(c))), nil
+	return castWidget(c)
 }
 
 // GetNPages() is a wrapper around gtk_notebook_get_n_pages().
@@ -5965,12 +6838,12 @@ func (v *Notebook) GetNPages() int {
 }
 
 // GetTabLabel() is a wrapper around gtk_notebook_get_tab_label().
-func (v *Notebook) GetTabLabel(child IWidget) (*Widget, error) {
+func (v *Notebook) GetTabLabel(child IWidget) (IWidget, error) {
 	c := C.gtk_notebook_get_tab_label(v.native(), child.toWidget())
 	if c == nil {
-		return nil, nilPtrErr
+		return nil, nil
 	}
-	return wrapWidget(glib.Take(unsafe.Pointer(c))), nil
+	return castWidget(c)
 }
 
 // SetMenuLabel() is a wrapper around gtk_notebook_set_menu_label().
@@ -6095,13 +6968,12 @@ func (v *Notebook) SetActionWidget(widget IWidget, packType PackType) {
 }
 
 // GetActionWidget() is a wrapper around gtk_notebook_get_action_widget().
-func (v *Notebook) GetActionWidget(packType PackType) (*Widget, error) {
-	c := C.gtk_notebook_get_action_widget(v.native(),
-		C.GtkPackType(packType))
+func (v *Notebook) GetActionWidget(packType PackType) (IWidget, error) {
+	c := C.gtk_notebook_get_action_widget(v.native(), C.GtkPackType(packType))
 	if c == nil {
-		return nil, nilPtrErr
+		return nil, nil
 	}
-	return wrapWidget(glib.Take(unsafe.Pointer(c))), nil
+	return castWidget(c)
 }
 
 /*
@@ -6129,6 +7001,10 @@ func marshalOffscreenWindow(p uintptr) (interface{}, error) {
 }
 
 func wrapOffscreenWindow(obj *glib.Object) *OffscreenWindow {
+	if obj == nil {
+		return nil
+	}
+
 	return &OffscreenWindow{Window{Bin{Container{Widget{
 		glib.InitiallyUnowned{obj}}}}}}
 }
@@ -6200,6 +7076,10 @@ func marshalOrientable(p uintptr) (interface{}, error) {
 }
 
 func wrapOrientable(obj *glib.Object) *Orientable {
+	if obj == nil {
+		return nil
+	}
+
 	return &Orientable{obj}
 }
 
@@ -6240,6 +7120,10 @@ func marshalOverlay(p uintptr) (interface{}, error) {
 }
 
 func wrapOverlay(obj *glib.Object) *Overlay {
+	if obj == nil {
+		return nil
+	}
+
 	return &Overlay{Bin{Container{Widget{glib.InitiallyUnowned{obj}}}}}
 }
 
@@ -6282,6 +7166,10 @@ func marshalPaned(p uintptr) (interface{}, error) {
 }
 
 func wrapPaned(obj *glib.Object) *Paned {
+	if obj == nil {
+		return nil
+	}
+
 	return &Paned{Bin{Container{Widget{glib.InitiallyUnowned{obj}}}}}
 }
 
@@ -6320,21 +7208,21 @@ func (v *Paned) SetPosition(position int) {
 }
 
 // GetChild1() is a wrapper around gtk_paned_get_child1().
-func (v *Paned) GetChild1() (*Widget, error) {
+func (v *Paned) GetChild1() (IWidget, error) {
 	c := C.gtk_paned_get_child1(v.native())
 	if c == nil {
-		return nil, nilPtrErr
+		return nil, nil
 	}
-	return wrapWidget(glib.Take(unsafe.Pointer(c))), nil
+	return castWidget(c)
 }
 
 // GetChild2() is a wrapper around gtk_paned_get_child2().
-func (v *Paned) GetChild2() (*Widget, error) {
+func (v *Paned) GetChild2() (IWidget, error) {
 	c := C.gtk_paned_get_child2(v.native())
 	if c == nil {
-		return nil, nilPtrErr
+		return nil, nil
 	}
-	return wrapWidget(glib.Take(unsafe.Pointer(c))), nil
+	return castWidget(c)
 }
 
 // GetHandleWindow() is a wrapper around gtk_paned_get_handle_window().
@@ -6388,6 +7276,10 @@ func marshalProgressBar(p uintptr) (interface{}, error) {
 }
 
 func wrapProgressBar(obj *glib.Object) *ProgressBar {
+	if obj == nil {
+		return nil
+	}
+
 	o := wrapOrientable(obj)
 	return &ProgressBar{Widget{glib.InitiallyUnowned{obj}}, *o}
 }
@@ -6487,6 +7379,10 @@ func marshalRadioButton(p uintptr) (interface{}, error) {
 }
 
 func wrapRadioButton(obj *glib.Object) *RadioButton {
+	if obj == nil {
+		return nil
+	}
+
 	actionable := wrapActionable(obj)
 	return &RadioButton{CheckButton{ToggleButton{Button{Bin{Container{
 		Widget{glib.InitiallyUnowned{obj}}}}, actionable}}}}
@@ -6574,6 +7470,9 @@ func (v *RadioButton) GetGroup() (*glib.SList, error) {
 	if c == nil {
 		return nil, nilPtrErr
 	}
+
+	// TODO: call DataWrapper on SList and wrap them to gtk.RadioButton
+
 	return glib.WrapSList(uintptr(unsafe.Pointer(c))), nil
 }
 
@@ -6611,6 +7510,10 @@ func marshalRadioMenuItem(p uintptr) (interface{}, error) {
 }
 
 func wrapRadioMenuItem(obj *glib.Object) *RadioMenuItem {
+	if obj == nil {
+		return nil
+	}
+
 	return &RadioMenuItem{CheckMenuItem{MenuItem{Bin{Container{
 		Widget{glib.InitiallyUnowned{obj}}}}}}}
 }
@@ -6690,6 +7593,9 @@ func (v *RadioMenuItem) GetGroup() (*glib.SList, error) {
 	if c == nil {
 		return nil, nilPtrErr
 	}
+
+	// TODO: call DataWrapper on SList and wrap them to gtk.RadioMenuItem
+
 	return glib.WrapSList(uintptr(unsafe.Pointer(c))), nil
 }
 
@@ -6718,18 +7624,58 @@ func marshalRange(p uintptr) (interface{}, error) {
 }
 
 func wrapRange(obj *glib.Object) *Range {
+	if obj == nil {
+		return nil
+	}
+
 	return &Range{Widget{glib.InitiallyUnowned{obj}}}
 }
 
-// TODO:
-// gtk_range_get_fill_level().
-// gtk_range_get_restrict_to_fill_level().
-// gtk_range_get_show_fill_level().
-// gtk_range_set_fill_level().
-// gtk_range_set_restrict_to_fill_level().
-// gtk_range_set_show_fill_level().
-// gtk_range_get_adjustment().
-// gtk_range_set_adjustment().
+// GetFillLevel is a wrapper around gtk_range_get_fill_level().
+func (v *Range) GetFillLevel() float64 {
+	return float64(C.gtk_range_get_fill_level(v.native()))
+}
+
+// GetRestrictToFillLevel is a wrapper around gtk_range_get_restrict_to_fill_level().
+func (v *Range) GetRestrictToFillLevel() bool {
+	return gobool(C.gtk_range_get_restrict_to_fill_level(v.native()))
+}
+
+// GetShowFillLevel is a wrapper around gtk_range_get_show_fill_level().
+func (v *Range) GetShowFillLevel() bool {
+	return gobool(C.gtk_range_get_show_fill_level(v.native()))
+}
+
+// SetFillLevel is a wrapper around gtk_range_set_fill_level().
+func (v *Range) SetFillLevel(fill_level float64) {
+	C.gtk_range_set_fill_level(v.native(), C.gdouble(fill_level))
+}
+
+// RestrictToFillLevel is a wrapper around gtk_range_set_restrict_to_fill_level().
+func (v *Range) RestrictToFillLevel(restrict_to_fill_level bool) {
+	C.gtk_range_set_restrict_to_fill_level(v.native(), gbool(restrict_to_fill_level))
+}
+
+// SetShowFillLevel is a wrapper around gtk_range_set_show_fill_level().
+func (v *Range) SetShowFillLevel(show_fill_level bool) {
+	C.gtk_range_set_show_fill_level(v.native(), gbool(show_fill_level))
+}
+
+// GetAdjustment is a wrapper around gtk_range_get_adjustment().
+func (v *Range) GetAdjustment() *Adjustment {
+
+	c := C.gtk_range_get_adjustment(v.native())
+	if c == nil {
+		return nil
+	}
+	obj := glib.Take(unsafe.Pointer(c))
+	return wrapAdjustment(obj)
+}
+
+// SetAdjustment is a wrapper around gtk_range_set_adjustment().
+func (v *Range) SetAdjustment(adjustment *Adjustment) {
+	C.gtk_range_set_adjustment(v.native(), adjustment.native())
+}
 
 // GetValue is a wrapper around gtk_range_get_value().
 func (v *Range) GetValue() float64 {
@@ -6763,19 +7709,75 @@ func (v *Range) SetInverted(inverted bool) {
 	C.gtk_range_set_inverted(v.native(), gbool(inverted))
 }
 
-// TODO:
-// gtk_range_get_round_digits().
-// gtk_range_set_round_digits().
-// gtk_range_set_lower_stepper_sensitivity().
-// gtk_range_get_lower_stepper_sensitivity().
-// gtk_range_set_upper_stepper_sensitivity().
-// gtk_range_get_upper_stepper_sensitivity().
-// gtk_range_get_flippable().
-// gtk_range_set_flippable().
-// gtk_range_get_range_rect().
-// gtk_range_get_slider_range().
-// gtk_range_get_slider_size_fixed().
-// gtk_range_set_slider_size_fixed().
+// GetRoundDigits is a wrapper around gtk_range_get_round_digits().
+func (v *Range) GetRoundDigits() int {
+	return int(C.gtk_range_get_round_digits(v.native()))
+}
+
+// SetRoundDigits is a wrapper around gtk_range_set_round_digits().
+func (v *Range) SetRoundDigits(round_digits int) {
+	C.gtk_range_set_round_digits(v.native(), C.gint(round_digits))
+}
+
+// SetLowerStepperSensitivity is a wrapper around gtk_range_set_lower_stepper_sensitivity().
+func (v *Range) SetLowerStepperSensitivity(sensitivity SensitivityType) {
+	C.gtk_range_set_lower_stepper_sensitivity(
+		v.native(),
+		C.GtkSensitivityType(sensitivity))
+}
+
+// GetLowerStepperSensitivity is a wrapper around gtk_range_get_lower_stepper_sensitivity().
+func (v *Range) GetLowerStepperSensitivity() SensitivityType {
+	return SensitivityType(C.gtk_range_get_lower_stepper_sensitivity(
+		v.native()))
+}
+
+// SetUpperStepperSensitivity is a wrapper around gtk_range_set_upper_stepper_sensitivity().
+func (v *Range) SetUpperStepperSensitivity(sensitivity SensitivityType) {
+	C.gtk_range_set_upper_stepper_sensitivity(
+		v.native(),
+		C.GtkSensitivityType(sensitivity))
+}
+
+// GetUpperStepperSensitivity is a wrapper around gtk_range_get_upper_stepper_sensitivity().
+func (v *Range) GetUpperStepperSensitivity() SensitivityType {
+	return SensitivityType(C.gtk_range_get_upper_stepper_sensitivity(
+		v.native()))
+}
+
+// GetFlippable is a wrapper around gtk_range_get_flippable().
+func (v *Range) GetFlippable() bool {
+	return gobool(C.gtk_range_get_flippable(v.native()))
+}
+
+// SetFlippable is a wrapper around gtk_range_set_flippable().
+func (v *Range) SetFlippable(flippable bool) {
+	C.gtk_range_set_flippable(v.native(), gbool(flippable))
+}
+
+// GetRangeRect is a wrapper around gtk_range_get_range_rect().
+func (v *Range) GetRangeRect() *gdk.Rectangle {
+	var cRect *C.GdkRectangle
+	C.gtk_range_get_range_rect(v.native(), cRect)
+	return gdk.WrapRectangle(uintptr(unsafe.Pointer(cRect)))
+}
+
+// GetSliderRange is a wrapper around gtk_range_get_slider_range().
+func (v *Range) GetSliderRange() (int, int) {
+	var cStart, cEnd C.gint
+	C.gtk_range_get_slider_range(v.native(), &cStart, &cEnd)
+	return int(cStart), int(cEnd)
+}
+
+// GetSliderFixedSize is a wrapper gtk_range_get_slider_size_fixed().
+func (v *Range) GetSliderFixedSize() bool {
+	return gobool(C.gtk_range_get_slider_size_fixed(v.native()))
+}
+
+// SetSliderFixedSize is a wrapper around gtk_range_set_slider_size_fixed().
+func (v *Range) SetSliderFixedSize(size_fixed bool) {
+	C.gtk_range_set_slider_size_fixed(v.native(), gbool(size_fixed))
+}
 
 // IRecentChooser is an interface type implemented by all structs
 // embedding a RecentChooser.  It is meant to be used as an argument type
@@ -6804,6 +7806,10 @@ func (v *RecentChooser) native() *C.GtkRecentChooser {
 }
 
 func wrapRecentChooser(obj *glib.Object) *RecentChooser {
+	if obj == nil {
+		return nil
+	}
+
 	return &RecentChooser{obj}
 }
 
@@ -6852,6 +7858,10 @@ func (v *RecentChooserMenu) native() *C.GtkRecentChooserMenu {
 }
 
 func wrapRecentChooserMenu(obj *glib.Object) *RecentChooserMenu {
+	if obj == nil {
+		return nil
+	}
+
 	return &RecentChooserMenu{
 		Menu{MenuShell{Container{Widget{glib.InitiallyUnowned{obj}}}}},
 		RecentChooser{obj},
@@ -6877,6 +7887,10 @@ func (v *RecentFilter) native() *C.GtkRecentFilter {
 }
 
 func wrapRecentFilter(obj *glib.Object) *RecentFilter {
+	if obj == nil {
+		return nil
+	}
+
 	return &RecentFilter{glib.InitiallyUnowned{obj}}
 }
 
@@ -6914,6 +7928,10 @@ func marshalRecentManager(p uintptr) (interface{}, error) {
 }
 
 func wrapRecentManager(obj *glib.Object) *RecentManager {
+	if obj == nil {
+		return nil
+	}
+
 	return &RecentManager{obj}
 }
 
@@ -6961,6 +7979,10 @@ func marshalScale(p uintptr) (interface{}, error) {
 }
 
 func wrapScale(obj *glib.Object) *Scale {
+	if obj == nil {
+		return nil
+	}
+
 	return &Scale{Range{Widget{glib.InitiallyUnowned{obj}}}}
 }
 
@@ -7001,8 +8023,22 @@ func (v *Scale) SetDrawValue(drawValue bool) {
 // gtk_scale_get_value_pos().
 // gtk_scale_get_layout().
 // gtk_scale_get_layout_offsets().
-// gtk_scale_add_mark().
-// gtk_scale_clear_marks().
+
+// AddMark is a wrpaper around gtk_scale_add_mark.
+func (v *Scale) AddMark(value float64, pos PositionType, markup string) {
+	var markupchar *C.gchar
+	if markup != "" {
+		markupchar = (*C.gchar)(C.CString(markup))
+		defer C.free(unsafe.Pointer(markupchar))
+	}
+
+	C.gtk_scale_add_mark(v.native(), C.gdouble(value), C.GtkPositionType(pos), markupchar)
+}
+
+// ClearMarks is a wrapper around gtk_scale_clear_marks.
+func (v *Scale) ClearMarks() {
+	C.gtk_scale_clear_marks(v.native())
+}
 
 /*
  * GtkScaleButton
@@ -7029,6 +8065,10 @@ func marshalScaleButton(p uintptr) (interface{}, error) {
 }
 
 func wrapScaleButton(obj *glib.Object) *ScaleButton {
+	if obj == nil {
+		return nil
+	}
+
 	actionable := wrapActionable(obj)
 	return &ScaleButton{Button{Bin{Container{Widget{glib.InitiallyUnowned{obj}}}}, actionable}}
 }
@@ -7054,12 +8094,12 @@ func ScaleButtonNew(size IconSize, min, max, step float64, icons []string) (*Sca
 }
 
 // GetPopup is a wrapper around gtk_scale_button_get_popup().
-func (v *ScaleButton) GetPopup() (*Widget, error) {
+func (v *ScaleButton) GetPopup() (IWidget, error) {
 	c := C.gtk_scale_button_get_popup(v.native())
 	if c == nil {
 		return nil, nilPtrErr
 	}
-	return wrapWidget(glib.Take(unsafe.Pointer(c))), nil
+	return castWidget(c)
 }
 
 // GetValue is a wrapper around gtk_scale_button_get_value().
@@ -7092,23 +8132,21 @@ func (v *ScaleButton) SetAdjustment(adjustment *Adjustment) {
 }
 
 // GetPlusButton is a wrapper around gtk_scale_button_get_plus_button().
-func (v *ScaleButton) GetPlusButton() *Widget {
+func (v *ScaleButton) GetPlusButton() (IWidget, error) {
 	c := C.gtk_scale_button_get_plus_button(v.native())
 	if c == nil {
-		return nil
+		return nil, nilPtrErr
 	}
-	obj := glib.Take(unsafe.Pointer(c))
-	return wrapWidget(obj)
+	return castWidget(c)
 }
 
 // GetMinusButton is a wrapper around gtk_scale_button_get_minus_button().
-func (v *ScaleButton) GetMinusButton() *Widget {
+func (v *ScaleButton) GetMinusButton() (IWidget, error) {
 	c := C.gtk_scale_button_get_minus_button(v.native())
 	if c == nil {
-		return nil
+		return nil, nilPtrErr
 	}
-	obj := glib.Take(unsafe.Pointer(c))
-	return wrapWidget(obj)
+	return castWidget(c)
 }
 
 /*
@@ -7138,6 +8176,10 @@ func (v *Scrollable) native() *C.GtkScrollable {
 }
 
 func wrapScrollable(obj *glib.Object) *Scrollable {
+	if obj == nil {
+		return nil
+	}
+
 	return &Scrollable{obj}
 }
 
@@ -7201,6 +8243,10 @@ func marshalScrollbar(p uintptr) (interface{}, error) {
 }
 
 func wrapScrollbar(obj *glib.Object) *Scrollbar {
+	if obj == nil {
+		return nil
+	}
+
 	return &Scrollbar{Range{Widget{glib.InitiallyUnowned{obj}}}}
 }
 
@@ -7238,6 +8284,10 @@ func marshalScrolledWindow(p uintptr) (interface{}, error) {
 }
 
 func wrapScrolledWindow(obj *glib.Object) *ScrolledWindow {
+	if obj == nil {
+		return nil
+	}
+
 	return &ScrolledWindow{Bin{Container{Widget{glib.InitiallyUnowned{obj}}}}}
 }
 
@@ -7251,6 +8301,14 @@ func ScrolledWindowNew(hadjustment, vadjustment *Adjustment) (*ScrolledWindow, e
 	return wrapScrolledWindow(glib.Take(unsafe.Pointer(c))), nil
 }
 
+// GetPolicy() is a wrapper around gtk_scrolled_window_get_policy().
+func (v *ScrolledWindow) GetPolicy() (hScrollbarPolicy, vScrollbarPolicy PolicyType) {
+	var hScrPol, vScrPol C.GtkPolicyType
+	C.gtk_scrolled_window_get_policy(v.native(), &hScrPol, &vScrPol)
+	hScrollbarPolicy, vScrollbarPolicy = PolicyType(hScrPol), PolicyType(vScrPol)
+	return
+}
+
 // SetPolicy() is a wrapper around gtk_scrolled_window_set_policy().
 func (v *ScrolledWindow) SetPolicy(hScrollbarPolicy, vScrollbarPolicy PolicyType) {
 	C.gtk_scrolled_window_set_policy(v.native(),
@@ -7286,14 +8344,39 @@ func (v *ScrolledWindow) SetVAdjustment(adjustment *Adjustment) {
 	C.gtk_scrolled_window_set_vadjustment(v.native(), adjustment.native())
 }
 
-// TODO:
-// gtk_scrolled_window_get_hscrollbar().
-// gtk_scrolled_window_get_vscrollbar().
-// gtk_scrolled_window_get_policy().
-// gtk_scrolled_window_get_placement().
-// gtk_scrolled_window_set_placement().
-// gtk_scrolled_window_unset_placement().
+// GetHScrollbar is a wrapper around gtk_scrolled_window_get_hscrollbar().
+func (v *ScrolledWindow) GetHScrollbar() *Scrollbar {
+	c := C.gtk_scrolled_window_get_hscrollbar(v.native())
+	if c == nil {
+		return nil
+	}
+	return wrapScrollbar(glib.Take(unsafe.Pointer(c)))
+}
 
+// GetVScrollbar is a wrapper around gtk_scrolled_window_get_vscrollbar().
+func (v *ScrolledWindow) GetVScrollbar() *Scrollbar {
+	c := C.gtk_scrolled_window_get_vscrollbar(v.native())
+	if c == nil {
+		return nil
+	}
+	return wrapScrollbar(glib.Take(unsafe.Pointer(c)))
+}
+
+// GetPlacement is a wrapper around gtk_scrolled_window_get_placement().
+func (v *ScrolledWindow) GetPlacement() CornerType {
+	c := C.gtk_scrolled_window_get_placement(v.native())
+	return CornerType(c)
+}
+
+// SetPlacement is a wrapper around gtk_scrolled_window_set_placement().
+func (v *ScrolledWindow) SetPlacement(windowPlacement CornerType) {
+	C.gtk_scrolled_window_set_placement(v.native(), C.GtkCornerType(windowPlacement))
+}
+
+// UnsetPlacement is a wrapper around gtk_scrolled_window_unset_placement().
+func (v *ScrolledWindow) UnsetPlacement() {
+	C.gtk_scrolled_window_unset_placement(v.native())
+}
 
 // GetShadowType is a wrapper around gtk_scrolled_window_get_shadow_type().
 func (v *ScrolledWindow) GetShadowType() ShadowType {
@@ -7306,15 +8389,49 @@ func (v *ScrolledWindow) SetShadowType(t ShadowType) {
 	C.gtk_scrolled_window_set_shadow_type(v.native(), C.GtkShadowType(t))
 }
 
-// TODO:
-// gtk_scrolled_window_get_kinetic_scrolling().
-// gtk_scrolled_window_set_kinetic_scrolling().
-// gtk_scrolled_window_get_capture_button_press().
-// gtk_scrolled_window_set_capture_button_press().
-// gtk_scrolled_window_get_min_content_width().
-// gtk_scrolled_window_set_min_content_width().
-// gtk_scrolled_window_get_min_content_height().
-// gtk_scrolled_window_set_min_content_height().
+// GetKineticScrolling is a wrapper around gtk_scrolled_window_get_kinetic_scrolling().
+func (v *ScrolledWindow) GetKineticScrolling() bool {
+	c := C.gtk_scrolled_window_get_kinetic_scrolling(v.native())
+	return gobool(c)
+}
+
+// SetKineticScrolling is a wrapper around gtk_scrolled_window_set_kinetic_scrolling().
+func (v *ScrolledWindow) SetKineticScrolling(kineticScrolling bool) {
+	C.gtk_scrolled_window_set_kinetic_scrolling(v.native(), gbool(kineticScrolling))
+}
+
+// GetCaptureButtonPress is a wrapper around gtk_scrolled_window_get_capture_button_press().
+func (v *ScrolledWindow) GetCaptureButtonPress() bool {
+	c := C.gtk_scrolled_window_get_capture_button_press(v.native())
+	return gobool(c)
+}
+
+// SetCaptureButtonPress is a wrapper around gtk_scrolled_window_set_capture_button_press().
+func (v *ScrolledWindow) SetCaptureButtonPress(captureButtonPress bool) {
+	C.gtk_scrolled_window_set_capture_button_press(v.native(), gbool(captureButtonPress))
+}
+
+// GetMinContentWidth is a wrapper around gtk_scrolled_window_get_min_content_width().
+func (v *ScrolledWindow) GetMinContentWidth() int {
+	c := C.gtk_scrolled_window_get_min_content_width(v.native())
+	return int(c)
+}
+
+// SetMinContentWidth is a wrapper around gtk_scrolled_window_set_min_content_width().
+func (v *ScrolledWindow) SetMinContentWidth(width int) {
+	C.gtk_scrolled_window_set_min_content_width(v.native(), C.gint(width))
+}
+
+// GetMinContentHeight is a wrapper around gtk_scrolled_window_get_min_content_height().
+func (v *ScrolledWindow) GetMinContentHeight() int {
+	c := C.gtk_scrolled_window_get_min_content_height(v.native())
+	return int(c)
+}
+
+// SetMinContentHeight is a wrapper around gtk_scrolled_window_set_min_content_height().
+func (v *ScrolledWindow) SetMinContentHeight(width int) {
+	C.gtk_scrolled_window_set_min_content_height(v.native(), C.gint(width))
+}
 
 /*
  * GtkSearchEntry
@@ -7341,8 +8458,13 @@ func marshalSearchEntry(p uintptr) (interface{}, error) {
 }
 
 func wrapSearchEntry(obj *glib.Object) *SearchEntry {
+	if obj == nil {
+		return nil
+	}
+
 	e := wrapEditable(obj)
-	return &SearchEntry{Entry{Widget{glib.InitiallyUnowned{obj}}, *e}}
+	ce := wrapCellEditable(obj)
+	return &SearchEntry{Entry{Widget{glib.InitiallyUnowned{obj}}, *e, *ce}}
 }
 
 // SearchEntryNew is a wrapper around gtk_search_entry_new().
@@ -7354,9 +8476,6 @@ func SearchEntryNew() (*SearchEntry, error) {
 	return wrapSearchEntry(glib.Take(unsafe.Pointer(c))), nil
 }
 
-// TODO:
-// gtk_search_entry_handle_event().
-
 /*
 * GtkSelectionData
  */
@@ -7374,59 +8493,160 @@ func (v *SelectionData) native() *C.GtkSelectionData {
 	if v == nil {
 		return nil
 	}
-	return v.GtkSelectionData
+
+	// I don't understand why we need this, but we do.
+	c := (*C.GValue)(unsafe.Pointer(v))
+	p := (*C.GtkSelectionData)(unsafe.Pointer(c))
+	return p
 }
 
-// GetLength is a wrapper around gtk_selection_data_get_length
+// GetLength is a wrapper around gtk_selection_data_get_length().
 func (v *SelectionData) GetLength() int {
 	return int(C.gtk_selection_data_get_length(v.native()))
 }
 
-// GetData is a wrapper around gtk_selection_data_get_data_with_length.
-// It returns a slice of the correct size with the selection's data.
-func (v *SelectionData) GetData() (data []byte) {
+// GetData is a wrapper around gtk_selection_data_get_data_with_length().
+// It returns a slice of the correct size with the copy of the selection's data.
+func (v *SelectionData) GetData() []byte {
 	var length C.gint
 	c := C.gtk_selection_data_get_data_with_length(v.native(), &length)
+
+	// Only set if length is valid.
+	if int(length) < 1 {
+		return nil
+	}
+
+	var data []byte
 	sliceHeader := (*reflect.SliceHeader)(unsafe.Pointer(&data))
-	sliceHeader.Data = uintptr(unsafe.Pointer(c))
 	sliceHeader.Len = int(length)
 	sliceHeader.Cap = int(length)
-	return
+	sliceHeader.Data = uintptr(unsafe.Pointer(c))
+
+	// Keep the SelectionData alive for as long as the byte slice is.
+	runtime.SetFinalizer(&data, func(*[]byte) {
+		runtime.KeepAlive(v)
+	})
+
+	return data
 }
 
-//fixed GetData directly from ptr
-func GetData(pointer uintptr) (data []byte) {
-	c := (*C.GValue)(unsafe.Pointer(pointer))
-	p := (*C.GtkSelectionData)(unsafe.Pointer(c))
-	C.gtk_selection_data_get_text(p)
+// SetData is a wrapper around gtk_selection_data_set_data_with_length().
+func (v *SelectionData) SetData(atom gdk.Atom, data []byte) {
+	C.gtk_selection_data_set(
+		v.native(),
+		C.GdkAtom(unsafe.Pointer(atom)),
+		C.gint(8), (*C.guchar)(&data[0]), C.gint(len(data)),
+	)
+}
 
-	var byteData []byte
-	var length C.gint
-	cptr := C.gtk_selection_data_get_data_with_length(p, &length)
-	sliceHeader := (*reflect.SliceHeader)(unsafe.Pointer(&byteData))
-	sliceHeader.Data = uintptr(unsafe.Pointer(cptr))
-	sliceHeader.Len = int(length)
-	sliceHeader.Cap = int(length)
+// GetText is a wrapper around gtk_selection_data_get_text(). It returns a copy
+// of the string from SelectionData and frees the C reference.
+func (v *SelectionData) GetText() string {
+	charptr := C.gtk_selection_data_get_text(v.native())
+	if charptr == nil {
+		return ""
+	}
 
-	return byteData
+	defer C.g_free(C.gpointer(charptr))
+
+	return ucharString(charptr)
 }
 
-//for "drag-data-get"
-func SetData(pointer uintptr, atom gdk.Atom, data []byte) {
-	c := (*C.GValue)(unsafe.Pointer(pointer))
-	p := (*C.GtkSelectionData)(unsafe.Pointer(c))
-	C.gtk_selection_data_set(p, C.GdkAtom(unsafe.Pointer(atom)), C.gint(8), (*C.guchar)(unsafe.Pointer(&data[0])), C.gint(len(data)))
+// SetText is a wrapper around gtk_selection_data_set_text().
+func (v *SelectionData) SetText(text string) bool {
+	textPtr := *(*[]byte)(unsafe.Pointer(&text))
+
+	return gobool(C.gtk_selection_data_set_text(
+		v.native(),
+		// https://play.golang.org/p/PmGaLDhRuEU
+		// This is probably safe since we expect Gdk to copy the string anyway.
+		(*C.gchar)(unsafe.Pointer(&textPtr[0])), C.int(len(text)),
+	))
+}
+
+// SetPixbuf is a wrapper around gtk_selection_data_set_pixbuf().
+func (v *SelectionData) SetPixbuf(pixbuf *gdk.Pixbuf) bool {
+	return gobool(C.gtk_selection_data_set_pixbuf(
+		v.native(),
+		(*C.GdkPixbuf)(unsafe.Pointer(pixbuf.Native())),
+	))
+}
+
+// GetPixbuf is a wrapper around gtk_selection_data_get_pixbuf(). It returns nil
+// if the data is a recognized image type that could be converted to a new
+// Pixbuf.
+func (v *SelectionData) GetPixbuf() *gdk.Pixbuf {
+	c := C.gtk_selection_data_get_pixbuf(v.native())
+	if c == nil {
+		return nil
+	}
+
+	obj := &glib.Object{glib.ToGObject(unsafe.Pointer(c))}
+	p := &gdk.Pixbuf{obj}
+	runtime.SetFinalizer(p, func(_ interface{}) { obj.Unref() })
+
+	return p
+}
+
+// SetURIs is a wrapper around gtk_selection_data_set_uris().
+func (v *SelectionData) SetURIs(uris []string) bool {
+	var clist = C.make_strings(C.int(len(uris)))
+	for i := range uris {
+		cstring := C.CString(uris[i])
+		// This defer will only run once the function exits, not once the loop
+		// exits, so it's perfectly fine.
+		defer C.free(unsafe.Pointer(cstring))
+
+		C.set_string(clist, C.int(i), (*C.gchar)(cstring))
+	}
+
+	return gobool(C.gtk_selection_data_set_uris(v.native(), clist))
+}
+
+// GetURIs is a wrapper around gtk_selection_data_get_uris().
+func (v *SelectionData) GetURIs() []string {
+	uriPtrs := C.gtk_selection_data_get_uris(v.native())
+	return toGoStringArray(uriPtrs)
 }
 
 func (v *SelectionData) free() {
 	C.gtk_selection_data_free(v.native())
 }
 
-//for "drag-begin" event
-func DragSetIconPixbuf(context *gdk.DragContext, pixbuf *gdk.Pixbuf, hot_x int, hot_y int) {
+// DragSetIconPixbuf is used for the "drag-begin" event. It is a wrapper around
+// gtk_drag_set_icon_pixbuf().
+func DragSetIconPixbuf(context *gdk.DragContext, pixbuf *gdk.Pixbuf, hotX, hotY int) {
 	ctx := unsafe.Pointer(context.Native())
 	pix := unsafe.Pointer(pixbuf.Native())
-	C.gtk_drag_set_icon_pixbuf((*C.GdkDragContext)(ctx), (*C.GdkPixbuf)(pix), C.gint(hot_x), C.gint(hot_y))
+	C.gtk_drag_set_icon_pixbuf((*C.GdkDragContext)(ctx), (*C.GdkPixbuf)(pix), C.gint(hotX), C.gint(hotY))
+}
+
+// DragSetIconWidget is a wrapper around gtk_drag_set_icon_widget().
+func DragSetIconWidget(context *gdk.DragContext, w IWidget, hotX, hotY int) {
+	ctx := unsafe.Pointer(context.Native())
+	C.gtk_drag_set_icon_widget((*C.GdkDragContext)(ctx), w.toWidget(), C.gint(hotX), C.gint(hotY))
+}
+
+// DragSetIconSurface is a wrapper around gtk_drag_set_icon_surface().
+func DragSetIconSurface(context *gdk.DragContext, surface *cairo.Surface) {
+	ctx := unsafe.Pointer(context.Native())
+	sur := unsafe.Pointer(surface.Native())
+	C.gtk_drag_set_icon_surface((*C.GdkDragContext)(ctx), (*C.cairo_surface_t)(sur))
+}
+
+// DragSetIconName is a wrapper around gtk_drag_set_icon_name().
+func DragSetIconName(context *gdk.DragContext, iconName string, hotX, hotY int) {
+	ctx := unsafe.Pointer(context.Native())
+	ico := (*C.gchar)(C.CString(iconName))
+	defer C.free(unsafe.Pointer(ico))
+
+	C.gtk_drag_set_icon_name((*C.GdkDragContext)(ctx), ico, C.gint(hotX), C.gint(hotY))
+}
+
+// DragSetIconDefault is a wrapper around gtk_drag_set_icon_default().
+func DragSetIconDefault(context *gdk.DragContext) {
+	ctx := unsafe.Pointer(context.Native())
+	C.gtk_drag_set_icon_default((*C.GdkDragContext)(ctx))
 }
 
 /*
@@ -7454,6 +8674,10 @@ func marshalSeparator(p uintptr) (interface{}, error) {
 }
 
 func wrapSeparator(obj *glib.Object) *Separator {
+	if obj == nil {
+		return nil
+	}
+
 	return &Separator{Widget{glib.InitiallyUnowned{obj}}}
 }
 
@@ -7491,6 +8715,10 @@ func marshalSeparatorMenuItem(p uintptr) (interface{}, error) {
 }
 
 func wrapSeparatorMenuItem(obj *glib.Object) *SeparatorMenuItem {
+	if obj == nil {
+		return nil
+	}
+
 	return &SeparatorMenuItem{MenuItem{Bin{Container{Widget{glib.InitiallyUnowned{obj}}}}}}
 }
 
@@ -7528,6 +8756,10 @@ func marshalSeparatorToolItem(p uintptr) (interface{}, error) {
 }
 
 func wrapSeparatorToolItem(obj *glib.Object) *SeparatorToolItem {
+	if obj == nil {
+		return nil
+	}
+
 	return &SeparatorToolItem{ToolItem{Bin{Container{Widget{
 		glib.InitiallyUnowned{obj}}}}}}
 }
@@ -7577,6 +8809,10 @@ func marshalSizeGroup(p uintptr) (interface{}, error) {
 }
 
 func wrapSizeGroup(obj *glib.Object) *SizeGroup {
+	if obj == nil {
+		return nil
+	}
+
 	return &SizeGroup{obj}
 }
 
@@ -7610,6 +8846,10 @@ func (v *SizeGroup) GetWidgets() *glib.SList {
 	if c == nil {
 		return nil
 	}
+
+	// TODO: call DataWrapper on SList and wrap them to gtk.IWidget
+	// see (v *Container) GetFocusChain()
+
 	return glib.WrapSList(uintptr(unsafe.Pointer(c)))
 }
 
@@ -7620,6 +8860,7 @@ func (v *SizeGroup) GetWidgets() *glib.SList {
 // SpinButton is a representation of GTK's GtkSpinButton.
 type SpinButton struct {
 	Entry
+	Orientable
 }
 
 // native returns a pointer to the underlying GtkSpinButton.
@@ -7638,8 +8879,14 @@ func marshalSpinButton(p uintptr) (interface{}, error) {
 }
 
 func wrapSpinButton(obj *glib.Object) *SpinButton {
+	if obj == nil {
+		return nil
+	}
+
 	e := wrapEditable(obj)
-	return &SpinButton{Entry{Widget{glib.InitiallyUnowned{obj}}, *e}}
+	ce := wrapCellEditable(obj)
+	o := wrapOrientable(obj)
+	return &SpinButton{Entry{Widget{glib.InitiallyUnowned{obj}}, *e, *ce}, *o}
 }
 
 // Configure is a wrapper around gtk_spin_button_configure().
@@ -7668,8 +8915,10 @@ func SpinButtonNewWithRange(min, max, step float64) (*SpinButton, error) {
 	return wrapSpinButton(glib.Take(unsafe.Pointer(c))), nil
 }
 
-// TODO:
-// gtk_spin_button_set_adjustment().
+// SetAdjustment() is a wrapper around gtk_spin_button_set_adjustment().
+func (v *SpinButton) SetAdjustment(adjustment *Adjustment) {
+	C.gtk_spin_button_set_adjustment(v.native(), adjustment.native())
+}
 
 // GetAdjustment() is a wrapper around gtk_spin_button_get_adjustment
 func (v *SpinButton) GetAdjustment() *Adjustment {
@@ -7680,8 +8929,10 @@ func (v *SpinButton) GetAdjustment() *Adjustment {
 	return wrapAdjustment(glib.Take(unsafe.Pointer(c)))
 }
 
-// TODO:
-// gtk_spin_button_set_digits().
+// SetDigits() is a wrapper around gtk_spin_button_set_digits().
+func (v *SpinButton) SetDigits(digits uint) {
+	C.gtk_spin_button_set_digits(v.native(), C.guint(digits))
+}
 
 // SetIncrements() is a wrapper around gtk_spin_button_set_increments().
 func (v *SpinButton) SetIncrements(step, page float64) {
@@ -7710,18 +8961,51 @@ func (v *SpinButton) GetValueAsInt() int {
 	return int(c)
 }
 
-// gtk_spin_button_set_update_policy().
-// gtk_spin_button_set_numeric().
-// gtk_spin_button_spin().
-// gtk_spin_button_set_wrap().
-// gtk_spin_button_set_snap_to_ticks().
-// gtk_spin_button_update().
-// gtk_spin_button_get_digits().
+// SetUpdatePolicy() is a wrapper around gtk_spin_button_set_update_policy().
+func (v *SpinButton) SetUpdatePolicy(policy SpinButtonUpdatePolicy) {
+	C.gtk_spin_button_set_update_policy(
+		v.native(),
+		C.GtkSpinButtonUpdatePolicy(policy))
+}
+
+// SetNumeric() is a wrapper around gtk_spin_button_set_numeric().
+func (v *SpinButton) SetNumeric(numeric bool) {
+	C.gtk_spin_button_set_numeric(v.native(), gbool(numeric))
+}
+
+// Spin() is a wrapper around gtk_spin_button_spin().
+func (v *SpinButton) Spin(direction SpinType, increment float64) {
+	C.gtk_spin_button_spin(
+		v.native(),
+		C.GtkSpinType(direction),
+		C.gdouble(increment))
+}
+
+// gtk_spin_button_set_wrap().
+// gtk_spin_button_set_snap_to_ticks().
+
+// Update() is a wrapper around gtk_spin_button_update().
+func (v *SpinButton) Update() {
+	C.gtk_spin_button_update(v.native())
+}
+
+// GetDigits() is a wrapper around gtk_spin_button_get_digits().
+func (v *SpinButton) GetDigits() uint {
+	return uint(C.gtk_spin_button_get_digits(v.native()))
+}
+
 // gtk_spin_button_get_increments().
 // gtk_spin_button_get_numeric().
 // gtk_spin_button_get_range().
 // gtk_spin_button_get_snap_to_ticks().
-// gtk_spin_button_get_update_policy().
+
+// GetUpdatePolicy() is a wrapper around gtk_spin_button_get_update_policy().
+func (v *SpinButton) GetUpdatePolicy() SpinButtonUpdatePolicy {
+	return SpinButtonUpdatePolicy(
+		C.gtk_spin_button_get_update_policy(
+			v.native()))
+}
+
 // gtk_spin_button_get_wrap().
 
 /*
@@ -7749,6 +9033,10 @@ func marshalSpinner(p uintptr) (interface{}, error) {
 }
 
 func wrapSpinner(obj *glib.Object) *Spinner {
+	if obj == nil {
+		return nil
+	}
+
 	return &Spinner{Widget{glib.InitiallyUnowned{obj}}}
 }
 
@@ -7796,6 +9084,10 @@ func marshalStatusbar(p uintptr) (interface{}, error) {
 }
 
 func wrapStatusbar(obj *glib.Object) *Statusbar {
+	if obj == nil {
+		return nil
+	}
+
 	return &Statusbar{Box{Container{Widget{glib.InitiallyUnowned{obj}}}}}
 }
 
@@ -7870,6 +9162,10 @@ func marshalSwitch(p uintptr) (interface{}, error) {
 }
 
 func wrapSwitch(obj *glib.Object) *Switch {
+	if obj == nil {
+		return nil
+	}
+
 	return &Switch{Widget{glib.InitiallyUnowned{obj}}}
 }
 
@@ -7951,16 +9247,27 @@ func marshalTextTag(p uintptr) (interface{}, error) {
 }
 
 func wrapTextTag(obj *glib.Object) *TextTag {
+	if obj == nil {
+		return nil
+	}
+
 	return &TextTag{obj}
 }
 
+// TextTagNew is a wrapper around gtk_text_tag_new(). If name is empty, then the
+// tag is anonymous.
 func TextTagNew(name string) (*TextTag, error) {
-	cname := C.CString(name)
-	defer C.free(unsafe.Pointer(cname))
-	c := C.gtk_text_tag_new((*C.gchar)(cname))
+	var gchar *C.gchar
+	if name != "" {
+		gchar = (*C.gchar)(C.CString(name))
+		defer C.free(unsafe.Pointer(gchar))
+	}
+
+	c := C.gtk_text_tag_new(gchar)
 	if c == nil {
 		return nil, nilPtrErr
 	}
+
 	return wrapTextTag(glib.Take(unsafe.Pointer(c))), nil
 }
 
@@ -8008,6 +9315,10 @@ func marshalTextTagTable(p uintptr) (interface{}, error) {
 }
 
 func wrapTextTagTable(obj *glib.Object) *TextTagTable {
+	if obj == nil {
+		return nil
+	}
+
 	return &TextTagTable{obj}
 }
 
@@ -8066,6 +9377,10 @@ func marshalTextBuffer(p uintptr) (interface{}, error) {
 }
 
 func wrapTextBuffer(obj *glib.Object) *TextBuffer {
+	if obj == nil {
+		return nil
+	}
+
 	return &TextBuffer{obj}
 }
 
@@ -8101,9 +9416,12 @@ func (v *TextBuffer) SelectRange(start, end *TextIter) {
 // CreateChildAnchor() is a wrapper around gtk_text_buffer_create_child_anchor().
 // Since it copies garbage from the stack into the padding bytes of iter,
 // iter can't be reliably reused after this call unless GODEBUG=cgocheck=0.
-func (v *TextBuffer) CreateChildAnchor(iter *TextIter) *TextChildAnchor {
-	ret := C.gtk_text_buffer_create_child_anchor(v.native(), iter.native())
-	return (*TextChildAnchor)(ret)
+func (v *TextBuffer) CreateChildAnchor(iter *TextIter) (*TextChildAnchor, error) {
+	c := C.gtk_text_buffer_create_child_anchor(v.native(), iter.native())
+	if c == nil {
+		return nil, nilPtrErr
+	}
+	return wrapTextChildAnchor(glib.Take(unsafe.Pointer(c))), nil
 }
 
 // Delete() is a wrapper around gtk_text_buffer_delete().
@@ -8245,7 +9563,7 @@ func (v *TextBuffer) SetText(text string) {
 // GetIterAtMark() is a wrapper around gtk_text_buffer_get_iter_at_mark().
 func (v *TextBuffer) GetIterAtMark(mark *TextMark) *TextIter {
 	var iter C.GtkTextIter
-	C.gtk_text_buffer_get_iter_at_mark(v.native(), &iter, (*C.GtkTextMark)(mark))
+	C.gtk_text_buffer_get_iter_at_mark(v.native(), &iter, mark.native())
 	return (*TextIter)(&iter)
 }
 
@@ -8254,7 +9572,7 @@ func (v *TextBuffer) CreateMark(mark_name string, where *TextIter, left_gravity
 	cstr := C.CString(mark_name)
 	defer C.free(unsafe.Pointer(cstr))
 	ret := C.gtk_text_buffer_create_mark(v.native(), (*C.gchar)(cstr), (*C.GtkTextIter)(where), gbool(left_gravity))
-	return (*TextMark)(ret)
+	return wrapTextMark(glib.Take(unsafe.Pointer(ret)))
 }
 
 // GetMark() is a wrapper around gtk_text_buffer_get_mark().
@@ -8262,12 +9580,12 @@ func (v *TextBuffer) GetMark(mark_name string) *TextMark {
 	cstr := C.CString(mark_name)
 	defer C.free(unsafe.Pointer(cstr))
 	ret := C.gtk_text_buffer_get_mark(v.native(), (*C.gchar)(cstr))
-	return (*TextMark)(ret)
+	return wrapTextMark(glib.Take(unsafe.Pointer(ret)))
 }
 
 // DeleteMark() is a wrapper around gtk_text_buffer_delete_mark()
 func (v *TextBuffer) DeleteMark(mark *TextMark) {
-	C.gtk_text_buffer_delete_mark(v.native(), (*C.GtkTextMark)(mark))
+	C.gtk_text_buffer_delete_mark(v.native(), mark.native())
 }
 
 // DeleteMarkByName() is a wrapper around  gtk_text_buffer_delete_mark_by_name()
@@ -8296,7 +9614,7 @@ func (v *TextBuffer) DeleteSelection(interactive, defaultEditable bool) bool {
 // GetSelectionBound() is a wrapper around gtk_text_buffer_get_selection_bound().
 func (v *TextBuffer) GetSelectionBound() *TextMark {
 	ret := C.gtk_text_buffer_get_selection_bound(v.native())
-	return (*TextMark)(ret)
+	return wrapTextMark(glib.Take(unsafe.Pointer(ret)))
 }
 
 // GetSelectionBounds() is a wrapper around gtk_text_buffer_get_selection_bounds().
@@ -8387,7 +9705,7 @@ func (v *TextBuffer) Deserialize(contentBuffer *TextBuffer, format gdk.Atom, ite
 // GetInsert() is a wrapper around gtk_text_buffer_get_insert().
 func (v *TextBuffer) GetInsert() *TextMark {
 	ret := C.gtk_text_buffer_get_insert(v.native())
-	return (*TextMark)(ret)
+	return wrapTextMark(glib.Take(unsafe.Pointer(ret)))
 }
 
 // CopyClipboard() is a wrapper around gtk_text_buffer_copy_clipboard().
@@ -8422,6 +9740,74 @@ func (v *TextBuffer) GetIterAtLineIndex(lineNumber, charIndex int) (iter *TextIt
 	return
 }
 
+// InsertInteractiveAtCursor() is a wrapper around gtk_text_buffer_insert_interactive_at_cursor().
+func (v *TextBuffer) InsertInteractiveAtCursor(text string, editable bool) bool {
+	cstr := C.CString(text)
+	defer C.free(unsafe.Pointer(cstr))
+
+	return gobool(C.gtk_text_buffer_insert_interactive_at_cursor(
+		v.native(),
+		(*C.gchar)(cstr),
+		C.gint(len(text)),
+		gbool(editable)))
+}
+
+// InsertInteractive() is a wrapper around gtk_text_buffer_insert_interactive().
+func (v *TextBuffer) InsertInteractive(iter *TextIter, text string, editable bool) bool {
+	cstr := C.CString(text)
+	defer C.free(unsafe.Pointer(cstr))
+
+	return gobool(C.gtk_text_buffer_insert_interactive(
+		v.native(),
+		(*C.GtkTextIter)(iter),
+		(*C.gchar)(cstr),
+		C.gint(len(text)),
+		gbool(editable)))
+}
+
+// InsertRangeInteractive() is a wrapper around gtk_text_buffer_insert_range_interactive().
+func (v *TextBuffer) InsertRangeInteractive(iter, start, end *TextIter, editable bool) bool {
+
+	return gobool(C.gtk_text_buffer_insert_range_interactive(
+		v.native(),
+		(*C.GtkTextIter)(iter),
+		(*C.GtkTextIter)(start),
+		(*C.GtkTextIter)(end),
+		gbool(editable)))
+}
+
+// InsertRange() is a wrapper around gtk_text_buffer_insert_range().
+func (v *TextBuffer) InsertRange(iter, start, end *TextIter) {
+
+	C.gtk_text_buffer_insert_range(
+		v.native(),
+		(*C.GtkTextIter)(iter),
+		(*C.GtkTextIter)(start),
+		(*C.GtkTextIter)(end))
+}
+
+// DeleteInteractive() is a wrapper around gtk_text_buffer_delete_interactive().
+func (v *TextBuffer) DeleteInteractive(start, end *TextIter, editable bool) bool {
+
+	return gobool(C.gtk_text_buffer_delete_interactive(
+		v.native(),
+		(*C.GtkTextIter)(start),
+		(*C.GtkTextIter)(end),
+		gbool(editable)))
+}
+
+// BeginUserAction() is a wrapper around gtk_text_buffer_begin_user_action().
+func (v *TextBuffer) BeginUserAction() {
+
+	C.gtk_text_buffer_begin_user_action(v.native())
+}
+
+// EndUserAction() is a wrapper around gtk_text_buffer_end_user_action().
+func (v *TextBuffer) EndUserAction() {
+
+	C.gtk_text_buffer_end_user_action(v.native())
+}
+
 /*
  * GtkToggleButton
  */
@@ -8447,6 +9833,10 @@ func marshalToggleButton(p uintptr) (interface{}, error) {
 }
 
 func wrapToggleButton(obj *glib.Object) *ToggleButton {
+	if obj == nil {
+		return nil
+	}
+
 	actionable := wrapActionable(obj)
 	return &ToggleButton{Button{Bin{Container{Widget{
 		glib.InitiallyUnowned{obj}}}}, actionable}}
@@ -8548,6 +9938,10 @@ func marshalToolbar(p uintptr) (interface{}, error) {
 }
 
 func wrapToolbar(obj *glib.Object) *Toolbar {
+	if obj == nil {
+		return nil
+	}
+
 	return &Toolbar{Container{Widget{glib.InitiallyUnowned{obj}}}}
 }
 
@@ -8672,6 +10066,10 @@ func marshalToolButton(p uintptr) (interface{}, error) {
 }
 
 func wrapToolButton(obj *glib.Object) *ToolButton {
+	if obj == nil {
+		return nil
+	}
+
 	return &ToolButton{ToolItem{Bin{Container{Widget{
 		glib.InitiallyUnowned{obj}}}}}}
 }
@@ -8731,12 +10129,12 @@ func (v *ToolButton) SetIconWidget(iconWidget IWidget) {
 }
 
 // GetIconWidget is a wrapper around gtk_tool_button_get_icon_widget().
-func (v *ToolButton) GetIconWidget() *Widget {
+func (v *ToolButton) GetIconWidget() (IWidget, error) {
 	c := C.gtk_tool_button_get_icon_widget(v.native())
 	if c == nil {
-		return nil
+		return nil, nil
 	}
-	return wrapWidget(glib.Take(unsafe.Pointer(c)))
+	return castWidget(c)
 }
 
 // SetLabelWidget is a wrapper around gtk_tool_button_set_label_widget().
@@ -8745,12 +10143,12 @@ func (v *ToolButton) SetLabelWidget(labelWidget IWidget) {
 }
 
 // GetLabelWidget is a wrapper around gtk_tool_button_get_label_widget().
-func (v *ToolButton) GetLabelWidget() *Widget {
+func (v *ToolButton) GetLabelWidget() (IWidget, error) {
 	c := C.gtk_tool_button_get_label_widget(v.native())
 	if c == nil {
-		return nil
+		return nil, nil
 	}
-	return wrapWidget(glib.Take(unsafe.Pointer(c)))
+	return castWidget(c)
 }
 
 /*
@@ -8778,6 +10176,10 @@ func marshalToggleToolButton(p uintptr) (interface{}, error) {
 }
 
 func wrapToggleToolButton(obj *glib.Object) *ToggleToolButton {
+	if obj == nil {
+		return nil
+	}
+
 	return &ToggleToolButton{ToolButton{ToolItem{Bin{Container{Widget{
 		glib.InitiallyUnowned{obj}}}}}}}
 }
@@ -8838,6 +10240,10 @@ func marshalToolItem(p uintptr) (interface{}, error) {
 }
 
 func wrapToolItem(obj *glib.Object) *ToolItem {
+	if obj == nil {
+		return nil
+	}
+
 	return &ToolItem{Bin{Container{Widget{glib.InitiallyUnowned{obj}}}}}
 }
 
@@ -9078,6 +10484,9 @@ func (v *TreeIter) free() {
 }
 
 // Copy() is a wrapper around gtk_tree_iter_copy().
+//
+// Caution: when this method is used together with selection.GetSelectedRows(),
+// it might cause random crash issue. See issue #590 and #610.
 func (v *TreeIter) Copy() (*TreeIter, error) {
 	c := C.gtk_tree_iter_copy(v.native())
 	if c == nil {
@@ -9103,6 +10512,7 @@ type TreeModel struct {
 // GtkTreeModel.
 type ITreeModel interface {
 	toTreeModel() *C.GtkTreeModel
+	ToTreeModel() *TreeModel
 }
 
 // native returns a pointer to the underlying GObject as a GtkTreeModel.
@@ -9128,9 +10538,19 @@ func marshalTreeModel(p uintptr) (interface{}, error) {
 }
 
 func wrapTreeModel(obj *glib.Object) *TreeModel {
+	if obj == nil {
+		return nil
+	}
+
 	return &TreeModel{obj}
 }
 
+// ToTreeModel is a helper getter, e.g.: it returns *gtk.TreeStore/ListStore as a *gtk.TreeModel.
+// In other cases, where you have a gtk.ITreeModel, use the type assertion.
+func (v *TreeModel) ToTreeModel() *TreeModel {
+	return v
+}
+
 // GetFlags() is a wrapper around gtk_tree_model_get_flags().
 func (v *TreeModel) GetFlags() TreeModelFlags {
 	c := C.gtk_tree_model_get_flags(v.native())
@@ -9197,6 +10617,14 @@ func (v *TreeModel) GetPath(iter *TreeIter) (*TreePath, error) {
 	return p, nil
 }
 
+// GetStringFromIter() is a wrapper around gtk_tree_model_get_string_from_iter().
+func (v *TreeModel) GetStringFromIter(iter *TreeIter) string {
+	c := C.gtk_tree_model_get_string_from_iter(v.native(), iter.native())
+	s := goString(c)
+	defer C.g_free((C.gpointer)(c))
+	return s
+}
+
 // GetValue() is a wrapper around gtk_tree_model_get_value().
 func (v *TreeModel) GetValue(iter *TreeIter, column int) (*glib.Value, error) {
 	val, err := glib.ValueAlloc()
@@ -9204,7 +10632,7 @@ func (v *TreeModel) GetValue(iter *TreeIter, column int) (*glib.Value, error) {
 		return nil, err
 	}
 	C.gtk_tree_model_get_value(
-		(*C.GtkTreeModel)(unsafe.Pointer(v.native())),
+		v.native(),
 		iter.native(),
 		C.gint(column),
 		(*C.GValue)(unsafe.Pointer(val.Native())))
@@ -9274,42 +10702,14 @@ func (v *TreeModel) FilterNew(root *TreePath) (*TreeModelFilter, error) {
 
 // TreeModelForeachFunc defines the function prototype for the foreach function (f arg) for
 // (* TreeModel).ForEach
-type TreeModelForeachFunc func(model *TreeModel, path *TreePath, iter *TreeIter, userData interface{}) bool
-
-type treeModelForeachFuncData struct {
-	fn       TreeModelForeachFunc
-	userData interface{}
-}
-
-var (
-	treeModelForeachFuncRegistry = struct {
-		sync.RWMutex
-		next int
-		m    map[int]treeModelForeachFuncData
-	}{
-		next: 1,
-		m:    make(map[int]treeModelForeachFuncData),
-	}
-)
+type TreeModelForeachFunc func(model *TreeModel, path *TreePath, iter *TreeIter) bool
 
 // ForEach() is a wrapper around gtk_tree_model_foreach ()
-func (v *TreeModel) ForEach(f TreeModelForeachFunc, userData ...interface{}) error {
-	if len(userData) > 1 {
-		return errors.New("userData len must be 0 or 1")
-	}
-
-	t := treeModelForeachFuncData{fn: f}
-	if len(userData) > 0 {
-		t.userData = userData[0]
-	}
-	treeModelForeachFuncRegistry.Lock()
-	id := treeModelForeachFuncRegistry.next
-	treeModelForeachFuncRegistry.next++
-	treeModelForeachFuncRegistry.m[id] = t
-	treeModelForeachFuncRegistry.Unlock()
+func (v *TreeModel) ForEach(f TreeModelForeachFunc) {
+	id := callback.Assign(f)
+	defer callback.Delete(id)
 
-	C._gtk_tree_model_foreach(v.toTreeModel(), C.gpointer(uintptr(id)))
-	return nil
+	C._gtk_tree_model_foreach(v.toTreeModel(), C.gpointer(id))
 }
 
 /*
@@ -9346,6 +10746,10 @@ func marshalTreeModelFilter(p uintptr) (interface{}, error) {
 }
 
 func wrapTreeModelFilter(obj *glib.Object) *TreeModelFilter {
+	if obj == nil {
+		return nil
+	}
+
 	tm := wrapTreeModel(obj)
 	return &TreeModelFilter{obj, *tm}
 }
@@ -9400,42 +10804,11 @@ func (v *TreeModelFilter) Refilter() {
 
 // TreeModelFilterVisibleFunc defines the function prototype for the filter visibility function (f arg)
 // to TreeModelFilter.SetVisibleFunc.
-type TreeModelFilterVisibleFunc func(model *TreeModelFilter, iter *TreeIter, userData interface{}) bool
-
-type treeModelFilterVisibleFuncData struct {
-	fn       TreeModelFilterVisibleFunc
-	userData interface{}
-}
-
-var (
-	treeModelVisibleFilterFuncRegistry = struct {
-		sync.RWMutex
-		next int
-		m    map[int]treeModelFilterVisibleFuncData
-	}{
-		next: 1,
-		m:    make(map[int]treeModelFilterVisibleFuncData),
-	}
-)
+type TreeModelFilterVisibleFunc func(model *TreeModel, iter *TreeIter) bool
 
 // SetVisibleFunc is a wrapper around gtk_tree_model_filter_set_visible_func().
-func (v *TreeModelFilter) SetVisibleFunc(f TreeModelFilterVisibleFunc, userData ...interface{}) error {
-	if len(userData) > 1 {
-		return errors.New("userData len must be 0 or 1")
-	}
-
-	t := treeModelFilterVisibleFuncData{fn: f}
-	if len(userData) > 0 {
-		t.userData = userData[0]
-	}
-	treeModelVisibleFilterFuncRegistry.Lock()
-	id := treeModelVisibleFilterFuncRegistry.next
-	treeModelVisibleFilterFuncRegistry.next++
-	treeModelVisibleFilterFuncRegistry.m[id] = t
-	treeModelVisibleFilterFuncRegistry.Unlock()
-
-	C._gtk_tree_model_filter_set_visible_func(v.native(), C.gpointer(uintptr(id)))
-	return nil
+func (v *TreeModelFilter) SetVisibleFunc(f TreeModelFilterVisibleFunc) {
+	C._gtk_tree_model_filter_set_visible_func(v.native(), C.gpointer(callback.Assign(f)))
 }
 
 // Down() is a wrapper around gtk_tree_path_down()
@@ -9603,6 +10976,10 @@ func marshalTreeSelection(p uintptr) (interface{}, error) {
 }
 
 func wrapTreeSelection(obj *glib.Object) *TreeSelection {
+	if obj == nil {
+		return nil
+	}
+
 	return &TreeSelection{obj}
 }
 
@@ -9717,42 +11094,23 @@ func (v *TreeSelection) PathIsSelected(path *TreePath) bool {
 
 // TreeSelectionForeachFunc defines the function prototype for the selected_foreach function (f arg) for
 // (* TreeSelection).SelectedForEach
-type TreeSelectionForeachFunc func(model *TreeModel, path *TreePath, iter *TreeIter, userData interface{})
-
-type treeSelectionForeachFuncData struct {
-	fn       TreeSelectionForeachFunc
-	userData interface{}
-}
-
-var (
-	treeSelectionForeachFuncRegistry = struct {
-		sync.RWMutex
-		next int
-		m    map[int]treeSelectionForeachFuncData
-	}{
-		next: 1,
-		m:    make(map[int]treeSelectionForeachFuncData),
-	}
-)
+type TreeSelectionForeachFunc func(model *TreeModel, path *TreePath, iter *TreeIter)
 
 // SelectedForEach() is a wrapper around gtk_tree_selection_selected_foreach()
-func (v *TreeSelection) SelectedForEach(f TreeSelectionForeachFunc, userData ...interface{}) error {
-	if len(userData) > 1 {
-		return errors.New("userData len must be 0 or 1")
-	}
+func (v *TreeSelection) SelectedForEach(f TreeSelectionForeachFunc) {
+	id := callback.Assign(f)
+	defer callback.Delete(id)
 
-	t := treeSelectionForeachFuncData{fn: f}
-	if len(userData) > 0 {
-		t.userData = userData[0]
-	}
-	treeSelectionForeachFuncRegistry.Lock()
-	id := treeSelectionForeachFuncRegistry.next
-	treeSelectionForeachFuncRegistry.next++
-	treeSelectionForeachFuncRegistry.m[id] = t
-	treeSelectionForeachFuncRegistry.Unlock()
+	C._gtk_tree_selection_selected_foreach(v.native(), C.gpointer(id))
+}
 
-	C._gtk_tree_selection_selected_foreach(v.native(), C.gpointer(uintptr(id)))
-	return nil
+// TreeSelectionFunc defines the function prototype for the gtk_tree_selection_set_select_function
+// function (f arg) for (* TreeSelection).SetSelectFunction
+type TreeSelectionFunc func(selection *TreeSelection, model *TreeModel, path *TreePath, selected bool) bool
+
+// SetSelectFunction() is a wrapper around gtk_tree_selection_set_select_function()
+func (v *TreeSelection) SetSelectFunction(f TreeSelectionFunc) {
+	C._gtk_tree_selection_set_select_function(v.native(), C.gpointer(callback.Assign(f)))
 }
 
 /*
@@ -9798,13 +11156,12 @@ func (v *TreeRowReference) GetPath() *TreePath {
 }
 
 // GetModel is a wrapper around gtk_tree_row_reference_get_path.
-func (v *TreeRowReference) GetModel() ITreeModel {
+func (v *TreeRowReference) GetModel() (ITreeModel, error) {
 	c := C.gtk_tree_row_reference_get_model(v.native())
 	if c == nil {
-		return nil
+		return nil, nilPtrErr
 	}
-	m := wrapTreeModel(glib.Take(unsafe.Pointer(c)))
-	return m
+	return castTreeModel(c)
 }
 
 // Valid is a wrapper around gtk_tree_row_reference_valid.
@@ -9853,12 +11210,16 @@ func marshalTreeSortable(p uintptr) (interface{}, error) {
 }
 
 func wrapTreeSortable(obj *glib.Object) *TreeSortable {
+	if obj == nil {
+		return nil
+	}
+
 	return &TreeSortable{obj}
 }
 
-// TreeIterCompareFunc defines the function prototype for the sort function (f arg) for
-// (* TreeSortable).SetSortFunc
-type TreeIterCompareFunc func(model *TreeModel, a, b *TreeIter, userData interface{}) int
+// TreeIterCompareFunc is a representation of GtkTreeIterCompareFunc.
+// It defines the function prototype for the sort function (f arg) for (* TreeSortable).SetSortFunc
+type TreeIterCompareFunc func(model *TreeModel, a, b *TreeIter) int
 
 // GetSortColumnId() is a wrapper around gtk_tree_sortable_get_sort_column_id().
 func (v *TreeSortable) GetSortColumnId() (int, SortType, bool) {
@@ -9868,65 +11229,19 @@ func (v *TreeSortable) GetSortColumnId() (int, SortType, bool) {
 	return int(column), SortType(order), ok
 }
 
-type treeStoreSortFuncData struct {
-	fn       TreeIterCompareFunc
-	userData interface{}
-}
-
-var (
-	treeStoreSortFuncRegistry = struct {
-		sync.RWMutex
-		next int
-		m    map[int]treeStoreSortFuncData
-	}{
-		next: 1,
-		m:    make(map[int]treeStoreSortFuncData),
-	}
-)
-
 // SetSortColumnId() is a wrapper around gtk_tree_sortable_set_sort_column_id().
 func (v *TreeSortable) SetSortColumnId(column int, order SortType) {
 	C.gtk_tree_sortable_set_sort_column_id(v.native(), C.gint(column), C.GtkSortType(order))
 }
 
 // SetSortFunc() is a wrapper around gtk_tree_sortable_set_sort_func().
-func (v *TreeSortable) SetSortFunc(sortColumn int, f TreeIterCompareFunc, userData ...interface{}) error {
-	if len(userData) > 1 {
-		return errors.New("userData len must be 0 or 1")
-	}
-
-	t := treeStoreSortFuncData{fn: f}
-	if len(userData) > 0 {
-		t.userData = userData[0]
-	}
-	treeStoreSortFuncRegistry.Lock()
-	id := treeStoreSortFuncRegistry.next
-	treeStoreSortFuncRegistry.next++
-	treeStoreSortFuncRegistry.m[id] = t
-	treeStoreSortFuncRegistry.Unlock()
-
-	C._gtk_tree_sortable_set_sort_func(v.native(), C.gint(sortColumn), C.gpointer(uintptr(id)))
-	return nil
+func (v *TreeSortable) SetSortFunc(sortColumn int, f TreeIterCompareFunc) {
+	C._gtk_tree_sortable_set_sort_func(v.native(), C.gint(sortColumn), C.gpointer(callback.Assign(f)))
 }
 
 // SetDefaultSortFunc() is a wrapper around gtk_tree_sortable_set_default_sort_func().
-func (v *TreeSortable) SetDefaultSortFunc(f TreeIterCompareFunc, userData ...interface{}) error {
-	if len(userData) > 1 {
-		return errors.New("userData len must be 0 or 1")
-	}
-
-	t := treeStoreSortFuncData{fn: f}
-	if len(userData) > 0 {
-		t.userData = userData[0]
-	}
-	treeStoreSortFuncRegistry.Lock()
-	id := treeStoreSortFuncRegistry.next
-	treeStoreSortFuncRegistry.next++
-	treeStoreSortFuncRegistry.m[id] = t
-	treeStoreSortFuncRegistry.Unlock()
-
-	C._gtk_tree_sortable_set_default_sort_func(v.native(), C.gpointer(uintptr(id)))
-	return nil
+func (v *TreeSortable) SetDefaultSortFunc(f TreeIterCompareFunc) {
+	C._gtk_tree_sortable_set_default_sort_func(v.native(), C.gpointer(callback.Assign(f)))
 }
 
 func (v *TreeSortable) HasDefaultSortFunc() bool {
@@ -9962,6 +11277,10 @@ func marshalTreeModelSort(p uintptr) (interface{}, error) {
 }
 
 func wrapTreeModelSort(obj *glib.Object) *TreeModelSort {
+	if obj == nil {
+		return nil
+	}
+
 	tm := wrapTreeModel(obj)
 	ts := wrapTreeSortable(obj)
 	return &TreeModelSort{obj, *tm, *ts}
@@ -9997,13 +11316,12 @@ func TreeModelSortNew(model ITreeModel) (*TreeModelSort, error) {
 }
 
 // GetModel is a wrapper around gtk_tree_model_sort_get_model()
-func (v *TreeModelSort) GetModel() ITreeModel {
+func (v *TreeModelSort) GetModel() (ITreeModel, error) {
 	c := C.gtk_tree_model_sort_get_model(v.native())
 	if c == nil {
-		return nil
+		return nil, nilPtrErr
 	}
-	m := wrapTreeModel(glib.Take(unsafe.Pointer(c)))
-	return m
+	return castTreeModel(c)
 }
 
 // ConvertChildPathToPath is a wrapper around gtk_tree_model_sort_convert_child_path_to_path().
@@ -10088,6 +11406,10 @@ func marshalTreeStore(p uintptr) (interface{}, error) {
 }
 
 func wrapTreeStore(obj *glib.Object) *TreeStore {
+	if obj == nil {
+		return nil
+	}
+
 	tm := wrapTreeModel(obj)
 	ts := wrapTreeSortable(obj)
 	return &TreeStore{obj, *tm, *ts}
@@ -10135,6 +11457,18 @@ func (v *TreeStore) Append(parent *TreeIter) *TreeIter {
 	return iter
 }
 
+// Prepend is a wrapper around gtk_tree_store_prepend().
+func (v *TreeStore) Prepend(parent *TreeIter) *TreeIter {
+	var ti C.GtkTreeIter
+	var cParent *C.GtkTreeIter
+	if parent != nil {
+		cParent = parent.native()
+	}
+	C.gtk_tree_store_prepend(v.native(), &ti, cParent)
+	iter := &TreeIter{ti}
+	return iter
+}
+
 // Insert is a wrapper around gtk_tree_store_insert
 func (v *TreeStore) Insert(parent *TreeIter, position int) *TreeIter {
 	var ti C.GtkTreeIter
@@ -10203,27 +11537,78 @@ func (v *TreeStore) InsertWithValues(iter, parent *TreeIter, position int, inCol
 		length = len(inValues)
 	}
 
-	var cColumns []C.gint
-	var cValues []C.GValue
+	cColumns := make([]C.gint, 0, length)
+	cValues := make([]C.GValue, 0, length)
+
 	for i := 0; i < length; i++ {
-		cColumns = append(cColumns, C.gint(inColumns[i]))
 
-		gv, err := glib.GValue(inValues[i])
-		if err != nil {
-			return err
+		value := inValues[i]
+		var gvalue *C.GValue
+
+		switch value.(type) {
+		case *gdk.Pixbuf:
+			pix := value.(*gdk.Pixbuf)
+
+			if pix == nil {
+				continue
+			}
+
+			gvalue = (*C.GValue)(unsafe.Pointer(pix.Native()))
+
+		default:
+			gv, err := glib.GValue(value)
+			if err != nil {
+				return err
+			}
+			gvalue = (*C.GValue)(C.gpointer(gv.Native()))
 		}
 
-		var cvp *C.GValue = (*C.GValue)(gv.Native())
-		cValues = append(cValues, *cvp)
+		cColumns = append(cColumns, C.gint(inColumns[i]))
+		cValues = append(cValues, *gvalue)
 	}
-	var cColumnsPointer *C.gint = &cColumns[0]
-	var cValuesPointer *C.GValue = &cValues[0]
 
-	C.gtk_tree_store_insert_with_valuesv(v.native(), iter.native(), parent.native(), C.gint(position), cColumnsPointer, cValuesPointer, C.gint(length))
+	var cColumnsPointer *C.gint
+	if len(cColumns) > 0 {
+		cColumnsPointer = &cColumns[0]
+	}
+	var cValuesPointer *C.GValue
+	if len(cValues) > 0 {
+		cValuesPointer = &cValues[0]
+	}
+
+	C.gtk_tree_store_insert_with_valuesv(v.native(), iter.native(), parent.native(), C.gint(position), cColumnsPointer, cValuesPointer, C.gint(len(cColumns)))
 
 	return nil
 }
 
+// MoveBefore is a wrapper around gtk_tree_store_move_before().
+func (v *TreeStore) MoveBefore(iter, position *TreeIter) {
+	C.gtk_tree_store_move_before(v.native(), iter.native(),
+		position.native())
+}
+
+// MoveAfter is a wrapper around gtk_tree_store_move_after().
+func (v *TreeStore) MoveAfter(iter, position *TreeIter) {
+	C.gtk_tree_store_move_after(v.native(), iter.native(),
+		position.native())
+}
+
+// Swap is a wrapper around gtk_tree_store_swap().
+func (v *TreeStore) Swap(a, b *TreeIter) {
+	C.gtk_tree_store_swap(v.native(), a.native(), b.native())
+}
+
+// SetColumnTypes is a wrapper around gtk_tree_store_set_column_types().
+// The size of glib.Type must match the number of columns
+func (v *TreeStore) SetColumnTypes(types ...glib.Type) {
+	gtypes := C.alloc_types(C.int(len(types)))
+	for n, val := range types {
+		C.set_type(gtypes, C.int(n), C.GType(val))
+	}
+	defer C.g_free(C.gpointer(gtypes))
+	C.gtk_tree_store_set_column_types(v.native(), C.gint(len(types)), gtypes)
+}
+
 /*
  * GtkViewport
  */
@@ -10254,6 +11639,10 @@ func (v *Viewport) native() *C.GtkViewport {
 }
 
 func wrapViewport(obj *glib.Object) *Viewport {
+	if obj == nil {
+		return nil
+	}
+
 	b := wrapBin(obj)
 	s := wrapScrollable(obj)
 	return &Viewport{
@@ -10332,6 +11721,10 @@ func marshalVolumeButton(p uintptr) (interface{}, error) {
 }
 
 func wrapVolumeButton(obj *glib.Object) *VolumeButton {
+	if obj == nil {
+		return nil
+	}
+
 	actionable := wrapActionable(obj)
 	return &VolumeButton{ScaleButton{Button{Bin{Container{Widget{glib.InitiallyUnowned{obj}}}}, actionable}}}
 }
@@ -10356,14 +11749,19 @@ var WrapMap = map[string]WrapFn{
 	"GtkBin":                  wrapBin,
 	"GtkBox":                  wrapBox,
 	"GtkButton":               wrapButton,
+	"GtkButtonBox":            wrapButtonBox,
 	"GtkCalendar":             wrapCalendar,
 	"GtkCellLayout":           wrapCellLayout,
+	"GtkCellEditable":         wrapCellEditable,
 	"GtkCellRenderer":         wrapCellRenderer,
 	"GtkCellRendererSpinner":  wrapCellRendererSpinner,
 	"GtkCellRendererPixbuf":   wrapCellRendererPixbuf,
 	"GtkCellRendererText":     wrapCellRendererText,
 	"GtkCellRendererProgress": wrapCellRendererProgress,
 	"GtkCellRendererToggle":   wrapCellRendererToggle,
+	"GtkCellRendererCombo":    wrapCellRendererCombo,
+	"GtkCellRendererAccel":    wrapCellRendererAccel,
+	"GtkCellRendererSpin":     wrapCellRendererSpin,
 	"GtkCheckButton":          wrapCheckButton,
 	"GtkCheckMenuItem":        wrapCheckMenuItem,
 	"GtkClipboard":            wrapClipboard,
@@ -10421,10 +11819,11 @@ var WrapMap = map[string]WrapFn{
 	"GtkSpinner":              wrapSpinner,
 	"GtkStatusbar":            wrapStatusbar,
 	"GtkSwitch":               wrapSwitch,
-	"GtkTextView":             wrapTextView,
 	"GtkTextBuffer":           wrapTextBuffer,
+	"GtkTextChildAnchor":      wrapTextChildAnchor,
 	"GtkTextTag":              wrapTextTag,
 	"GtkTextTagTable":         wrapTextTagTable,
+	"GtkTextView":             wrapTextView,
 	"GtkToggleButton":         wrapToggleButton,
 	"GtkToolbar":              wrapToolbar,
 	"GtkToolButton":           wrapToolButton,
@@ -10449,7 +11848,10 @@ var WrapMap = map[string]WrapFn{
 func castInternal(className string, obj *glib.Object) (interface{}, error) {
 	fn, ok := WrapMap[className]
 	if !ok {
-		return nil, errors.New("unrecognized class name '" + className + "'")
+		fn, ok = glib.WrapMap[className]
+		if !ok {
+			return nil, errors.New("unrecognized class name '" + className + "'")
+		}
 	}
 
 	// Check that the wrapper function is actually a function
@@ -10481,9 +11883,10 @@ func castInternal(className string, obj *glib.Object) (interface{}, error) {
 //TODO change all wrapFns to return an IObject
 //^- not sure about this TODO. This may make some usages of the wrapper functions quite verbose, no?
 func cast(c *C.GObject) (glib.IObject, error) {
+	ptr := unsafe.Pointer(c)
 	var (
-		className = goString(C.object_get_class_name(c))
-		obj       = glib.Take(unsafe.Pointer(c))
+		className = goString(C.object_get_class_name(C.toGObject(ptr)))
+		obj       = glib.Take(ptr)
 	)
 
 	intf, err := castInternal(className, obj)
@@ -10499,11 +11902,12 @@ func cast(c *C.GObject) (glib.IObject, error) {
 	return ret, nil
 }
 
-// cast takes a native GtkWidget and casts it to the appropriate Go struct.
+// castWidget takes a native GtkWidget and casts it to the appropriate Go struct.
 func castWidget(c *C.GtkWidget) (IWidget, error) {
+	ptr := unsafe.Pointer(c)
 	var (
-		className = goString(C.object_get_class_name(C.toGObject(unsafe.Pointer(c))))
-		obj       = glib.Take(unsafe.Pointer(c))
+		className = goString(C.object_get_class_name(C.toGObject(ptr)))
+		obj       = glib.Take(ptr)
 	)
 
 	intf, err := castInternal(className, obj)
@@ -10513,9 +11917,71 @@ func castWidget(c *C.GtkWidget) (IWidget, error) {
 
 	ret, ok := intf.(IWidget)
 	if !ok {
-		return nil, errors.New("did not return an IWidget")
+		return nil, fmt.Errorf("expected value of type IWidget, got %T", intf)
+	}
+
+	return ret, nil
+}
+
+// castCellRenderer takes a native GtkCellRenderer and casts it to the appropriate Go struct.
+func castCellRenderer(c *C.GtkCellRenderer) (ICellRenderer, error) {
+	ptr := unsafe.Pointer(c)
+	var (
+		className = goString(C.object_get_class_name(C.toGObject(ptr)))
+		obj       = glib.Take(ptr)
+	)
+
+	intf, err := castInternal(className, obj)
+	if err != nil {
+		return nil, err
+	}
+
+	ret, ok := intf.(ICellRenderer)
+	if !ok {
+		return nil, fmt.Errorf("expected value of type ICellRenderer, got %T", intf)
+	}
+
+	return ret, nil
+}
+
+// castTreeModel takes a native GtkCellTreeModel and casts it to the appropriate Go struct.
+func castTreeModel(c *C.GtkTreeModel) (ITreeModel, error) {
+	ptr := unsafe.Pointer(c)
+	var (
+		className = goString(C.object_get_class_name(C.toGObject(ptr)))
+		obj       = glib.Take(ptr)
+	)
+
+	intf, err := castInternal(className, obj)
+	if err != nil {
+		return nil, err
+	}
+
+	ret, ok := intf.(ITreeModel)
+	if !ok {
+		return nil, fmt.Errorf("expected value of type ITreeModel, got %T", intf)
 	}
 
 	return ret, nil
 }
 
+// castCellEditable takes a native GtkCellEditable and casts it to the appropriate Go struct.
+func castCellEditable(c *C.GtkCellEditable) (ICellEditable, error) {
+	ptr := unsafe.Pointer(c)
+	var (
+		className = goString(C.object_get_class_name(C.toGObject(ptr)))
+		obj       = glib.Take(ptr)
+	)
+
+	intf, err := castInternal(className, obj)
+	if err != nil {
+		return nil, err
+	}
+
+	ret, ok := intf.(ICellEditable)
+	if !ok {
+		return nil, fmt.Errorf("expected value of type ICellEditable, got %T", intf)
+	}
+
+	return ret, nil
+}
diff --git a/vendor/github.com/gotk3/gotk3/gtk/gtk.go.h b/vendor/github.com/gotk3/gotk3/gtk/gtk.go.h
index b45e4a27e672..9e1105220782 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/gtk.go.h
+++ b/vendor/github.com/gotk3/gotk3/gtk/gtk.go.h
@@ -22,999 +22,630 @@
 #include <stdlib.h>
 #include <string.h>
 
-static GtkAboutDialog *
-toGtkAboutDialog(void *p)
-{
-	return (GTK_ABOUT_DIALOG(p));
-}
+// gotk3_callbackDelete satisfies the GDestroyNotify type.
+extern void gotk3_callbackDelete(gpointer callback_id);
 
-static GtkAppChooser *
-toGtkAppChooser(void *p)
-{
-	return (GTK_APP_CHOOSER(p));
+static GtkAboutDialog *toGtkAboutDialog(void *p) {
+  return (GTK_ABOUT_DIALOG(p));
 }
 
-static GtkAppChooserButton *
-toGtkAppChooserButton(void *p)
-{
-	return (GTK_APP_CHOOSER_BUTTON(p));
-}
+static GtkAppChooser *toGtkAppChooser(void *p) { return (GTK_APP_CHOOSER(p)); }
 
-static GtkAppChooserDialog *
-toGtkAppChooserDialog(void *p)
-{
-	return (GTK_APP_CHOOSER_DIALOG(p));
+static GtkAppChooserButton *toGtkAppChooserButton(void *p) {
+  return (GTK_APP_CHOOSER_BUTTON(p));
 }
 
-static GtkAppChooserWidget *
-toGtkAppChooserWidget(void *p)
-{
-	return (GTK_APP_CHOOSER_WIDGET(p));
+static GtkAppChooserDialog *toGtkAppChooserDialog(void *p) {
+  return (GTK_APP_CHOOSER_DIALOG(p));
 }
 
-static GtkApplication *
-toGtkApplication(void *p)
-{
-	return (GTK_APPLICATION(p));
+static GtkAppChooserWidget *toGtkAppChooserWidget(void *p) {
+  return (GTK_APP_CHOOSER_WIDGET(p));
 }
 
-static GtkApplicationWindow *
-toGtkApplicationWindow(void *p)
-{
-	return (GTK_APPLICATION_WINDOW(p));
+static GtkApplication *toGtkApplication(void *p) {
+  return (GTK_APPLICATION(p));
 }
 
-static GtkAssistant *
-toGtkAssistant(void *p)
-{
-	return (GTK_ASSISTANT(p));
+static GtkApplicationWindow *toGtkApplicationWindow(void *p) {
+  return (GTK_APPLICATION_WINDOW(p));
 }
 
-static GtkCalendar *
-toGtkCalendar(void *p)
-{
-	return (GTK_CALENDAR(p));
-}
+static GtkAssistant *toGtkAssistant(void *p) { return (GTK_ASSISTANT(p)); }
 
-static GtkColorChooserDialog *
-toGtkColorChooserDialog(void *p)
-{
-	return (GTK_COLOR_CHOOSER_DIALOG(p));
-}
+static GtkCalendar *toGtkCalendar(void *p) { return (GTK_CALENDAR(p)); }
 
-static GtkDrawingArea *
-toGtkDrawingArea(void *p)
-{
-	return (GTK_DRAWING_AREA(p));
+static GtkColorChooserDialog *toGtkColorChooserDialog(void *p) {
+  return (GTK_COLOR_CHOOSER_DIALOG(p));
 }
 
-static GtkCellRendererSpinner *
-toGtkCellRendererSpinner(void *p)
-{
-	return (GTK_CELL_RENDERER_SPINNER(p));
+static GtkDrawingArea *toGtkDrawingArea(void *p) {
+  return (GTK_DRAWING_AREA(p));
 }
 
-static GtkEventBox *
-toGtkEventBox(void *p)
-{
-	return (GTK_EVENT_BOX(p));
+static GtkCellRendererSpinner *toGtkCellRendererSpinner(void *p) {
+  return (GTK_CELL_RENDERER_SPINNER(p));
 }
 
-static GtkGrid *
-toGtkGrid(void *p)
-{
-	return (GTK_GRID(p));
-}
+static GtkEventBox *toGtkEventBox(void *p) { return (GTK_EVENT_BOX(p)); }
 
-static GtkWidget *
-toGtkWidget(void *p)
-{
-	return (GTK_WIDGET(p));
-}
+static GtkGrid *toGtkGrid(void *p) { return (GTK_GRID(p)); }
 
-static GtkContainer *
-toGtkContainer(void *p)
-{
-	return (GTK_CONTAINER(p));
-}
+static GtkWidget *toGtkWidget(void *p) { return (GTK_WIDGET(p)); }
 
-static GtkOverlay *
-toGtkOverlay(void *p)
-{
-	return (GTK_OVERLAY(p));
-}
+static GtkContainer *toGtkContainer(void *p) { return (GTK_CONTAINER(p)); }
 
-static GtkPageSetup *
-toGtkPageSetup(void *p)
-{
-	return (GTK_PAGE_SETUP(p));
-}
+static GtkOverlay *toGtkOverlay(void *p) { return (GTK_OVERLAY(p)); }
 
-static GtkPaned *
-toGtkPaned(void *p)
-{
-	return (GTK_PANED(p));
-}
+static GtkPageSetup *toGtkPageSetup(void *p) { return (GTK_PAGE_SETUP(p)); }
 
-static GtkPrintContext *
-toGtkPrintContext(void *p)
-{
-	return (GTK_PRINT_CONTEXT(p));
-}
+static GtkPaned *toGtkPaned(void *p) { return (GTK_PANED(p)); }
 
-static GtkPrintOperation *
-toGtkPrintOperation(void *p)
-{
-	return (GTK_PRINT_OPERATION(p));
+static GtkPrintContext *toGtkPrintContext(void *p) {
+  return (GTK_PRINT_CONTEXT(p));
 }
 
-static GtkPrintOperationPreview *
-toGtkPrintOperationPreview(void *p)
-{
-	return (GTK_PRINT_OPERATION_PREVIEW(p));
+static GtkPrintOperation *toGtkPrintOperation(void *p) {
+  return (GTK_PRINT_OPERATION(p));
 }
 
-static GtkPrintSettings *
-toGtkPrintSettings(void *p)
-{
-	return (GTK_PRINT_SETTINGS(p));
+static GtkPrintOperationPreview *toGtkPrintOperationPreview(void *p) {
+  return (GTK_PRINT_OPERATION_PREVIEW(p));
 }
 
-static GtkProgressBar *
-toGtkProgressBar(void *p)
-{
-	return (GTK_PROGRESS_BAR(p));
+static GtkPrintSettings *toGtkPrintSettings(void *p) {
+  return (GTK_PRINT_SETTINGS(p));
 }
 
-static GtkLevelBar *
-toGtkLevelBar(void *p)
-{
-	return (GTK_LEVEL_BAR(p));
+static GtkProgressBar *toGtkProgressBar(void *p) {
+  return (GTK_PROGRESS_BAR(p));
 }
 
-static GtkBin *
-toGtkBin(void *p)
-{
-	return (GTK_BIN(p));
-}
+static GtkLevelBar *toGtkLevelBar(void *p) { return (GTK_LEVEL_BAR(p)); }
 
-static GtkWindow *
-toGtkWindow(void *p)
-{
-	return (GTK_WINDOW(p));
-}
+static GtkBin *toGtkBin(void *p) { return (GTK_BIN(p)); }
 
-static GtkWindowGroup *
-toGtkWindowGroup(void *p)
-{
-	return (GTK_WINDOW_GROUP(p));
-}
+static GtkWindow *toGtkWindow(void *p) { return (GTK_WINDOW(p)); }
 
-static GtkBox *
-toGtkBox(void *p)
-{
-	return (GTK_BOX(p));
+static GtkWindowGroup *toGtkWindowGroup(void *p) {
+  return (GTK_WINDOW_GROUP(p));
 }
 
-static GtkStatusbar *
-toGtkStatusbar(void *p)
-{
-	return (GTK_STATUSBAR(p));
-}
+static GtkBox *toGtkBox(void *p) { return (GTK_BOX(p)); }
 
-static GtkLabel *
-toGtkLabel(void *p)
-{
-	return (GTK_LABEL(p));
-}
+static GtkStatusbar *toGtkStatusbar(void *p) { return (GTK_STATUSBAR(p)); }
 
-static GtkNotebook *
-toGtkNotebook(void *p)
-{
-	return (GTK_NOTEBOOK(p));
-}
+static GtkLabel *toGtkLabel(void *p) { return (GTK_LABEL(p)); }
 
-static GtkEntry *
-toGtkEntry(void *p)
-{
-	return (GTK_ENTRY(p));
-}
+static GtkNotebook *toGtkNotebook(void *p) { return (GTK_NOTEBOOK(p)); }
 
-static GtkEntryBuffer *
-toGtkEntryBuffer(void *p)
-{
-	return (GTK_ENTRY_BUFFER(p));
-}
+static GtkEntry *toGtkEntry(void *p) { return (GTK_ENTRY(p)); }
 
-static GtkEntryCompletion *
-toGtkEntryCompletion(void *p)
-{
-	return (GTK_ENTRY_COMPLETION(p));
+static GtkEntryBuffer *toGtkEntryBuffer(void *p) {
+  return (GTK_ENTRY_BUFFER(p));
 }
 
-static GtkAdjustment *
-toGtkAdjustment(void *p)
-{
-	return (GTK_ADJUSTMENT(p));
+static GtkEntryCompletion *toGtkEntryCompletion(void *p) {
+  return (GTK_ENTRY_COMPLETION(p));
 }
 
-static GtkAccelGroup *
-toGtkAccelGroup(void *p)
-{
-    return (GTK_ACCEL_GROUP(p));
-}
+static GtkAdjustment *toGtkAdjustment(void *p) { return (GTK_ADJUSTMENT(p)); }
 
-static GtkAccelMap *
-toGtkAccelMap(void *p)
-{
-    return (GTK_ACCEL_MAP(p));
-}
+static GtkAccelGroup *toGtkAccelGroup(void *p) { return (GTK_ACCEL_GROUP(p)); }
 
-static GtkTextTag *
-toGtkTextTag(void *p)
-{
-	return (GTK_TEXT_TAG(p));
-}
+static GtkAccelMap *toGtkAccelMap(void *p) { return (GTK_ACCEL_MAP(p)); }
 
-static GtkIconView *
-toGtkIconView(void *p)
-{
-	return (GTK_ICON_VIEW(p));
-}
+static GtkTextTag *toGtkTextTag(void *p) { return (GTK_TEXT_TAG(p)); }
 
-static GtkImage *
-toGtkImage(void *p)
-{
-	return (GTK_IMAGE(p));
-}
+static GtkIconView *toGtkIconView(void *p) { return (GTK_ICON_VIEW(p)); }
 
-static GtkButtonBox *
-toGtkButtonBox(void *p)
-{
-	return (GTK_BUTTON_BOX(p));
-}
+static GtkImage *toGtkImage(void *p) { return (GTK_IMAGE(p)); }
 
-static GtkButton *
-toGtkButton(void *p)
-{
-	return (GTK_BUTTON(p));
-}
+static GtkButtonBox *toGtkButtonBox(void *p) { return (GTK_BUTTON_BOX(p)); }
 
-static GtkScaleButton *
-toGtkScaleButton(void *p)
-{
-	return (GTK_SCALE_BUTTON(p));
-}
+static GtkButton *toGtkButton(void *p) { return (GTK_BUTTON(p)); }
 
-static GtkColorButton *
-toGtkColorButton(void *p)
-{
-	return (GTK_COLOR_BUTTON(p));
+static GtkScaleButton *toGtkScaleButton(void *p) {
+  return (GTK_SCALE_BUTTON(p));
 }
 
-static GtkViewport *
-toGtkViewport(void *p)
-{
-	return (GTK_VIEWPORT(p));
+static GtkColorButton *toGtkColorButton(void *p) {
+  return (GTK_COLOR_BUTTON(p));
 }
 
-static GtkVolumeButton *
-toGtkVolumeButton(void *p)
-{
-	return (GTK_VOLUME_BUTTON(p));
-}
+static GtkViewport *toGtkViewport(void *p) { return (GTK_VIEWPORT(p)); }
 
-static GtkScrollable *
-toGtkScrollable(void *p)
-{
-	return (GTK_SCROLLABLE(p));
+static GtkVolumeButton *toGtkVolumeButton(void *p) {
+  return (GTK_VOLUME_BUTTON(p));
 }
 
-static GtkScrolledWindow *
-toGtkScrolledWindow(void *p)
-{
-	return (GTK_SCROLLED_WINDOW(p));
-}
+static GtkScrollable *toGtkScrollable(void *p) { return (GTK_SCROLLABLE(p)); }
 
-static GtkMenuItem *
-toGtkMenuItem(void *p)
-{
-	return (GTK_MENU_ITEM(p));
+static GtkScrolledWindow *toGtkScrolledWindow(void *p) {
+  return (GTK_SCROLLED_WINDOW(p));
 }
 
-static GtkMenu *
-toGtkMenu(void *p)
-{
-	return (GTK_MENU(p));
-}
+static GtkMenuItem *toGtkMenuItem(void *p) { return (GTK_MENU_ITEM(p)); }
 
-static GtkMenuShell *
-toGtkMenuShell(void *p)
-{
-	return (GTK_MENU_SHELL(p));
-}
+static GtkMenu *toGtkMenu(void *p) { return (GTK_MENU(p)); }
 
-static GtkMenuBar *
-toGtkMenuBar(void *p)
-{
-	return (GTK_MENU_BAR(p));
-}
+static GtkMenuShell *toGtkMenuShell(void *p) { return (GTK_MENU_SHELL(p)); }
 
-static GtkSizeGroup *
-toGtkSizeGroup(void *p)
-{
-	return (GTK_SIZE_GROUP(p));
-}
+static GtkMenuBar *toGtkMenuBar(void *p) { return (GTK_MENU_BAR(p)); }
 
-static GtkSpinButton *
-toGtkSpinButton(void *p)
-{
-	return (GTK_SPIN_BUTTON(p));
-}
+static GtkSizeGroup *toGtkSizeGroup(void *p) { return (GTK_SIZE_GROUP(p)); }
 
-static GtkSpinner *
-toGtkSpinner(void *p)
-{
-	return (GTK_SPINNER(p));
-}
+static GtkSpinButton *toGtkSpinButton(void *p) { return (GTK_SPIN_BUTTON(p)); }
 
-static GtkComboBox *
-toGtkComboBox(void *p)
-{
-	return (GTK_COMBO_BOX(p));
-}
+static GtkSpinner *toGtkSpinner(void *p) { return (GTK_SPINNER(p)); }
 
-static GtkComboBoxText *
-toGtkComboBoxText(void *p)
-{
-	return (GTK_COMBO_BOX_TEXT(p));
-}
+static GtkComboBox *toGtkComboBox(void *p) { return (GTK_COMBO_BOX(p)); }
 
-static GtkLinkButton *
-toGtkLinkButton(void *p)
-{
-	return (GTK_LINK_BUTTON(p));
+static GtkComboBoxText *toGtkComboBoxText(void *p) {
+  return (GTK_COMBO_BOX_TEXT(p));
 }
 
-static GtkLayout *
-toGtkLayout(void *p)
-{
-	return (GTK_LAYOUT(p));
-}
+static GtkLinkButton *toGtkLinkButton(void *p) { return (GTK_LINK_BUTTON(p)); }
 
-static GtkTreeModelSort *
-toGtkTreeModelSortable(void *p)
-{
-    return (GTK_TREE_MODEL_SORT(p));
-}
+static GtkLockButton *toGtkLockButton(void *p) { return (GTK_LOCK_BUTTON(p)); }
 
-static GtkListStore *
-toGtkListStore(void *p)
-{
-	return (GTK_LIST_STORE(p));
-}
+static GtkLayout *toGtkLayout(void *p) { return (GTK_LAYOUT(p)); }
 
-static GtkSwitch *
-toGtkSwitch(void *p)
-{
-	return (GTK_SWITCH(p));
+static GtkTreeModelSort *toGtkTreeModelSortable(void *p) {
+  return (GTK_TREE_MODEL_SORT(p));
 }
 
-static GtkTextView *
-toGtkTextView(void *p)
-{
-	return (GTK_TEXT_VIEW(p));
-}
+static GtkListStore *toGtkListStore(void *p) { return (GTK_LIST_STORE(p)); }
 
-static GtkTextTagTable *
-toGtkTextTagTable(void *p)
-{
-	return (GTK_TEXT_TAG_TABLE(p));
-}
+static GtkSwitch *toGtkSwitch(void *p) { return (GTK_SWITCH(p)); }
 
-static GtkTextBuffer *
-toGtkTextBuffer(void *p)
-{
-	return (GTK_TEXT_BUFFER(p));
-}
+static GtkTextView *toGtkTextView(void *p) { return (GTK_TEXT_VIEW(p)); }
 
-static GtkTreeModel *
-toGtkTreeModel(void *p)
-{
-	return (GTK_TREE_MODEL(p));
-}
+static GtkTextMark *toGtkTextMark(void *p) { return (GTK_TEXT_MARK(p)); }
 
-static GtkTreeModelFilter *
-toGtkTreeModelFilter(void *p)
-{
-	return (GTK_TREE_MODEL_FILTER(p));
+static GtkTextTagTable *toGtkTextTagTable(void *p) {
+  return (GTK_TEXT_TAG_TABLE(p));
 }
 
-static GtkCellRenderer *
-toGtkCellRenderer(void *p)
-{
-	return (GTK_CELL_RENDERER(p));
-}
+static GtkTextBuffer *toGtkTextBuffer(void *p) { return (GTK_TEXT_BUFFER(p)); }
 
-static GtkCellRendererPixbuf *
-toGtkCellRendererPixbuf(void *p)
-{
-	return (GTK_CELL_RENDERER_PIXBUF(p));
-}
+static GtkTreeModel *toGtkTreeModel(void *p) { return (GTK_TREE_MODEL(p)); }
 
-static GtkCellRendererProgress *
-toGtkCellRendererProgress(void *p)
-{
-    return (GTK_CELL_RENDERER_PROGRESS(p));
+static GtkTreeModelFilter *toGtkTreeModelFilter(void *p) {
+  return (GTK_TREE_MODEL_FILTER(p));
 }
 
-static GtkCellRendererText *
-toGtkCellRendererText(void *p)
-{
-	return (GTK_CELL_RENDERER_TEXT(p));
+static GtkCellRenderer *toGtkCellRenderer(void *p) {
+  return (GTK_CELL_RENDERER(p));
 }
 
-static GtkCellRendererToggle *
-toGtkCellRendererToggle(void *p)
-{
-	return (GTK_CELL_RENDERER_TOGGLE(p));
+static GtkCellEditable *toGtkCellEditable(void *p) {
+  return (GTK_CELL_EDITABLE(p));
 }
 
-static GtkCellLayout *
-toGtkCellLayout(void *p)
-{
-	return (GTK_CELL_LAYOUT(p));
+static GtkCellRendererPixbuf *toGtkCellRendererPixbuf(void *p) {
+  return (GTK_CELL_RENDERER_PIXBUF(p));
 }
 
-static GtkOrientable *
-toGtkOrientable(void *p)
-{
-	return (GTK_ORIENTABLE(p));
+static GtkCellRendererProgress *toGtkCellRendererProgress(void *p) {
+  return (GTK_CELL_RENDERER_PROGRESS(p));
 }
 
-static GtkTreeStore *
-toGtkTreeStore (void *p)
-{
-	return (GTK_TREE_STORE(p));
+static GtkCellRendererText *toGtkCellRendererText(void *p) {
+  return (GTK_CELL_RENDERER_TEXT(p));
 }
 
-static GtkTreeView *
-toGtkTreeView(void *p)
-{
-	return (GTK_TREE_VIEW(p));
+static GtkCellRendererToggle *toGtkCellRendererToggle(void *p) {
+  return (GTK_CELL_RENDERER_TOGGLE(p));
 }
 
-static GtkTreeViewColumn *
-toGtkTreeViewColumn(void *p)
-{
-	return (GTK_TREE_VIEW_COLUMN(p));
+static GtkCellRendererCombo *toGtkCellRendererCombo(void *p) {
+  return (GTK_CELL_RENDERER_COMBO(p));
 }
 
-static GtkTreeSelection *
-toGtkTreeSelection(void *p)
-{
-	return (GTK_TREE_SELECTION(p));
+static GtkCellRendererAccel *toGtkCellRendererAccel(void *p) {
+  return (GTK_CELL_RENDERER_ACCEL(p));
 }
 
-static GtkTreeModelSort *
-toGtkTreeModelSort(void *p)
-{
-	return (GTK_TREE_MODEL_SORT(p));
+static GtkCellRendererSpin *toGtkCellRendererSpin(void *p) {
+  return (GTK_CELL_RENDERER_SPIN(p));
 }
 
-static GtkTreeSortable *
-toGtkTreeSortable(void *p)
-{
-	return (GTK_TREE_SORTABLE(p));
-}
+static GtkCellLayout *toGtkCellLayout(void *p) { return (GTK_CELL_LAYOUT(p)); }
 
-static GtkClipboard *
-toGtkClipboard(void *p)
-{
-	return (GTK_CLIPBOARD(p));
-}
+static GtkCellArea *toGtkCellArea(void *p) { return (GTK_CELL_AREA(p)); }
 
-static GtkDialog *
-toGtkDialog(void *p)
-{
-	return (GTK_DIALOG(p));
+static GtkCellAreaContext *toGtkCellAreaContext(void *p) {
+  return (GTK_CELL_AREA_CONTEXT(p));
 }
 
-static GtkMessageDialog *
-toGtkMessageDialog(void *p)
-{
-	return (GTK_MESSAGE_DIALOG(p));
+static GtkCellAreaBox *toGtkCellAreaBox(void *p) {
+  return (GTK_CELL_AREA_BOX(p));
 }
 
-static GtkBuilder *
-toGtkBuilder(void *p)
-{
-	return (GTK_BUILDER(p));
-}
+static GtkOrientable *toGtkOrientable(void *p) { return (GTK_ORIENTABLE(p)); }
 
-static GtkSeparatorMenuItem *
-toGtkSeparatorMenuItem(void *p)
-{
-	return (GTK_SEPARATOR_MENU_ITEM(p));
-}
+static GtkTreeStore *toGtkTreeStore(void *p) { return (GTK_TREE_STORE(p)); }
 
-static GtkCheckButton *
-toGtkCheckButton(void *p)
-{
-	return (GTK_CHECK_BUTTON(p));
-}
+static GtkTreeView *toGtkTreeView(void *p) { return (GTK_TREE_VIEW(p)); }
 
-static GtkToggleButton *
-toGtkToggleButton(void *p)
-{
-	return (GTK_TOGGLE_BUTTON(p));
+static GtkTreeViewColumn *toGtkTreeViewColumn(void *p) {
+  return (GTK_TREE_VIEW_COLUMN(p));
 }
 
-static GtkFontButton *
-toGtkFontButton(void *p)
-{
-	return (GTK_FONT_BUTTON(p));
+static GtkTreeSelection *toGtkTreeSelection(void *p) {
+  return (GTK_TREE_SELECTION(p));
 }
 
-static GtkFrame *
-toGtkFrame(void *p)
-{
-	return (GTK_FRAME(p));
+static GtkTreeModelSort *toGtkTreeModelSort(void *p) {
+  return (GTK_TREE_MODEL_SORT(p));
 }
 
-static GtkAspectFrame *
-toGtkAspectFrame(void *p)
-{
-	return (GTK_ASPECT_FRAME(p));
+static GtkTreeSortable *toGtkTreeSortable(void *p) {
+  return (GTK_TREE_SORTABLE(p));
 }
 
-static GtkSeparator *
-toGtkSeparator(void *p)
-{
-	return (GTK_SEPARATOR(p));
-}
+static GtkClipboard *toGtkClipboard(void *p) { return (GTK_CLIPBOARD(p)); }
 
-static GtkScale*
-toGtkScale(void *p)
-{
-	return (GTK_SCALE(p));
-}
+static GtkDialog *toGtkDialog(void *p) { return (GTK_DIALOG(p)); }
 
-static GtkScrollbar *
-toGtkScrollbar(void *p)
-{
-	return (GTK_SCROLLBAR(p));
+static GtkMessageDialog *toGtkMessageDialog(void *p) {
+  return (GTK_MESSAGE_DIALOG(p));
 }
 
-static GtkRange *
-toGtkRange(void *p)
-{
-	return (GTK_RANGE(p));
-}
+static GtkBuilder *toGtkBuilder(void *p) { return (GTK_BUILDER(p)); }
 
-static GtkSearchEntry *
-toGtkSearchEntry(void *p)
-{
-	return (GTK_SEARCH_ENTRY(p));
+static GtkSeparatorMenuItem *toGtkSeparatorMenuItem(void *p) {
+  return (GTK_SEPARATOR_MENU_ITEM(p));
 }
 
-static GtkOffscreenWindow *
-toGtkOffscreenWindow(void *p)
-{
-	return (GTK_OFFSCREEN_WINDOW(p));
+static GtkCheckButton *toGtkCheckButton(void *p) {
+  return (GTK_CHECK_BUTTON(p));
 }
 
-static GtkExpander *
-toGtkExpander(void *p)
-{
-	return (GTK_EXPANDER(p));
+static GtkToggleButton *toGtkToggleButton(void *p) {
+  return (GTK_TOGGLE_BUTTON(p));
 }
 
-static GtkFileChooser *
-toGtkFileChooser(void *p)
-{
-	return (GTK_FILE_CHOOSER(p));
-}
+static GtkFontButton *toGtkFontButton(void *p) { return (GTK_FONT_BUTTON(p)); }
 
-static GtkFileChooserButton *
-toGtkFileChooserButton(void *p)
-{
-	return (GTK_FILE_CHOOSER_BUTTON(p));
-}
+static GtkFrame *toGtkFrame(void *p) { return (GTK_FRAME(p)); }
 
-static GtkFileChooserDialog *
-toGtkFileChooserDialog(void *p)
-{
-	return (GTK_FILE_CHOOSER_DIALOG(p));
+static GtkAspectFrame *toGtkAspectFrame(void *p) {
+  return (GTK_ASPECT_FRAME(p));
 }
 
-static GtkFileChooserWidget *
-toGtkFileChooserWidget(void *p)
-{
-	return (GTK_FILE_CHOOSER_WIDGET(p));
-}
+static GtkSeparator *toGtkSeparator(void *p) { return (GTK_SEPARATOR(p)); }
 
-static GtkFileFilter *
-toGtkFileFilter(void *p)
-{
-	return (GTK_FILE_FILTER(p));
-}
+static GtkScale *toGtkScale(void *p) { return (GTK_SCALE(p)); }
 
-static GtkMenuButton *
-toGtkMenuButton(void *p)
-{
-	return (GTK_MENU_BUTTON(p));
-}
+static GtkScrollbar *toGtkScrollbar(void *p) { return (GTK_SCROLLBAR(p)); }
 
-static GtkRadioButton *
-toGtkRadioButton(void *p)
-{
-	return (GTK_RADIO_BUTTON(p));
-}
+static GtkRange *toGtkRange(void *p) { return (GTK_RANGE(p)); }
 
-static GtkRecentChooser *
-toGtkRecentChooser(void *p)
-{
-	return (GTK_RECENT_CHOOSER(p));
+static GtkSearchEntry *toGtkSearchEntry(void *p) {
+  return (GTK_SEARCH_ENTRY(p));
 }
 
-static GtkRecentChooserMenu *
-toGtkRecentChooserMenu(void *p)
-{
-	return (GTK_RECENT_CHOOSER_MENU(p));
+static GtkOffscreenWindow *toGtkOffscreenWindow(void *p) {
+  return (GTK_OFFSCREEN_WINDOW(p));
 }
 
-static GtkColorChooser *
-toGtkColorChooser(void *p)
-{
-	return (GTK_COLOR_CHOOSER(p));
-}
+static GtkExpander *toGtkExpander(void *p) { return (GTK_EXPANDER(p)); }
 
-static GtkFontChooser *
-toGtkFontChooser(void *p)
-{
-	return (GTK_FONT_CHOOSER(p));
+static GtkFileChooser *toGtkFileChooser(void *p) {
+  return (GTK_FILE_CHOOSER(p));
 }
 
-static GtkRecentFilter *
-toGtkRecentFilter(void *p)
-{
-	return (GTK_RECENT_FILTER(p));
+static GtkFileChooserButton *toGtkFileChooserButton(void *p) {
+  return (GTK_FILE_CHOOSER_BUTTON(p));
 }
 
-static GtkRecentManager *
-toGtkRecentManager(void *p)
-{
-	return (GTK_RECENT_MANAGER(p));
+static GtkFileChooserDialog *toGtkFileChooserDialog(void *p) {
+  return (GTK_FILE_CHOOSER_DIALOG(p));
 }
 
-static GtkCheckMenuItem *
-toGtkCheckMenuItem(void *p)
-{
-	return (GTK_CHECK_MENU_ITEM(p));
+static GtkFileChooserWidget *toGtkFileChooserWidget(void *p) {
+  return (GTK_FILE_CHOOSER_WIDGET(p));
 }
 
-static GtkRadioMenuItem *
-toGtkRadioMenuItem(void *p)
-{
-	return (GTK_RADIO_MENU_ITEM(p));
-}
+static GtkFileFilter *toGtkFileFilter(void *p) { return (GTK_FILE_FILTER(p)); }
 
-static GtkToolItem *
-toGtkToolItem(void *p)
-{
-	return (GTK_TOOL_ITEM(p));
-}
+static GtkMenuButton *toGtkMenuButton(void *p) { return (GTK_MENU_BUTTON(p)); }
 
-static GtkToolbar *
-toGtkToolbar(void *p)
-{
-	return (GTK_TOOLBAR(p));
+static GtkRadioButton *toGtkRadioButton(void *p) {
+  return (GTK_RADIO_BUTTON(p));
 }
 
-static GtkTooltip *
-toGtkTooltip(void *p)
-{
-	return (GTK_TOOLTIP(p));
+static GtkRecentChooser *toGtkRecentChooser(void *p) {
+  return (GTK_RECENT_CHOOSER(p));
 }
 
-static GtkEditable *
-toGtkEditable(void *p)
-{
-	return (GTK_EDITABLE(p));
+static GtkRecentChooserMenu *toGtkRecentChooserMenu(void *p) {
+  return (GTK_RECENT_CHOOSER_MENU(p));
 }
 
-static GtkToolButton *
-toGtkToolButton(void *p)
-{
-	return (GTK_TOOL_BUTTON(p));
+static GtkColorChooser *toGtkColorChooser(void *p) {
+  return (GTK_COLOR_CHOOSER(p));
 }
 
-static GtkToggleToolButton *
-toGtkToggleToolButton(void *p)
-{
-	return (GTK_TOGGLE_TOOL_BUTTON(p));
+static GtkFontChooser *toGtkFontChooser(void *p) {
+  return (GTK_FONT_CHOOSER(p));
 }
 
-static GtkSeparatorToolItem *
-toGtkSeparatorToolItem(void *p)
-{
-	return (GTK_SEPARATOR_TOOL_ITEM(p));
+static GtkRecentFilter *toGtkRecentFilter(void *p) {
+  return (GTK_RECENT_FILTER(p));
 }
 
-static GtkCssProvider *
-toGtkCssProvider(void *p)
-{
-        return (GTK_CSS_PROVIDER(p));
+static GtkRecentManager *toGtkRecentManager(void *p) {
+  return (GTK_RECENT_MANAGER(p));
 }
 
-static GtkStyleContext *
-toGtkStyleContext(void *p)
-{
-        return (GTK_STYLE_CONTEXT(p));
+static GtkCheckMenuItem *toGtkCheckMenuItem(void *p) {
+  return (GTK_CHECK_MENU_ITEM(p));
 }
 
-static GtkStyleProvider *
-toGtkStyleProvider(void *p)
-{
-        return (GTK_STYLE_PROVIDER(p));
+static GtkRadioMenuItem *toGtkRadioMenuItem(void *p) {
+  return (GTK_RADIO_MENU_ITEM(p));
 }
 
-static GtkInfoBar *
-toGtkInfoBar(void *p)
-{
-	return (GTK_INFO_BAR(p));
-}
+static GtkToolItem *toGtkToolItem(void *p) { return (GTK_TOOL_ITEM(p)); }
 
-static GMenuModel *
-toGMenuModel(void *p)
-{
-	return (G_MENU_MODEL(p));
-}
+static GtkToolbar *toGtkToolbar(void *p) { return (GTK_TOOLBAR(p)); }
 
-static GActionGroup *
-toGActionGroup(void *p)
-{
-	return (G_ACTION_GROUP(p));
-}
+static GtkTooltip *toGtkTooltip(void *p) { return (GTK_TOOLTIP(p)); }
 
-static GdkPixbuf *
-toGdkPixbuf(void *p)
-{
-	return (GDK_PIXBUF(p));
-}
+static GtkEditable *toGtkEditable(void *p) { return (GTK_EDITABLE(p)); }
 
-static GdkScreen *
-toGdkScreen(void *p)
-{
-	return (GDK_SCREEN(p));
+static GtkToolButton *toGtkToolButton(void *p) { return (GTK_TOOL_BUTTON(p)); }
+
+static GtkToggleToolButton *toGtkToggleToolButton(void *p) {
+  return (GTK_TOGGLE_TOOL_BUTTON(p));
 }
 
-static GdkDevice *
-toGdkDevice(void *p)
-{
-	return (GDK_DEVICE(p));
+static GtkSeparatorToolItem *toGtkSeparatorToolItem(void *p) {
+  return (GTK_SEPARATOR_TOOL_ITEM(p));
 }
 
-static GObject *
-toGObject(void *p)
-{
-	return (G_OBJECT(p));
+static GtkCssProvider *toGtkCssProvider(void *p) {
+  return (GTK_CSS_PROVIDER(p));
 }
 
-static GType *
-alloc_types(int n) {
-	return ((GType *)g_new0(GType, n));
+static GtkStyleContext *toGtkStyleContext(void *p) {
+  return (GTK_STYLE_CONTEXT(p));
 }
 
-static void
-set_type(GType *types, int n, GType t)
-{
-	types[n] = t;
+static GtkStyleProvider *toGtkStyleProvider(void *p) {
+  return (GTK_STYLE_PROVIDER(p));
 }
 
+static GtkInfoBar *toGtkInfoBar(void *p) { return (GTK_INFO_BAR(p)); }
+
+static GMenuModel *toGMenuModel(void *p) { return (G_MENU_MODEL(p)); }
+
+static GActionGroup *toGActionGroup(void *p) { return (G_ACTION_GROUP(p)); }
+
+static GdkPixbuf *toGdkPixbuf(void *p) { return (GDK_PIXBUF(p)); }
+
+static GdkScreen *toGdkScreen(void *p) { return (GDK_SCREEN(p)); }
+
+static GdkDevice *toGdkDevice(void *p) { return (GDK_DEVICE(p)); }
+
+static GObject *toGObject(void *p) { return (G_OBJECT(p)); }
+
+static GType *alloc_types(int n) { return ((GType *)g_new0(GType, n)); }
+
+static void set_type(GType *types, int n, GType t) { types[n] = t; }
+
 // _gtk_test_init is a wrapper to use gtk_test_init directly from go.
-// The variadic part on gtk_test_init is not used at the moment, according to the documentation.
-static void _gtk_test_init(int *argcp, char ***argvp)
-{
-	gtk_test_init(argcp, argvp);
+// The variadic part on gtk_test_init is not used at the moment, according to
+// the documentation.
+static void _gtk_test_init(int *argcp, char ***argvp) {
+  gtk_test_init(argcp, argvp);
 }
 
-static GtkTreeViewColumn *
-_gtk_tree_view_column_new_with_attributes_one(const gchar *title,
-    GtkCellRenderer *renderer, const gchar *attribute, gint column)
-{
-	GtkTreeViewColumn	*tvc;
+static GtkTreeViewColumn *_gtk_tree_view_column_new_with_attributes_one(
+    const gchar *title, GtkCellRenderer *renderer, const gchar *attribute,
+    gint column) {
+  GtkTreeViewColumn *tvc;
 
-	tvc = gtk_tree_view_column_new_with_attributes(title, renderer,
-	    attribute, column, NULL);
-	return (tvc);
+  tvc = gtk_tree_view_column_new_with_attributes(title, renderer, attribute,
+                                                 column, NULL);
+  return (tvc);
 }
 
-static void
-_gtk_list_store_set(GtkListStore *list_store, GtkTreeIter *iter, gint column,
-	void* value)
-{
-	gtk_list_store_set(list_store, iter, column, value, -1);
+static void _gtk_list_store_set(GtkListStore *list_store, GtkTreeIter *iter,
+                                gint column, void *value) {
+  gtk_list_store_set(list_store, iter, column, value, -1);
 }
 
-static void
-_gtk_tree_store_set(GtkTreeStore *store, GtkTreeIter *iter, gint column,
-	void* value)
-{
-	gtk_tree_store_set(store, iter, column, value, -1);
+static void _gtk_tree_store_set(GtkTreeStore *store, GtkTreeIter *iter,
+                                gint column, void *value) {
+  gtk_tree_store_set(store, iter, column, value, -1);
 }
 
-extern gboolean substring_match_equal_func(GtkTreeModel *model,
-                                          gint column,
-                                          gchar *key,
-                                          GtkTreeIter *iter,
-                                          gpointer data);
+extern gboolean substring_match_equal_func(GtkTreeModel *model, gint column,
+                                           gchar *key, GtkTreeIter *iter,
+                                           gpointer data);
 
-static GtkWidget *
-_gtk_message_dialog_new(GtkWindow *parent, GtkDialogFlags flags,
-    GtkMessageType type, GtkButtonsType buttons, char *msg)
-{
-	GtkWidget		*w;
+static GtkWidget *_gtk_message_dialog_new(GtkWindow *parent,
+                                          GtkDialogFlags flags,
+                                          GtkMessageType type,
+                                          GtkButtonsType buttons, char *msg) {
+  GtkWidget *w;
 
-	w = gtk_message_dialog_new(parent, flags, type, buttons, "%s", msg);
-	return (w);
+  w = gtk_message_dialog_new(parent, flags, type, buttons, "%s", msg);
+  return (w);
 }
 
-static GtkWidget *
-_gtk_message_dialog_new_with_markup(GtkWindow *parent, GtkDialogFlags flags,
-    GtkMessageType type, GtkButtonsType buttons, char *msg)
-{
-	GtkWidget		*w;
+static GtkWidget *_gtk_message_dialog_new_with_markup(GtkWindow *parent,
+                                                      GtkDialogFlags flags,
+                                                      GtkMessageType type,
+                                                      GtkButtonsType buttons,
+                                                      char *msg) {
+  GtkWidget *w;
 
-	w = gtk_message_dialog_new_with_markup(parent, flags, type, buttons,
-	    "%s", msg);
-	return (w);
+  w = gtk_message_dialog_new_with_markup(parent, flags, type, buttons, "%s",
+                                         msg);
+  return (w);
 }
 
 static void
 _gtk_message_dialog_format_secondary_text(GtkMessageDialog *message_dialog,
-    const gchar *msg)
-{
-	gtk_message_dialog_format_secondary_text(message_dialog, "%s", msg);
+                                          const gchar *msg) {
+  gtk_message_dialog_format_secondary_text(message_dialog, "%s", msg);
 }
 
 static void
 _gtk_message_dialog_format_secondary_markup(GtkMessageDialog *message_dialog,
-    const gchar *msg)
-{
-	gtk_message_dialog_format_secondary_markup(message_dialog, "%s", msg);
+                                            const gchar *msg) {
+  gtk_message_dialog_format_secondary_markup(message_dialog, "%s", msg);
 }
 
-static const gchar *
-object_get_class_name(GObject *object)
-{
-	return G_OBJECT_CLASS_NAME(G_OBJECT_GET_CLASS(object));
+static const gchar *object_get_class_name(GObject *object) {
+  return G_OBJECT_CLASS_NAME(G_OBJECT_GET_CLASS(object));
 }
 
-static GtkWidget *
-gtk_file_chooser_dialog_new_1(
-	const gchar *title,
-	GtkWindow *parent,
-	GtkFileChooserAction action,
-	const gchar *first_button_text, int first_button_id
-) {
-	return gtk_file_chooser_dialog_new(
-		title, parent, action,
-		first_button_text, first_button_id,
-		NULL);
+static GtkWidget *gtk_file_chooser_dialog_new_1(const gchar *title,
+                                                GtkWindow *parent,
+                                                GtkFileChooserAction action,
+                                                const gchar *first_button_text,
+                                                int first_button_id) {
+  return gtk_file_chooser_dialog_new(title, parent, action, first_button_text,
+                                     first_button_id, NULL);
 }
 
-static GtkWidget *
-gtk_file_chooser_dialog_new_2(
-	const gchar *title,
-	GtkWindow *parent,
-	GtkFileChooserAction action,
-	const gchar *first_button_text, int first_button_id,
-	const gchar *second_button_text, int second_button_id
-) {
-	return gtk_file_chooser_dialog_new(
-		title, parent, action,
-		first_button_text, first_button_id,
-		second_button_text, second_button_id,
-		NULL);
+static GtkWidget *gtk_file_chooser_dialog_new_2(
+    const gchar *title, GtkWindow *parent, GtkFileChooserAction action,
+    const gchar *first_button_text, int first_button_id,
+    const gchar *second_button_text, int second_button_id) {
+  return gtk_file_chooser_dialog_new(title, parent, action, first_button_text,
+                                     first_button_id, second_button_text,
+                                     second_button_id, NULL);
 }
 
-static void _gtk_widget_hide_on_delete(GtkWidget* w) {
-	g_signal_connect(GTK_WIDGET(w), "delete-event", G_CALLBACK(gtk_widget_hide_on_delete), NULL);
+static void _gtk_widget_hide_on_delete(GtkWidget *w) {
+  g_signal_connect(GTK_WIDGET(w), "delete-event",
+                   G_CALLBACK(gtk_widget_hide_on_delete), NULL);
 }
 
-static inline gchar** make_strings(int count) {
-	return (gchar**)malloc(sizeof(gchar*) * count);
+static inline gchar **make_strings(int count) {
+  return (gchar **)malloc(sizeof(gchar *) * count);
 }
 
-static inline void destroy_strings(gchar** strings) {
-	free(strings);
-}
+static inline void destroy_strings(gchar **strings) { free(strings); }
 
-static inline gchar* get_string(gchar** strings, int n) {
-	return strings[n];
-}
+static inline gchar *get_string(gchar **strings, int n) { return strings[n]; }
 
-static inline void set_string(gchar** strings, int n, gchar* str) {
-	strings[n] = str;
+static inline void set_string(gchar **strings, int n, gchar *str) {
+  strings[n] = str;
 }
 
-static inline gchar** next_gcharptr(gchar** s) { return (s+1); }
-
-extern void goBuilderConnect (GtkBuilder *builder,
-                          GObject *object,
-                          gchar *signal_name,
-                          gchar *handler_name,
-                          GObject *connect_object,
-                          GConnectFlags flags,
-                          gpointer user_data);
+extern void goBuilderConnect(GtkBuilder *builder, GObject *object,
+                             gchar *signal_name, gchar *handler_name,
+                             GObject *connect_object, GConnectFlags flags,
+                             gpointer user_data);
 
 static inline void _gtk_builder_connect_signals_full(GtkBuilder *builder) {
-	gtk_builder_connect_signals_full(builder, (GtkBuilderConnectFunc)(goBuilderConnect), NULL);
+  gtk_builder_connect_signals_full(
+      builder, (GtkBuilderConnectFunc)(goBuilderConnect), NULL);
 }
 
-extern void goPrintSettings (gchar *key,
-	                     gchar *value,
-                         gpointer user_data);
-
-static inline void _gtk_print_settings_foreach(GtkPrintSettings *ps, gpointer user_data) {
-	gtk_print_settings_foreach(ps, (GtkPrintSettingsFunc)(goPrintSettings), user_data);
-}
-
-extern void goPageSetupDone (GtkPageSetup *setup,
-                         gpointer data);
+extern gboolean goTreeViewSearchEqualFunc(GtkTreeModel *model, gint column,
+                                          gchar *key, GtkTreeIter *iter,
+                                          gpointer data);
 
-static inline void _gtk_print_run_page_setup_dialog_async(GtkWindow *parent, GtkPageSetup *setup,
-	GtkPrintSettings *settings, gpointer data) {
-	gtk_print_run_page_setup_dialog_async(parent, setup, settings,
-		(GtkPageSetupDoneFunc)(goPageSetupDone), data);
+static inline void _gtk_tree_view_set_search_equal_func(GtkTreeView *tree_view,
+                                                        gpointer user_data) {
+  gtk_tree_view_set_search_equal_func(
+      tree_view, (GtkTreeViewSearchEqualFunc)(goTreeViewSearchEqualFunc),
+      user_data, (GDestroyNotify)(gotk3_callbackDelete));
 }
 
-extern gboolean goTreeModelFilterFuncs (GtkTreeModel *model, GtkTreeIter *iter, gpointer data);
+extern gboolean goTreeModelFilterVisibleFunc(GtkTreeModel *model,
+                                             GtkTreeIter *iter, gpointer data);
 
-static inline void _gtk_tree_model_filter_set_visible_func(GtkTreeModelFilter *filter, gpointer user_data) {
-    gtk_tree_model_filter_set_visible_func(filter, (GtkTreeModelFilterVisibleFunc)(goTreeModelFilterFuncs), user_data, NULL);
+static inline void
+_gtk_tree_model_filter_set_visible_func(GtkTreeModelFilter *filter,
+                                        gpointer user_data) {
+  gtk_tree_model_filter_set_visible_func(
+      filter, (GtkTreeModelFilterVisibleFunc)(goTreeModelFilterVisibleFunc),
+      user_data, (GDestroyNotify)(gotk3_callbackDelete));
 }
 
-static inline void _gtk_text_buffer_insert_with_tag_by_name(GtkTextBuffer* buffer, GtkTextIter* iter, const gchar* text, gint len, const gchar* first_tag_name) {
-	gtk_text_buffer_insert_with_tags_by_name(buffer, iter, text, len, first_tag_name, NULL);
+static inline void _gtk_text_buffer_insert_with_tag_by_name(
+    GtkTextBuffer *buffer, GtkTextIter *iter, const gchar *text, gint len,
+    const gchar *first_tag_name) {
+  gtk_text_buffer_insert_with_tags_by_name(buffer, iter, text, len,
+                                           first_tag_name, NULL);
 }
 
-static inline void _gtk_text_buffer_insert_with_tag(GtkTextBuffer* buffer, GtkTextIter* iter, const gchar* text, gint len, GtkTextTag* tag) {
-	gtk_text_buffer_insert_with_tags(buffer, iter, text, len, tag, NULL);
+static inline void _gtk_text_buffer_insert_with_tag(GtkTextBuffer *buffer,
+                                                    GtkTextIter *iter,
+                                                    const gchar *text, gint len,
+                                                    GtkTextTag *tag) {
+  gtk_text_buffer_insert_with_tags(buffer, iter, text, len, tag, NULL);
 }
 
-extern gint goTreeSortableSortFuncs(GtkTreeModel *model, GtkTreeIter *a, GtkTreeIter *b, gpointer data);
+extern gint goTreeSortableSortFunc(GtkTreeModel *model, GtkTreeIter *a,
+                                   GtkTreeIter *b, gpointer data);
 
-static inline void _gtk_tree_sortable_set_sort_func(GtkTreeSortable *sortable, gint sort_column_id, gpointer user_data) {
-    gtk_tree_sortable_set_sort_func(sortable, sort_column_id, (GtkTreeIterCompareFunc)(goTreeSortableSortFuncs), user_data, NULL);
+static inline void _gtk_tree_sortable_set_sort_func(GtkTreeSortable *sortable,
+                                                    gint sort_column_id,
+                                                    gpointer user_data) {
+  gtk_tree_sortable_set_sort_func(
+      sortable, sort_column_id,
+      (GtkTreeIterCompareFunc)(goTreeSortableSortFunc), user_data, NULL);
 }
 
-static inline void _gtk_tree_sortable_set_default_sort_func(GtkTreeSortable *sortable, gpointer user_data) {
-    gtk_tree_sortable_set_default_sort_func(sortable, (GtkTreeIterCompareFunc)(goTreeSortableSortFuncs), user_data, NULL);
+static inline void
+_gtk_tree_sortable_set_default_sort_func(GtkTreeSortable *sortable,
+                                         gpointer user_data) {
+  gtk_tree_sortable_set_default_sort_func(
+      sortable, (GtkTreeIterCompareFunc)(goTreeSortableSortFunc), user_data,
+      (GDestroyNotify)(gotk3_callbackDelete));
 }
 
-static GtkWidget *
-_gtk_dialog_new_with_buttons(const gchar    *title,
-                             GtkWindow      *parent,
-                             GtkDialogFlags  flags,
-                             const gchar    *first_button_text) {
-	GtkWidget		*w;
+static GtkWidget *_gtk_dialog_new_with_buttons(const gchar *title,
+                                               GtkWindow *parent,
+                                               GtkDialogFlags flags,
+                                               const gchar *first_button_text) {
+  GtkWidget *w;
 
-	w = gtk_dialog_new_with_buttons(title, parent, flags, first_button_text, NULL);
-	return (w);
+  w = gtk_dialog_new_with_buttons(title, parent, flags, first_button_text,
+                                  NULL);
+  return (w);
 }
 
-extern gint goTreeModelForeachFunc(GtkTreeModel *model, GtkTreePath *path, GtkTreeIter *iter, gpointer data);
+extern gint goTreeModelForeachFunc(GtkTreeModel *model, GtkTreePath *path,
+                                   GtkTreeIter *iter, gpointer data);
 
-static inline void _gtk_tree_model_foreach(GtkTreeModel *model, gpointer user_data) {
-    gtk_tree_model_foreach(model, (GtkTreeModelForeachFunc)(goTreeModelForeachFunc), user_data);
+static inline void _gtk_tree_model_foreach(GtkTreeModel *model,
+                                           gpointer user_data) {
+  gtk_tree_model_foreach(
+      model, (GtkTreeModelForeachFunc)(goTreeModelForeachFunc), user_data);
+}
 
+extern void goTreeSelectionForeachFunc(GtkTreeModel *model, GtkTreePath *path,
+                                       GtkTreeIter *iter, gpointer data);
+
+static inline void
+_gtk_tree_selection_selected_foreach(GtkTreeSelection *selection,
+                                     gpointer user_data) {
+  gtk_tree_selection_selected_foreach(
+      selection, (GtkTreeSelectionForeachFunc)(goTreeSelectionForeachFunc),
+      user_data);
 }
 
-extern void goTreeSelectionForeachFunc(GtkTreeModel *model, GtkTreePath *path, GtkTreeIter *iter, gpointer data);
+extern gboolean goTreeSelectionFunc(GtkTreeSelection *selection,
+                                    GtkTreeModel *model, GtkTreePath *path,
+                                    gboolean selected, gpointer data);
+
+static inline void
+_gtk_tree_selection_set_select_function(GtkTreeSelection *selection,
+                                        gpointer user_data) {
+  gtk_tree_selection_set_select_function(
 
-static inline void _gtk_tree_selection_selected_foreach(GtkTreeSelection *selection, gpointer user_data) {
-    gtk_tree_selection_selected_foreach(selection, (GtkTreeSelectionForeachFunc)(goTreeSelectionForeachFunc), user_data);
+      selection, (GtkTreeSelectionFunc)(goTreeSelectionFunc), user_data,
+      (GDestroyNotify)(gotk3_callbackDelete));
 }
diff --git a/vendor/github.com/gotk3/gotk3/gtk/gtk_deprecated_since_3_10.go b/vendor/github.com/gotk3/gotk3/gtk/gtk_deprecated_since_3_10.go
index 8cc4f4899d84..c9b47e728c99 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/gtk_deprecated_since_3_10.go
+++ b/vendor/github.com/gotk3/gotk3/gtk/gtk_deprecated_since_3_10.go
@@ -19,7 +19,7 @@
 // 3.8 or earlier.  To target an earlier build build, use the build tag
 // gtk_MAJOR_MINOR.  For example, to target GTK 3.8, run
 // 'go build -tags gtk_3_8'.
-// +build gtk_3_6 gtk_3_8
+// +build gtk_3_6 gtk_3_8 gtk_deprecated
 
 package gtk
 
diff --git a/vendor/github.com/gotk3/gotk3/gtk/gtk_deprecated_since_3_12.go b/vendor/github.com/gotk3/gotk3/gtk/gtk_deprecated_since_3_12.go
index 1d296f06658d..293febc7bf72 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/gtk_deprecated_since_3_12.go
+++ b/vendor/github.com/gotk3/gotk3/gtk/gtk_deprecated_since_3_12.go
@@ -19,29 +19,24 @@
 // 3.10 or earlier.  To target an earlier build build, use the build tag
 // gtk_MAJOR_MINOR.  For example, to target GTK 3.8, run
 // 'go build -tags gtk_3_8'.
-// +build gtk_3_6 gtk_3_8 gtk_3_10
+// +build gtk_3_6 gtk_3_8 gtk_3_10 gtk_deprecated
 
 package gtk
 
 // #include <gtk/gtk.h>
 import "C"
-import (
-	"unsafe"
-
-	"github.com/gotk3/gotk3/glib"
-)
 
 /*
  * GtkDialog
  */
 
 // GetActionArea() is a wrapper around gtk_dialog_get_action_area().
-func (v *Dialog) GetActionArea() (*Widget, error) {
+func (v *Dialog) GetActionArea() (IWidget, error) {
 	c := C.gtk_dialog_get_action_area(v.native())
 	if c == nil {
 		return nil, nilPtrErr
 	}
-	return wrapWidget(glib.Take(unsafe.Pointer(c))), nil
+	return castWidget(c)
 }
 
 /*
@@ -49,12 +44,12 @@ func (v *Dialog) GetActionArea() (*Widget, error) {
  */
 
 // GetImage is a wrapper around gtk_message_dialog_get_image().
-func (v *MessageDialog) GetImage() (*Widget, error) {
+func (v *MessageDialog) GetImage() (IWidget, error) {
 	c := C.gtk_message_dialog_get_image(v.native())
 	if c == nil {
 		return nil, nilPtrErr
 	}
-	return wrapWidget(glib.Take(unsafe.Pointer(c))), nil
+	return castWidget(c)
 }
 
 // SetImage is a wrapper around gtk_message_dialog_set_image().
diff --git a/vendor/github.com/gotk3/gotk3/gtk/gtk_deprecated_since_3_14.go b/vendor/github.com/gotk3/gotk3/gtk/gtk_deprecated_since_3_14.go
index b2acfeb9272e..9984f7e23847 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/gtk_deprecated_since_3_14.go
+++ b/vendor/github.com/gotk3/gotk3/gtk/gtk_deprecated_since_3_14.go
@@ -1,4 +1,4 @@
-// +build gtk_3_6 gtk_3_8 gtk_3_10 gtk_3_12
+// +build gtk_3_6 gtk_3_8 gtk_3_10 gtk_3_12 gtk_deprecated
 
 package gtk
 
@@ -215,6 +215,10 @@ func marshalArrow(p uintptr) (interface{}, error) {
 }
 
 func wrapArrow(obj *glib.Object) *Arrow {
+	if obj == nil {
+		return nil
+	}
+
 	return &Arrow{Misc{Widget{glib.InitiallyUnowned{obj}}}}
 }
 
@@ -243,6 +247,10 @@ func marshalAlignment(p uintptr) (interface{}, error) {
 }
 
 func wrapAlignment(obj *glib.Object) *Alignment {
+	if obj == nil {
+		return nil
+	}
+
 	return &Alignment{Bin{Container{Widget{glib.InitiallyUnowned{obj}}}}}
 }
 
@@ -265,6 +273,10 @@ func marshalStatusIcon(p uintptr) (interface{}, error) {
 }
 
 func wrapStatusIcon(obj *glib.Object) *StatusIcon {
+	if obj == nil {
+		return nil
+	}
+
 	return &StatusIcon{obj}
 }
 
@@ -455,7 +467,7 @@ func (v *StatusIcon) GetSize() int {
 
 // PopupAtStatusIcon() is a wrapper around gtk_menu_popup() specific to usage with GtkStatusIcon.
 // gomenu_popup() is defined in menu.go.h, this is a workaround to pass gtk_status_icon_position_menu as the GtkMenuPositionFunc.
-func (v *Menu) PopupAtStatusIcon(statusIcon *StatusIcon, button uint, activateTime uint32) {
+func (v *Menu) PopupAtStatusIcon(statusIcon *StatusIcon, button gdk.Button, activateTime uint32) {
 	C.gotk_menu_popup_at_status_icon(v.native(), statusIcon.native(), C.guint(button), C.guint32(activateTime))
 }
 
@@ -484,6 +496,10 @@ func marshalMisc(p uintptr) (interface{}, error) {
 }
 
 func wrapMisc(obj *glib.Object) *Misc {
+	if obj == nil {
+		return nil
+	}
+
 	return &Misc{Widget{glib.InitiallyUnowned{obj}}}
 }
 
diff --git a/vendor/github.com/gotk3/gotk3/gtk/gtk_deprecated_since_3_14.go.h b/vendor/github.com/gotk3/gotk3/gtk/gtk_deprecated_since_3_14.go.h
index 18a1855e2c36..f5ad487d5838 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/gtk_deprecated_since_3_14.go.h
+++ b/vendor/github.com/gotk3/gotk3/gtk/gtk_deprecated_since_3_14.go.h
@@ -3,43 +3,25 @@
  * deprecated since version 3.14
  */
 
-// Wrapper for gtk_menu_popup to allow calling gtk_status_icon_position_menu as callback from go code
-// Used in func (v *Menu) PopupAtStatusIcon
-static void
-gotk_menu_popup_at_status_icon(GtkMenu *menu, GtkStatusIcon *status_icon, guint button, guint32 activate_time)
-{
-	gtk_menu_popup(menu, NULL, NULL, gtk_status_icon_position_menu, status_icon, button, activate_time);
+// Wrapper for gtk_menu_popup to allow calling gtk_status_icon_position_menu as
+// callback from go code Used in func (v *Menu) PopupAtStatusIcon
+static void gotk_menu_popup_at_status_icon(GtkMenu *menu,
+                                           GtkStatusIcon *status_icon,
+                                           guint button,
+                                           guint32 activate_time) {
+  gtk_menu_popup(menu, NULL, NULL, gtk_status_icon_position_menu, status_icon,
+                 button, activate_time);
 }
 
-static GtkAlignment *
-toGtkAlignment(void *p)
-{
-	return (GTK_ALIGNMENT(p));
-}
+static GtkAlignment *toGtkAlignment(void *p) { return (GTK_ALIGNMENT(p)); }
 
-static GtkArrow *
-toGtkArrow(void *p)
-{
-	return (GTK_ARROW(p));
-}
+static GtkArrow *toGtkArrow(void *p) { return (GTK_ARROW(p)); }
 
-static GtkMisc *
-toGtkMisc(void *p)
-{
-	return (GTK_MISC(p));
-}
+static GtkMisc *toGtkMisc(void *p) { return (GTK_MISC(p)); }
 
-static GtkStatusIcon *
-toGtkStatusIcon(void *p)
-{
-	return (GTK_STATUS_ICON(p));
-}
+static GtkStatusIcon *toGtkStatusIcon(void *p) { return (GTK_STATUS_ICON(p)); }
 
-static GdkPixbuf *
-toGdkPixbuf(void *p)
-{
-	return (GDK_PIXBUF(p));
-}
+static GdkPixbuf *toGdkPixbuf(void *p) { return (GDK_PIXBUF(p)); }
 
 /*
  * End deprecated since version 3.14
diff --git a/vendor/github.com/gotk3/gotk3/gtk/gtk_deprecated_since_3_16.go b/vendor/github.com/gotk3/gotk3/gtk/gtk_deprecated_since_3_16.go
index 0d612c2d256c..ef51cf1f43da 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/gtk_deprecated_since_3_16.go
+++ b/vendor/github.com/gotk3/gotk3/gtk/gtk_deprecated_since_3_16.go
@@ -1,4 +1,4 @@
-//+build gtk_3_6 gtk_3_8 gtk_3_10 gtk_3_12 gtk_3_14
+//+build gtk_3_6 gtk_3_8 gtk_3_10 gtk_3_12 gtk_3_14 gtk_deprecated
 
 package gtk
 
diff --git a/vendor/github.com/gotk3/gotk3/gtk/gtk_deprecated_since_3_18.go b/vendor/github.com/gotk3/gotk3/gtk/gtk_deprecated_since_3_18.go
index a12f572f39ca..06f9ec54e436 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/gtk_deprecated_since_3_18.go
+++ b/vendor/github.com/gotk3/gotk3/gtk/gtk_deprecated_since_3_18.go
@@ -1,4 +1,4 @@
-//+build gtk_3_6 gtk_3_8 gtk_3_10 gtk_3_12 gtk_3_14 gtk_3_16
+//+build gtk_3_6 gtk_3_8 gtk_3_10 gtk_3_12 gtk_3_14 gtk_3_16 gtk_deprecated
 
 package gtk
 
diff --git a/vendor/github.com/gotk3/gotk3/gtk/gtk_deprecated_since_3_20.go b/vendor/github.com/gotk3/gotk3/gtk/gtk_deprecated_since_3_20.go
index 7b49d8041a35..3edf2f0718e6 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/gtk_deprecated_since_3_20.go
+++ b/vendor/github.com/gotk3/gotk3/gtk/gtk_deprecated_since_3_20.go
@@ -1,4 +1,4 @@
-//+build gtk_3_6 gtk_3_8 gtk_3_10 gtk_3_12 gtk_3_14 gtk_3_16 gtk_3_18
+//+build gtk_3_6 gtk_3_8 gtk_3_10 gtk_3_12 gtk_3_14 gtk_3_16 gtk_3_18 gtk_deprecated
 
 package gtk
 
@@ -28,21 +28,44 @@ import (
  * GtkFileChooserButton
  */
 
-// TODO:
-// gtk_file_chooser_button_get_focus_on_click().
-// gtk_file_chooser_button_set_focus_on_click().
+// GetFocusOnClick is a wrapper around gtk_file_chooser_button_get_focus_on_click().
+func (v *FileChooserButton) GetFocusOnClick() bool {
+	return gobool(C.gtk_file_chooser_button_get_focus_on_click(v.native()))
+}
+
+// SetFocusOnClick is a wrapper around gtk_file_chooser_button_set_focus_on_click().
+func (v *FileChooserButton) SetFocusOnClick(grabFocus bool) {
+	C.gtk_file_chooser_button_set_focus_on_click(v.native(), gbool(grabFocus))
+}
 
-// GetFocusOnClick() is a wrapper around gtk_button_get_focus_on_click().
+/*
+ * GtkButton
+ */
+
+// GetFocusOnClick is a wrapper around gtk_button_get_focus_on_click().
 func (v *Button) GetFocusOnClick() bool {
 	c := C.gtk_button_get_focus_on_click(v.native())
 	return gobool(c)
 }
 
+// SetFocusOnClick is a wrapper around gtk_button_set_focus_on_click().
+func (v *Button) SetFocusOnClick(focusOnClick bool) {
+	C.gtk_button_set_focus_on_click(v.native(), gbool(focusOnClick))
+}
+
+/*
+ * GtkTextIter
+ */
+
 // BeginsTag is a wrapper around gtk_text_iter_begins_tag().
 func (v *TextIter) BeginsTag(v1 *TextTag) bool {
 	return gobool(C.gtk_text_iter_begins_tag(v.native(), v1.native()))
 }
 
+/*
+ * GtkWindow
+ */
+
 // ParseGeometry is a wrapper around gtk_window_parse_geometry().
 func (v *Window) ParseGeometry(geometry string) bool {
 	cstr := C.CString(geometry)
@@ -61,8 +84,3 @@ func (v *Window) SetDefaultGeometry(width, height int) {
 	C.gtk_window_set_default_geometry(v.native(), C.gint(width),
 		C.gint(height))
 }
-
-// SetFocusOnClick() is a wrapper around gtk_button_set_focus_on_click().
-func (v *Button) SetFocusOnClick(focusOnClick bool) {
-	C.gtk_button_set_focus_on_click(v.native(), gbool(focusOnClick))
-}
diff --git a/vendor/github.com/gotk3/gotk3/gtk/gtk_deprecated_since_3_22.go b/vendor/github.com/gotk3/gotk3/gtk/gtk_deprecated_since_3_22.go
index bb1d429a0baa..7f658b729a81 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/gtk_deprecated_since_3_22.go
+++ b/vendor/github.com/gotk3/gotk3/gtk/gtk_deprecated_since_3_22.go
@@ -1,4 +1,4 @@
-//+build gtk_3_6 gtk_3_8 gtk_3_10 gtk_3_12 gtk_3_14 gtk_3_16 gtk_3_18 gtk_3_20
+//+build gtk_3_6 gtk_3_8 gtk_3_10 gtk_3_12 gtk_3_14 gtk_3_16 gtk_3_18 gtk_3_20 gtk_deprecated
 
 package gtk
 
@@ -8,6 +8,8 @@ import "C"
 
 import (
 	"unsafe"
+
+	"github.com/gotk3/gotk3/gdk"
 )
 
 /*
@@ -19,7 +21,7 @@ import (
 // gtk_widget_is_composited().
 
 // PopupAtMouse() is a wrapper for gtk_menu_popup(), without the option for a custom positioning function.
-func (v *Menu) PopupAtMouseCursor(parentMenuShell IMenu, parentMenuItem IMenuItem, button int, activateTime uint32) {
+func (v *Menu) PopupAtMouseCursor(parentMenuShell IMenu, parentMenuItem IMenuItem, button gdk.Button, activateTime uint32) {
 	wshell := nullableWidget(parentMenuShell)
 	witem := nullableWidget(parentMenuItem)
 
diff --git a/vendor/github.com/gotk3/gotk3/gtk/gtk_deprecated_since_3_24.go b/vendor/github.com/gotk3/gotk3/gtk/gtk_deprecated_since_3_24.go
index 675593af3026..14541edb536e 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/gtk_deprecated_since_3_24.go
+++ b/vendor/github.com/gotk3/gotk3/gtk/gtk_deprecated_since_3_24.go
@@ -1,4 +1,4 @@
-//+build gtk_3_6 gtk_3_8 gtk_3_10 gtk_3_12 gtk_3_14 gtk_3_16 gtk_3_18 gtk_3_20 gtk_3_22
+//+build gtk_3_6 gtk_3_8 gtk_3_10 gtk_3_12 gtk_3_14 gtk_3_16 gtk_3_18 gtk_3_20 gtk_3_22 gtk_deprecated
 
 package gtk
 
@@ -6,22 +6,35 @@ package gtk
 // #include <stdlib.h>
 import "C"
 import (
+	"fmt"
 	"unsafe"
 
 	"github.com/gotk3/gotk3/glib"
 )
 
 // GetFocusChain is a wrapper around gtk_container_get_focus_chain().
-func (v *Container) GetFocusChain() ([]*Widget, bool) {
+func (v *Container) GetFocusChain() ([]IWidget, bool, error) {
 	var cwlist *C.GList
 	c := C.gtk_container_get_focus_chain(v.native(), &cwlist)
 
-	var widgets []*Widget
+	if cwlist == nil {
+		return nil, gobool(c), nil
+	}
+
+	var widgets []IWidget
 	wlist := glib.WrapList(uintptr(unsafe.Pointer(cwlist)))
 	for ; wlist.Data() != nil; wlist = wlist.Next() {
-		widgets = append(widgets, wrapWidget(glib.Take(wlist.Data().(unsafe.Pointer))))
+		w, ok := wlist.Data().(*Widget)
+		if !ok {
+			return nil, gobool(c), fmt.Errorf("element is not of type *Widget, got %T", w)
+		}
+		widget, err := castWidget(w.toWidget())
+		if err != nil {
+			return nil, gobool(c), err
+		}
+		widgets = append(widgets, widget)
 	}
-	return widgets, gobool(c)
+	return widgets, gobool(c), nil
 }
 
 /*
diff --git a/vendor/github.com/gotk3/gotk3/gtk/gtk_deprecated_since_3_8.go b/vendor/github.com/gotk3/gotk3/gtk/gtk_deprecated_since_3_8.go
index 223ddf0e00ff..815521da3fdb 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/gtk_deprecated_since_3_8.go
+++ b/vendor/github.com/gotk3/gotk3/gtk/gtk_deprecated_since_3_8.go
@@ -19,7 +19,7 @@
 // 3.6 or earlier.  To target an earlier build build, use the build tag
 // gtk_MAJOR_MINOR.  For example, to target GTK 3.6, run
 // 'go build -tags gtk_3_6'.
-// +build gtk_3_6
+// +build gtk_3_6 gtk_deprecated
 
 package gtk
 
diff --git a/vendor/github.com/gotk3/gotk3/gtk/gtk_export.go b/vendor/github.com/gotk3/gotk3/gtk/gtk_export.go
index d301dfd7b5d9..6c0153a9af16 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/gtk_export.go
+++ b/vendor/github.com/gotk3/gotk3/gtk/gtk_export.go
@@ -5,39 +5,15 @@ package gtk
 */
 import "C"
 import (
-	"strings"
 	"unsafe"
 
 	"github.com/gotk3/gotk3/glib"
+	"github.com/gotk3/gotk3/internal/callback"
 )
 
-//export substring_match_equal_func
-func substring_match_equal_func(model *C.GtkTreeModel,
-	column C.gint,
-	key *C.gchar,
-	iter *C.GtkTreeIter,
-	data C.gpointer) C.gboolean {
-
-	goModel := &TreeModel{glib.Take(unsafe.Pointer(model))}
-	goIter := &TreeIter{(C.GtkTreeIter)(*iter)}
-
-	value, err := goModel.GetValue(goIter, int(column))
-	if err != nil {
-		return gbool(true)
-	}
-
-	str, _ := value.GetString()
-	if str == "" {
-		return gbool(true)
-	}
-
-	subStr := C.GoString((*C.char)(key))
-	res := strings.Contains(str, subStr)
-	return gbool(!res)
-}
-
 //export goBuilderConnect
-func goBuilderConnect(builder *C.GtkBuilder,
+func goBuilderConnect(
+	builder *C.GtkBuilder,
 	object *C.GObject,
 	signal_name *C.gchar,
 	handler_name *C.gchar,
@@ -70,99 +46,64 @@ func goBuilderConnect(builder *C.GtkBuilder,
 	gobj.Connect(s, handler)
 }
 
-//export goPageSetupDone
-func goPageSetupDone(setup *C.GtkPageSetup,
-	data C.gpointer) {
-
-	id := int(uintptr(data))
-
-	pageSetupDoneCallbackRegistry.Lock()
-	r := pageSetupDoneCallbackRegistry.m[id]
-	delete(pageSetupDoneCallbackRegistry.m, id)
-	pageSetupDoneCallbackRegistry.Unlock()
-
-	obj := glib.Take(unsafe.Pointer(setup))
-	r.fn(wrapPageSetup(obj), r.data)
-
-}
-
-//export goPrintSettings
-func goPrintSettings(key *C.gchar,
-	value *C.gchar,
-	userData C.gpointer) {
-
-	id := int(uintptr(userData))
-
-	printSettingsCallbackRegistry.Lock()
-	r := printSettingsCallbackRegistry.m[id]
-	// TODO: figure out a way to determine when we can clean up
-	//delete(printSettingsCallbackRegistry.m, id)
-	printSettingsCallbackRegistry.Unlock()
-
-	r.fn(C.GoString((*C.char)(key)), C.GoString((*C.char)(value)), r.userData)
-
+//export goTreeViewSearchEqualFunc
+func goTreeViewSearchEqualFunc(model *C.GtkTreeModel, column C.gint, key *C.gchar, iter *C.GtkTreeIter, data C.gpointer) C.gboolean {
+	fn := callback.Get(uintptr(data)).(TreeViewSearchEqualFunc)
+	return gbool(fn(
+		wrapTreeModel(glib.Take(unsafe.Pointer(model))),
+		int(column),
+		C.GoString(key),
+		&TreeIter{(C.GtkTreeIter)(*iter)},
+	))
 }
 
-//export goTreeModelFilterFuncs
-func goTreeModelFilterFuncs(filter *C.GtkTreeModelFilter, iter *C.GtkTreeIter, data C.gpointer) C.gboolean {
-	id := int(uintptr(data))
-
-	treeModelVisibleFilterFuncRegistry.Lock()
-	r := treeModelVisibleFilterFuncRegistry.m[id]
-	treeModelVisibleFilterFuncRegistry.Unlock()
-
+//export goTreeModelFilterVisibleFunc
+func goTreeModelFilterVisibleFunc(model *C.GtkTreeModel, iter *C.GtkTreeIter, data C.gpointer) C.gboolean {
 	goIter := &TreeIter{(C.GtkTreeIter)(*iter)}
-	return gbool(r.fn(
-		wrapTreeModelFilter(glib.Take(unsafe.Pointer(filter))),
+	fn := callback.Get(uintptr(data)).(TreeModelFilterVisibleFunc)
+	return gbool(fn(
+		wrapTreeModel(glib.Take(unsafe.Pointer(model))),
 		goIter,
-		r.userData))
+	))
 }
 
-//export goTreeSortableSortFuncs
-func goTreeSortableSortFuncs(model *C.GtkTreeModel, a, b *C.GtkTreeIter, data C.gpointer) C.gint {
-	id := int(uintptr(data))
-
-	treeStoreSortFuncRegistry.Lock()
-	r := treeStoreSortFuncRegistry.m[id]
-	treeStoreSortFuncRegistry.Unlock()
-
-	goIterA := &TreeIter{(C.GtkTreeIter)(*a)}
-	goIterB := &TreeIter{(C.GtkTreeIter)(*b)}
-
-	return C.gint(r.fn(wrapTreeModel(glib.Take(unsafe.Pointer(model))), goIterA, goIterB, r.userData))
+//export goTreeSortableSortFunc
+func goTreeSortableSortFunc(model *C.GtkTreeModel, a, b *C.GtkTreeIter, data C.gpointer) C.gint {
+	fn := callback.Get(uintptr(data)).(TreeIterCompareFunc)
+	return C.gint(fn(
+		wrapTreeModel(glib.Take(unsafe.Pointer(model))),
+		&TreeIter{(C.GtkTreeIter)(*a)},
+		&TreeIter{(C.GtkTreeIter)(*b)},
+	))
 }
 
 //export goTreeModelForeachFunc
 func goTreeModelForeachFunc(model *C.GtkTreeModel, path *C.GtkTreePath, iter *C.GtkTreeIter, data C.gpointer) C.gboolean {
-	id := int(uintptr(data))
-
-	treeModelForeachFuncRegistry.Lock()
-	r := treeModelForeachFuncRegistry.m[id]
-	treeModelForeachFuncRegistry.Unlock()
-
-	goPath := &TreePath{(*C.GtkTreePath)(path)}
-	goIter := &TreeIter{(C.GtkTreeIter)(*iter)}
-	return gbool(r.fn(
+	fn := callback.Get(uintptr(data)).(TreeModelForeachFunc)
+	return gbool(fn(
 		wrapTreeModel(glib.Take(unsafe.Pointer(model))),
-		goPath,
-		goIter,
-		r.userData))
+		&TreePath{(*C.GtkTreePath)(path)},
+		&TreeIter{(C.GtkTreeIter)(*iter)},
+	))
 }
 
 //export goTreeSelectionForeachFunc
 func goTreeSelectionForeachFunc(model *C.GtkTreeModel, path *C.GtkTreePath, iter *C.GtkTreeIter, data C.gpointer) {
-	id := int(uintptr(data))
-
-	treeSelectionForeachFuncRegistry.Lock()
-	r := treeSelectionForeachFuncRegistry.m[id]
-	treeSelectionForeachFuncRegistry.Unlock()
-
-	goPath := &TreePath{(*C.GtkTreePath)(path)}
-	goIter := &TreeIter{(C.GtkTreeIter)(*iter)}
+	fn := callback.Get(uintptr(data)).(TreeSelectionForeachFunc)
+	fn(
+		wrapTreeModel(glib.Take(unsafe.Pointer(model))),
+		&TreePath{(*C.GtkTreePath)(path)},
+		&TreeIter{(C.GtkTreeIter)(*iter)},
+	)
+}
 
-	r.fn(
+//export goTreeSelectionFunc
+func goTreeSelectionFunc(selection *C.GtkTreeSelection, model *C.GtkTreeModel, path *C.GtkTreePath, selected C.gboolean, data C.gpointer) C.gboolean {
+	fn := callback.Get(uintptr(data)).(TreeSelectionFunc)
+	return gbool(fn(
+		wrapTreeSelection(glib.Take(unsafe.Pointer(selection))),
 		wrapTreeModel(glib.Take(unsafe.Pointer(model))),
-		goPath,
-		goIter,
-		r.userData)
+		&TreePath{(*C.GtkTreePath)(path)},
+		gobool(selected),
+	))
 }
diff --git a/vendor/github.com/gotk3/gotk3/gtk/gtk_export_since_3_10.go b/vendor/github.com/gotk3/gotk3/gtk/gtk_export_since_3_10.go
index b3084d8761c5..59b72e4b7896 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/gtk_export_since_3_10.go
+++ b/vendor/github.com/gotk3/gotk3/gtk/gtk_export_since_3_10.go
@@ -8,42 +8,29 @@ import (
 	"unsafe"
 
 	"github.com/gotk3/gotk3/glib"
+	"github.com/gotk3/gotk3/internal/callback"
 )
 
-// TODO: figure out a way to determine when we can clean up
-
 //export goListBoxFilterFuncs
 func goListBoxFilterFuncs(row *C.GtkListBoxRow, userData C.gpointer) C.gboolean {
-	id := int(uintptr(userData))
-
-	listBoxFilterFuncRegistry.Lock()
-	r := listBoxFilterFuncRegistry.m[id]
-	//delete(listBoxFilterFuncRegistry.m, id)
-	listBoxFilterFuncRegistry.Unlock()
-
-	return gbool(r.fn(wrapListBoxRow(glib.Take(unsafe.Pointer(row))), r.userData))
+	fn := callback.Get(uintptr(userData)).(ListBoxFilterFunc)
+	return gbool(fn(wrapListBoxRow(glib.Take(unsafe.Pointer(row)))))
 }
 
 //export goListBoxHeaderFuncs
 func goListBoxHeaderFuncs(row *C.GtkListBoxRow, before *C.GtkListBoxRow, userData C.gpointer) {
-	id := int(uintptr(userData))
-
-	listBoxHeaderFuncRegistry.Lock()
-	r := listBoxHeaderFuncRegistry.m[id]
-	//delete(listBoxHeaderFuncRegistry.m, id)
-	listBoxHeaderFuncRegistry.Unlock()
-
-	r.fn(wrapListBoxRow(glib.Take(unsafe.Pointer(row))), wrapListBoxRow(glib.Take(unsafe.Pointer(before))), r.userData)
+	fn := callback.Get(uintptr(userData)).(ListBoxHeaderFunc)
+	fn(
+		wrapListBoxRow(glib.Take(unsafe.Pointer(row))),
+		wrapListBoxRow(glib.Take(unsafe.Pointer(before))),
+	)
 }
 
 //export goListBoxSortFuncs
 func goListBoxSortFuncs(row1 *C.GtkListBoxRow, row2 *C.GtkListBoxRow, userData C.gpointer) C.gint {
-	id := int(uintptr(userData))
-
-	listBoxSortFuncRegistry.Lock()
-	r := listBoxSortFuncRegistry.m[id]
-	//delete(listBoxSortFuncRegistry.m, id)
-	listBoxSortFuncRegistry.Unlock()
-
-	return C.gint(r.fn(wrapListBoxRow(glib.Take(unsafe.Pointer(row1))), wrapListBoxRow(glib.Take(unsafe.Pointer(row2))), r.userData))
+	fn := callback.Get(uintptr(userData)).(ListBoxSortFunc)
+	return C.gint(fn(
+		wrapListBoxRow(glib.Take(unsafe.Pointer(row1))),
+		wrapListBoxRow(glib.Take(unsafe.Pointer(row2))),
+	))
 }
diff --git a/vendor/github.com/gotk3/gotk3/gtk/gtk_export_since_3_14.go b/vendor/github.com/gotk3/gotk3/gtk/gtk_export_since_3_14.go
index 225ab8251f28..60a978820b28 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/gtk_export_since_3_14.go
+++ b/vendor/github.com/gotk3/gotk3/gtk/gtk_export_since_3_14.go
@@ -9,17 +9,11 @@ import (
 	"unsafe"
 
 	"github.com/gotk3/gotk3/glib"
+	"github.com/gotk3/gotk3/internal/callback"
 )
 
-// TODO: figure out a way to determine when we can clean up
-
 //export goListBoxForEachFuncs
 func goListBoxForEachFuncs(box *C.GtkListBox, row *C.GtkListBoxRow, userData C.gpointer) {
-	id := int(uintptr(userData))
-
-	listBoxForeachFuncRegistry.Lock()
-	r := listBoxForeachFuncRegistry.m[id]
-	listBoxForeachFuncRegistry.Unlock()
-
-	r.fn(wrapListBox(glib.Take(unsafe.Pointer(box))), wrapListBoxRow(glib.Take(unsafe.Pointer(row))), r.userData)
+	fn := callback.Get(uintptr(userData)).(ListBoxForeachFunc)
+	fn(wrapListBox(glib.Take(unsafe.Pointer(box))), wrapListBoxRow(glib.Take(unsafe.Pointer(row))))
 }
diff --git a/vendor/github.com/gotk3/gotk3/gtk/gtk_export_since_3_16.go b/vendor/github.com/gotk3/gotk3/gtk/gtk_export_since_3_16.go
new file mode 100644
index 000000000000..e1c04807c125
--- /dev/null
+++ b/vendor/github.com/gotk3/gotk3/gtk/gtk_export_since_3_16.go
@@ -0,0 +1,14 @@
+// Same copyright and license as the rest of the files in this project
+// +build !gtk_3_6,!gtk_3_8,!gtk_3_10,!gtk_3_12,!gtk_3_14
+
+package gtk
+
+// #include <gtk/gtk.h>
+import "C"
+import "github.com/gotk3/gotk3/internal/callback"
+
+//export goListBoxCreateWidgetFuncs
+func goListBoxCreateWidgetFuncs(item, userData C.gpointer) {
+	fn := callback.Get(uintptr(userData)).(ListBoxCreateWidgetFunc)
+	fn(uintptr(item))
+}
diff --git a/vendor/github.com/gotk3/gotk3/gtk/gtk_since_3_10.go b/vendor/github.com/gotk3/gotk3/gtk/gtk_since_3_10.go
index f003ec3a2b6f..dae8a7550124 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/gtk_since_3_10.go
+++ b/vendor/github.com/gotk3/gotk3/gtk/gtk_since_3_10.go
@@ -11,11 +11,14 @@ package gtk
 // #include "gtk_since_3_10.go.h"
 import "C"
 import (
-	"sync"
+	"errors"
 	"unsafe"
 
+	"github.com/gotk3/gotk3/cairo"
 	"github.com/gotk3/gotk3/gdk"
 	"github.com/gotk3/gotk3/glib"
+	"github.com/gotk3/gotk3/internal/callback"
+	"github.com/gotk3/gotk3/pango"
 )
 
 func init() {
@@ -56,6 +59,11 @@ const (
 	ALIGN_BASELINE Align = C.GTK_ALIGN_BASELINE
 )
 
+// ImageType
+const (
+	IMAGE_SURFACE ImageType = C.GTK_IMAGE_SURFACE
+)
+
 // RevealerTransitionType is a representation of GTK's GtkRevealerTransitionType.
 type RevealerTransitionType int
 
@@ -103,17 +111,57 @@ func marshalStackTransitionType(p uintptr) (interface{}, error) {
  * GtkImage
  */
 
-// TODO:
-// gtk_image_new_from_surface().
-// gtk_image_set_from_surface().
+// ImageNewFromSurface is a wrapper around gtk_image_new_from_surface().
+func ImageNewFromSurface(surface *cairo.Surface) (*Image, error) {
+	c := C.gtk_image_new_from_surface((*C.cairo_surface_t)(surface.GetCSurface()))
+	if c == nil {
+		return nil, nilPtrErr
+	}
+	obj := glib.Take(unsafe.Pointer(c))
+	return wrapImage(obj), nil
+}
+
+// SetFromSurface is a wrapper around gtk_image_set_from_surface().
+func (v *Image) SetFromSurface(surface *cairo.Surface) {
+	csurface := (*C.cairo_surface_t)(surface.GetCSurface())
+	C.gtk_image_set_from_surface(v.native(), csurface)
+}
+
+/*
+ * GtkIconTheme
+ */
+
+// HasIcon is a wrapper around gtk_icon_theme_load_icon_for_scale().
+func (v *IconTheme) LoadIconForScale(iconName string, size, scale int, flags IconLookupFlags) (*gdk.Pixbuf, error) {
+	cstr := C.CString(iconName)
+	defer C.free(unsafe.Pointer(cstr))
+
+	var err *C.GError = nil
+	c := C.gtk_icon_theme_load_icon_for_scale(v.Theme, (*C.gchar)(cstr), C.gint(size), C.gint(scale), C.GtkIconLookupFlags(flags), &err)
+	if c == nil {
+		defer C.g_error_free(err)
+		return nil, errors.New(goString(err.message))
+	}
+	return &gdk.Pixbuf{glib.Take(unsafe.Pointer(c))}, nil
+}
 
 /*
  * GtkEntry
  */
 
-// TODO:
-// gtk_entry_get_tabs().
-// gtk_entry_set_tabs().
+// GetTabs is a wrapper around gtk_entry_get_tabs().
+func (v *Entry) GetTabs() (*pango.TabArray, error) {
+	c := C.gtk_entry_get_tabs(v.native())
+	if c == nil {
+		return nil, nilPtrErr
+	}
+	return pango.WrapTabArray(uintptr(unsafe.Pointer(c))), nil
+}
+
+// SetTabs is a wrapper around gtk_entry_set_tabs().
+func (v *Entry) SetTabs(tabs *pango.TabArray) {
+	C.gtk_entry_set_tabs(v.native(), (*C.PangoTabArray)(unsafe.Pointer(tabs.Native())))
+}
 
 /*
  * GtkButton
@@ -143,12 +191,12 @@ func ButtonNewFromIconName(iconName string, size IconSize) (*Button, error) {
  * GtkGrid
  */
 
-// RemoveRow() is a wrapper around gtk_grid_remove_row().
+// RemoveRow is a wrapper around gtk_grid_remove_row().
 func (v *Grid) RemoveRow(position int) {
 	C.gtk_grid_remove_row(v.native(), C.gint(position))
 }
 
-// RemoveColumn() is a wrapper around gtk_grid_remove_column().
+// RemoveColumn is a wrapper around gtk_grid_remove_column().
 func (v *Grid) RemoveColumn(position int) {
 	C.gtk_grid_remove_column(v.native(), C.gint(position))
 }
@@ -163,6 +211,7 @@ func (v *Grid) RemoveColumn(position int) {
  * GtkHeaderBar
  */
 
+// HeaderBar is a representation of GtkHeaderBar
 type HeaderBar struct {
 	Container
 }
@@ -183,6 +232,10 @@ func marshalHeaderBar(p uintptr) (interface{}, error) {
 }
 
 func wrapHeaderBar(obj *glib.Object) *HeaderBar {
+	if obj == nil {
+		return nil
+	}
+
 	return &HeaderBar{Container{Widget{glib.InitiallyUnowned{obj}}}}
 }
 
@@ -227,12 +280,12 @@ func (v *HeaderBar) SetCustomTitle(titleWidget IWidget) {
 }
 
 // GetCustomTitle is a wrapper around gtk_header_bar_get_custom_title().
-func (v *HeaderBar) GetCustomTitle() (*Widget, error) {
+func (v *HeaderBar) GetCustomTitle() (IWidget, error) {
 	c := C.gtk_header_bar_get_custom_title(v.native())
 	if c == nil {
-		return nil, nilPtrErr
+		return nil, nil
 	}
-	return wrapWidget(glib.Take(unsafe.Pointer(c))), nil
+	return castWidget(c)
 }
 
 // PackStart is a wrapper around gtk_header_bar_pack_start().
@@ -260,13 +313,13 @@ func (v *HeaderBar) GetShowCloseButton() bool {
  * GtkLabel
  */
 
-// GetLines() is a wrapper around gtk_label_get_lines().
+// GetLines is a wrapper around gtk_label_get_lines().
 func (v *Label) GetLines() int {
 	c := C.gtk_label_get_lines(v.native())
 	return int(c)
 }
 
-// SetLines() is a wrapper around gtk_label_set_lines().
+// SetLines is a wrapper around gtk_label_set_lines().
 func (v *Label) SetLines(lines int) {
 	C.gtk_label_set_lines(v.native(), C.gint(lines))
 }
@@ -296,6 +349,10 @@ func marshalListBox(p uintptr) (interface{}, error) {
 }
 
 func wrapListBox(obj *glib.Object) *ListBox {
+	if obj == nil {
+		return nil
+	}
+
 	return &ListBox{Container{Widget{glib.InitiallyUnowned{obj}}}}
 }
 
@@ -404,88 +461,28 @@ func (v *ListBox) InvalidateSort() {
 	C.gtk_list_box_invalidate_sort(v.native())
 }
 
-type ListBoxFilterFunc func(row *ListBoxRow, userData uintptr) bool
+// ListBoxFilterFunc is a representation of GtkListBoxFilterFunc
+type ListBoxFilterFunc func(row *ListBoxRow) bool
 
-type listBoxFilterFuncData struct {
-	fn       ListBoxFilterFunc
-	userData uintptr
+// SetFilterFunc is a wrapper around gtk_list_box_set_filter_func
+func (v *ListBox) SetFilterFunc(fn ListBoxFilterFunc) {
+	C._gtk_list_box_set_filter_func(v.native(), C.gpointer(callback.Assign(fn)))
 }
 
-var (
-	listBoxFilterFuncRegistry = struct {
-		sync.RWMutex
-		next int
-		m    map[int]listBoxFilterFuncData
-	}{
-		next: 1,
-		m:    make(map[int]listBoxFilterFuncData),
-	}
-)
-
-func (v *ListBox) SetFilterFunc(fn ListBoxFilterFunc, userData uintptr) {
-	listBoxFilterFuncRegistry.Lock()
-	id := listBoxFilterFuncRegistry.next
-	listBoxFilterFuncRegistry.next++
-	listBoxFilterFuncRegistry.m[id] = listBoxFilterFuncData{fn: fn, userData: userData}
-	listBoxFilterFuncRegistry.Unlock()
+// ListBoxHeaderFunc is a representation of GtkListBoxUpdateHeaderFunc
+type ListBoxHeaderFunc func(row *ListBoxRow, before *ListBoxRow)
 
-	C._gtk_list_box_set_filter_func(v.native(), C.gpointer(uintptr(id)))
+// SetHeaderFunc is a wrapper around gtk_list_box_set_header_func
+func (v *ListBox) SetHeaderFunc(fn ListBoxHeaderFunc) {
+	C._gtk_list_box_set_header_func(v.native(), C.gpointer(callback.Assign(fn)))
 }
 
-type ListBoxHeaderFunc func(row *ListBoxRow, before *ListBoxRow, userData uintptr)
-
-type listBoxHeaderFuncData struct {
-	fn       ListBoxHeaderFunc
-	userData uintptr
-}
-
-var (
-	listBoxHeaderFuncRegistry = struct {
-		sync.RWMutex
-		next int
-		m    map[int]listBoxHeaderFuncData
-	}{
-		next: 1,
-		m:    make(map[int]listBoxHeaderFuncData),
-	}
-)
-
-func (v *ListBox) SetHeaderFunc(fn ListBoxHeaderFunc, userData uintptr) {
-	listBoxHeaderFuncRegistry.Lock()
-	id := listBoxHeaderFuncRegistry.next
-	listBoxHeaderFuncRegistry.next++
-	listBoxHeaderFuncRegistry.m[id] = listBoxHeaderFuncData{fn: fn, userData: userData}
-	listBoxHeaderFuncRegistry.Unlock()
-
-	C._gtk_list_box_set_header_func(v.native(), C.gpointer(uintptr(id)))
-}
-
-type ListBoxSortFunc func(row1 *ListBoxRow, row2 *ListBoxRow, userData uintptr) int
-
-type listBoxSortFuncData struct {
-	fn       ListBoxSortFunc
-	userData uintptr
-}
-
-var (
-	listBoxSortFuncRegistry = struct {
-		sync.RWMutex
-		next int
-		m    map[int]listBoxSortFuncData
-	}{
-		next: 1,
-		m:    make(map[int]listBoxSortFuncData),
-	}
-)
-
-func (v *ListBox) SetSortFunc(fn ListBoxSortFunc, userData uintptr) {
-	listBoxSortFuncRegistry.Lock()
-	id := listBoxSortFuncRegistry.next
-	listBoxSortFuncRegistry.next++
-	listBoxSortFuncRegistry.m[id] = listBoxSortFuncData{fn: fn, userData: userData}
-	listBoxSortFuncRegistry.Unlock()
+// ListBoxSortFunc is a representation of GtkListBoxSortFunc
+type ListBoxSortFunc func(row1 *ListBoxRow, row2 *ListBoxRow) int
 
-	C._gtk_list_box_set_sort_func(v.native(), C.gpointer(uintptr(id)))
+// SetSortFunc is a wrapper around gtk_list_box_set_sort_func
+func (v *ListBox) SetSortFunc(fn ListBoxSortFunc) {
+	C._gtk_list_box_set_sort_func(v.native(), C.gpointer(callback.Assign(fn)))
 }
 
 // DragHighlightRow is a wrapper around gtk_list_box_drag_highlight_row()
@@ -493,8 +490,10 @@ func (v *ListBox) DragHighlightRow(row *ListBoxRow) {
 	C.gtk_list_box_drag_highlight_row(v.native(), row.native())
 }
 
-// TODO:
-// gtk_list_box_drag_unhighlight_row().
+// DragUnhighlightRow is a wrapper around gtk_list_box_drag_unhighlight_row().
+func (v *ListBox) DragUnhighlightRow() {
+	C.gtk_list_box_drag_unhighlight_row(v.native())
+}
 
 /*
  * GtkListBoxRow
@@ -521,6 +520,10 @@ func marshalListBoxRow(p uintptr) (interface{}, error) {
 }
 
 func wrapListBoxRow(obj *glib.Object) *ListBoxRow {
+	if obj == nil {
+		return nil
+	}
+
 	return &ListBoxRow{Bin{Container{Widget{glib.InitiallyUnowned{obj}}}}}
 }
 
@@ -539,16 +542,20 @@ func (v *ListBoxRow) Changed() {
 }
 
 // GetHeader is a wrapper around gtk_list_box_row_get_header().
-func (v *ListBoxRow) GetHeader() *Widget {
+func (v *ListBoxRow) GetHeader() (IWidget, error) {
 	c := C.gtk_list_box_row_get_header(v.native())
 	if c == nil {
-		return nil
+		return nil, nil
 	}
-	return wrapWidget(glib.Take(unsafe.Pointer(c)))
+	return castWidget(c)
 }
 
 // SetHeader is a wrapper around gtk_list_box_row_set_header().
 func (v *ListBoxRow) SetHeader(header IWidget) {
+	if header == nil {
+		C.gtk_list_box_row_set_header(v.native(), nil)
+		return
+	}
 	C.gtk_list_box_row_set_header(v.native(), header.toWidget())
 }
 
@@ -601,6 +608,10 @@ func marshalRevealer(p uintptr) (interface{}, error) {
 }
 
 func wrapRevealer(obj *glib.Object) *Revealer {
+	if obj == nil {
+		return nil
+	}
+
 	return &Revealer{Bin{Container{Widget{glib.InitiallyUnowned{obj}}}}}
 }
 
@@ -678,6 +689,10 @@ func marshalSearchBar(p uintptr) (interface{}, error) {
 }
 
 func wrapSearchBar(obj *glib.Object) *SearchBar {
+	if obj == nil {
+		return nil
+	}
+
 	return &SearchBar{Bin{Container{Widget{glib.InitiallyUnowned{obj}}}}}
 }
 
@@ -748,6 +763,10 @@ func marshalStack(p uintptr) (interface{}, error) {
 }
 
 func wrapStack(obj *glib.Object) *Stack {
+	if obj == nil {
+		return nil
+	}
+
 	return &Stack{Container{Widget{glib.InitiallyUnowned{obj}}}}
 }
 
@@ -783,12 +802,12 @@ func (v *Stack) SetVisibleChild(child IWidget) {
 }
 
 // GetVisibleChild is a wrapper around gtk_stack_get_visible_child().
-func (v *Stack) GetVisibleChild() *Widget {
+func (v *Stack) GetVisibleChild() (IWidget, error) {
 	c := C.gtk_stack_get_visible_child(v.native())
 	if c == nil {
-		return nil
+		return nil, nil
 	}
-	return wrapWidget(glib.Take(unsafe.Pointer(c)))
+	return castWidget(c)
 }
 
 // SetVisibleChildName is a wrapper around gtk_stack_set_visible_child_name().
@@ -844,3 +863,56 @@ func (v *Stack) GetTransitionType() StackTransitionType {
 	c := C.gtk_stack_get_transition_type(v.native())
 	return StackTransitionType(c)
 }
+
+/*
+ * GtkBuilder
+ */
+
+// BuilderNewFromFile is a wrapper around gtk_builder_new_from_file().
+func BuilderNewFromFile(filePath string) (*Builder, error) {
+	cstr := C.CString(filePath)
+	defer C.free(unsafe.Pointer(cstr))
+
+	c := C.gtk_builder_new_from_file((*C.gchar)(cstr))
+	if c == nil {
+		return nil, nilPtrErr
+	}
+
+	obj := glib.Take(unsafe.Pointer(c))
+	return &Builder{obj}, nil
+}
+
+// BuilderNewFromResource is a wrapper around gtk_builder_new_from_resource().
+func BuilderNewFromResource(resourcePath string) (*Builder, error) {
+	cstr := C.CString(resourcePath)
+	defer C.free(unsafe.Pointer(cstr))
+
+	c := C.gtk_builder_new_from_resource((*C.gchar)(cstr))
+	if c == nil {
+		return nil, nilPtrErr
+	}
+
+	obj := glib.Take(unsafe.Pointer(c))
+	return &Builder{obj}, nil
+}
+
+// BuilderNewFromString is a wrapper around gtk_builder_new_from_string().
+func BuilderNewFromString(resource string) (*Builder, error) {
+	cstr := C.CString(resource)
+	defer C.free(unsafe.Pointer(cstr))
+
+	c := C.gtk_builder_new_from_string((*C.gchar)(cstr), C.gssize(len(resource)))
+	if c == nil {
+		return nil, nilPtrErr
+	}
+
+	obj := glib.Take(unsafe.Pointer(c))
+	return &Builder{obj}, nil
+}
+
+// TODO:
+// gtk_builder_add_callback_symbol
+// gtk_builder_add_callback_symbols
+// gtk_builder_lookup_callback_symbol
+// gtk_builder_set_application
+// gtk_builder_get_application
diff --git a/vendor/github.com/gotk3/gotk3/gtk/gtk_since_3_10.go.h b/vendor/github.com/gotk3/gotk3/gtk/gtk_since_3_10.go.h
index 866916085600..4d30466397d2 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/gtk_since_3_10.go.h
+++ b/vendor/github.com/gotk3/gotk3/gtk/gtk_since_3_10.go.h
@@ -16,67 +16,49 @@
  * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
  */
 
-static GtkHeaderBar *
-toGtkHeaderBar(void *p)
-{
-	return (GTK_HEADER_BAR(p));
-}
+#include "gtk.go.h" // for gotk3_callbackDelete
+#include <stdlib.h>
 
-static GtkListBox *
-toGtkListBox(void *p)
-{
-	return (GTK_LIST_BOX(p));
-}
+static GtkHeaderBar *toGtkHeaderBar(void *p) { return (GTK_HEADER_BAR(p)); }
 
-static GtkListBoxRow *
-toGtkListBoxRow(void *p)
-{
-	return (GTK_LIST_BOX_ROW(p));
-}
+static GtkListBox *toGtkListBox(void *p) { return (GTK_LIST_BOX(p)); }
 
-static GtkRevealer *
-toGtkRevealer(void *p)
-{
-	return (GTK_REVEALER(p));
-}
+static GtkListBoxRow *toGtkListBoxRow(void *p) { return (GTK_LIST_BOX_ROW(p)); }
 
-static GtkSearchBar *
-toGtkSearchBar(void *p)
-{
-	return (GTK_SEARCH_BAR(p));
-}
+static GtkRevealer *toGtkRevealer(void *p) { return (GTK_REVEALER(p)); }
 
-static GtkStack *
-toGtkStack(void *p)
-{
-	return (GTK_STACK(p));
-}
+static GtkSearchBar *toGtkSearchBar(void *p) { return (GTK_SEARCH_BAR(p)); }
+
+static GtkStack *toGtkStack(void *p) { return (GTK_STACK(p)); }
 
-static GtkStackSwitcher *
-toGtkStackSwitcher(void *p)
-{
-	return (GTK_STACK_SWITCHER(p));
+static GtkStackSwitcher *toGtkStackSwitcher(void *p) {
+  return (GTK_STACK_SWITCHER(p));
 }
 
-extern gboolean goListBoxFilterFuncs (GtkListBoxRow *row,
-                                      gpointer user_data);
+extern gboolean goListBoxFilterFuncs(GtkListBoxRow *row, gpointer user_data);
 
-static inline void _gtk_list_box_set_filter_func(GtkListBox *box, gpointer user_data) {
-	gtk_list_box_set_filter_func(box, (GtkListBoxFilterFunc)(goListBoxFilterFuncs), user_data, NULL);
+static inline void _gtk_list_box_set_filter_func(GtkListBox *box,
+                                                 gpointer user_data) {
+  gtk_list_box_set_filter_func(box,
+                               (GtkListBoxFilterFunc)(goListBoxFilterFuncs),
+                               user_data, (GDestroyNotify)(gotk3_callbackDelete));
 }
 
-extern void goListBoxHeaderFuncs (GtkListBoxRow *row,
-                                  GtkListBoxRow *before,
-                                  gpointer user_data);
+extern void goListBoxHeaderFuncs(GtkListBoxRow *row, GtkListBoxRow *before,
+                                 gpointer user_data);
 
-static inline void _gtk_list_box_set_header_func(GtkListBox *box, gpointer user_data) {
-	gtk_list_box_set_header_func(box, (GtkListBoxUpdateHeaderFunc)(goListBoxHeaderFuncs), user_data, NULL);
+static inline void _gtk_list_box_set_header_func(GtkListBox *box,
+                                                 gpointer user_data) {
+  gtk_list_box_set_header_func(
+      box, (GtkListBoxUpdateHeaderFunc)(goListBoxHeaderFuncs), user_data,
+      (GDestroyNotify)(gotk3_callbackDelete));
 }
 
-extern gint goListBoxSortFuncs (GtkListBoxRow *row1,
-                                GtkListBoxRow *row2,
-                                gpointer user_data);
+extern gint goListBoxSortFuncs(GtkListBoxRow *row1, GtkListBoxRow *row2,
+                               gpointer user_data);
 
-static inline void _gtk_list_box_set_sort_func(GtkListBox *box, gpointer user_data) {
-	gtk_list_box_set_sort_func(box, (GtkListBoxSortFunc)(goListBoxSortFuncs), user_data, NULL);
+static inline void _gtk_list_box_set_sort_func(GtkListBox *box,
+                                               gpointer user_data) {
+  gtk_list_box_set_sort_func(box, (GtkListBoxSortFunc)(goListBoxSortFuncs),
+                             user_data, (GDestroyNotify)(gotk3_callbackDelete));
 }
diff --git a/vendor/github.com/gotk3/gotk3/gtk/gtk_since_3_12.go b/vendor/github.com/gotk3/gotk3/gtk/gtk_since_3_12.go
index 93e38f04cb12..ad13a24ea7bc 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/gtk_since_3_12.go
+++ b/vendor/github.com/gotk3/gotk3/gtk/gtk_since_3_12.go
@@ -37,6 +37,10 @@ import (
  * Constants
  */
 
+const (
+	DIALOG_USE_HEADER_BAR DialogFlags = C.GTK_DIALOG_USE_HEADER_BAR
+)
+
 const (
 	STATE_FLAG_LINK    StateFlags = C.GTK_STATE_FLAG_LINK
 	STATE_FLAG_VISITED StateFlags = C.GTK_STATE_FLAG_VISITED
@@ -65,7 +69,7 @@ func init() {
 	}
 }
 
-// GetLocaleDirection() is a wrapper around gtk_get_locale_direction().
+// GetLocaleDirection is a wrapper around gtk_get_locale_direction().
 func GetLocaleDirection() TextDirection {
 	c := C.gtk_get_locale_direction()
 	return TextDirection(c)
@@ -75,29 +79,29 @@ func GetLocaleDirection() TextDirection {
  * GtkStack
  */
 
-// TODO:
-// GtkStackTransitionType
-// GTK_STACK_TRANSITION_TYPE_OVER_UP
-// GTK_STACK_TRANSITION_TYPE_OVER_DOWN
-// GTK_STACK_TRANSITION_TYPE_OVER_LEFT
-// GTK_STACK_TRANSITION_TYPE_OVER_RIGHT
-// GTK_STACK_TRANSITION_TYPE_UNDER_UP
-// GTK_STACK_TRANSITION_TYPE_UNDER_DOWN
-// GTK_STACK_TRANSITION_TYPE_UNDER_LEFT
-// GTK_STACK_TRANSITION_TYPE_UNDER_RIGHT
-// GTK_STACK_TRANSITION_TYPE_OVER_UP_DOWN
+const (
+	STACK_TRANSITION_TYPE_OVER_UP      StackTransitionType = C.GTK_STACK_TRANSITION_TYPE_OVER_UP
+	STACK_TRANSITION_TYPE_OVER_DOWN                        = C.GTK_STACK_TRANSITION_TYPE_OVER_DOWN
+	STACK_TRANSITION_TYPE_OVER_LEFT                        = C.GTK_STACK_TRANSITION_TYPE_OVER_LEFT
+	STACK_TRANSITION_TYPE_OVER_RIGHT                       = C.GTK_STACK_TRANSITION_TYPE_OVER_RIGHT
+	STACK_TRANSITION_TYPE_UNDER_UP                         = C.GTK_STACK_TRANSITION_TYPE_UNDER_UP
+	STACK_TRANSITION_TYPE_UNDER_DOWN                       = C.GTK_STACK_TRANSITION_TYPE_UNDER_DOWN
+	STACK_TRANSITION_TYPE_UNDER_LEFT                       = C.GTK_STACK_TRANSITION_TYPE_UNDER_LEFT
+	STACK_TRANSITION_TYPE_UNDER_RIGHT                      = C.GTK_STACK_TRANSITION_TYPE_UNDER_RIGHT
+	STACK_TRANSITION_TYPE_OVER_UP_DOWN                     = C.GTK_STACK_TRANSITION_TYPE_OVER_UP_DOWN
+)
 
 /*
  * Dialog
  */
 
 // GetHeaderBar is a wrapper around gtk_dialog_get_header_bar().
-func (v *Dialog) GetHeaderBar() *Widget {
+func (v *Dialog) GetHeaderBar() (IWidget, error) {
 	c := C.gtk_dialog_get_header_bar(v.native())
 	if c == nil {
-		return nil
+		return nil, nil
 	}
-	return wrapWidget(glib.Take(unsafe.Pointer(c)))
+	return castWidget(c)
 }
 
 /*
@@ -175,6 +179,8 @@ func (v *MenuButton) SetUsePopover(setting bool) {
 /*
  * FlowBox
  */
+
+// FlowBox is a representation of GtkFlowBox
 type FlowBox struct {
 	Container
 }
@@ -194,6 +200,10 @@ func marshalFlowBox(p uintptr) (interface{}, error) {
 }
 
 func wrapFlowBox(obj *glib.Object) *FlowBox {
+	if obj == nil {
+		return nil
+	}
+
 	return &FlowBox{Container{Widget{glib.InitiallyUnowned{obj}}}}
 }
 
@@ -357,6 +367,8 @@ func (fb *FlowBox) GetSelectionMode() SelectionMode {
 /*
  * FlowBoxChild
  */
+
+// FlowBoxChild is a representation of GtkFlowBoxChild
 type FlowBoxChild struct {
 	Bin
 }
@@ -376,6 +388,10 @@ func marshalFlowBoxChild(p uintptr) (interface{}, error) {
 }
 
 func wrapFlowBoxChild(obj *glib.Object) *FlowBoxChild {
+	if obj == nil {
+		return nil
+	}
+
 	return &FlowBoxChild{Bin{Container{Widget{glib.InitiallyUnowned{obj}}}}}
 }
 
@@ -437,6 +453,10 @@ func marshalPopover(p uintptr) (interface{}, error) {
 }
 
 func wrapPopover(obj *glib.Object) *Popover {
+	if obj == nil {
+		return nil
+	}
+
 	return &Popover{Bin{Container{Widget{glib.InitiallyUnowned{obj}}}}}
 }
 
@@ -486,12 +506,12 @@ func (v *Popover) SetRelativeTo(relative IWidget) {
 }
 
 // GetRelativeTo is a wrapper around gtk_popover_get_relative_to().
-func (v *Popover) GetRelativeTo() *Widget {
+func (v *Popover) GetRelativeTo() (IWidget, error) {
 	c := C.gtk_popover_get_relative_to(v.native())
 	if c == nil {
-		return nil
+		return nil, nil
 	}
-	return wrapWidget(glib.Take(unsafe.Pointer(c)))
+	return castWidget(c)
 }
 
 // SetPointingTo is a wrapper around gtk_popover_set_pointing_to().
@@ -532,7 +552,7 @@ func (v *Popover) GetModal() bool {
  * TreePath
  */
 
-// TreePathNewFromIndicesv() is a wrapper around gtk_tree_path_new_from_indicesv().
+// TreePathNewFromIndicesv is a wrapper around gtk_tree_path_new_from_indicesv().
 func TreePathNewFromIndicesv(indices []int) (*TreePath, error) {
 	if len(indices) == 0 {
 		return nil, errors.New("no indice")
diff --git a/vendor/github.com/gotk3/gotk3/gtk/gtk_since_3_12.go.h b/vendor/github.com/gotk3/gotk3/gtk/gtk_since_3_12.go.h
index 26ba6c05cfa4..24c2f1829b5a 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/gtk_since_3_12.go.h
+++ b/vendor/github.com/gotk3/gotk3/gtk/gtk_since_3_12.go.h
@@ -16,26 +16,12 @@
  * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
  */
 
-static GtkFlowBox *
-toGtkFlowBox(void *p)
-{
-	return (GTK_FLOW_BOX(p));
-}
+static GtkFlowBox *toGtkFlowBox(void *p) { return (GTK_FLOW_BOX(p)); }
 
-static GtkFlowBoxChild *
-toGtkFlowBoxChild(void *p)
-{
-	return (GTK_FLOW_BOX_CHILD(p));
+static GtkFlowBoxChild *toGtkFlowBoxChild(void *p) {
+  return (GTK_FLOW_BOX_CHILD(p));
 }
 
-static GMenuModel *
-toGMenuModel(void *p)
-{
-	return (G_MENU_MODEL(p));
-}
+static GMenuModel *toGMenuModel(void *p) { return (G_MENU_MODEL(p)); }
 
-static GtkPopover *
-toGtkPopover(void *p)
-{
-	return (GTK_POPOVER(p));
-}
+static GtkPopover *toGtkPopover(void *p) { return (GTK_POPOVER(p)); }
diff --git a/vendor/github.com/gotk3/gotk3/gtk/gtk_since_3_14.go b/vendor/github.com/gotk3/gotk3/gtk/gtk_since_3_14.go
index 9774dec47582..865a1efa234a 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/gtk_since_3_14.go
+++ b/vendor/github.com/gotk3/gotk3/gtk/gtk_since_3_14.go
@@ -8,9 +8,9 @@ package gtk
 // #include "gtk_since_3_14.go.h"
 import "C"
 import (
-	"sync"
 	"unsafe"
 
+	"github.com/gotk3/gotk3/internal/callback"
 	"github.com/gotk3/gotk3/glib"
 )
 
@@ -22,15 +22,23 @@ const (
 	STATE_FLAG_CHECKED StateFlags = C.GTK_STATE_FLAG_CHECKED
 )
 
+// IconLookupFlags is a representation of GTK's GtkIconLookupFlags.
+const (
+	ICON_LOOKUP_FORCE_REGULAR  IconLookupFlags = C.GTK_ICON_LOOKUP_FORCE_REGULAR
+	ICON_LOOKUP_FORCE_SYMBOLIC                 = C.GTK_ICON_LOOKUP_FORCE_SYMBOLIC
+	ICON_LOOKUP_DIR_LTR                        = C.GTK_ICON_LOOKUP_DIR_LTR
+	ICON_LOOKUP_DIR_RTL                        = C.GTK_ICON_LOOKUP_DIR_RTL
+)
+
 /*
  * GtkStack
  */
 
-// TODO:
-// GtkStackTransitionType
-// GTK_STACK_TRANSITION_TYPE_OVER_DOWN_UP
-// GTK_STACK_TRANSITION_TYPE_OVER_LEFT_RIGHT
-// GTK_STACK_TRANSITION_TYPE_OVER_RIGHT_LEFT
+const (
+	STACK_TRANSITION_TYPE_OVER_DOWN_UP    StackTransitionType = C.GTK_STACK_TRANSITION_TYPE_OVER_DOWN_UP
+	STACK_TRANSITION_TYPE_OVER_LEFT_RIGHT                     = C.GTK_STACK_TRANSITION_TYPE_OVER_LEFT_RIGHT
+	STACK_TRANSITION_TYPE_OVER_RIGHT_LEFT                     = C.GTK_STACK_TRANSITION_TYPE_OVER_RIGHT_LEFT
+)
 
 /*
  * GtkListBox
@@ -51,37 +59,15 @@ func (v *ListBox) UnselectAll() {
 	C.gtk_list_box_unselect_all(v.native())
 }
 
-type ListBoxForeachFunc func(box *ListBox, row *ListBoxRow, userData uintptr) int
-
-type listBoxForeachFuncData struct {
-	fn       ListBoxForeachFunc
-	userData uintptr
-}
-
-var (
-	listBoxForeachFuncRegistry = struct {
-		sync.RWMutex
-		next int
-		m    map[int]listBoxForeachFuncData
-	}{
-		next: 1,
-		m:    make(map[int]listBoxForeachFuncData),
-	}
-)
+// ListBoxForeachFunc is a representation of GtkListBoxForeachFunc
+type ListBoxForeachFunc func(box *ListBox, row *ListBoxRow) int
 
 // SelectedForeach is a wrapper around gtk_list_box_selected_foreach().
-func (v *ListBox) SelectedForeach(fn ListBoxForeachFunc, userData uintptr) {
-	listBoxForeachFuncRegistry.Lock()
-	id := listBoxForeachFuncRegistry.next
-	listBoxForeachFuncRegistry.next++
-	listBoxForeachFuncRegistry.m[id] = listBoxForeachFuncData{fn: fn, userData: userData}
-	listBoxForeachFuncRegistry.Unlock()
-
-	C._gtk_list_box_selected_foreach(v.native(), C.gpointer(uintptr(id)))
-
-	listBoxForeachFuncRegistry.Lock()
-	delete(listBoxForeachFuncRegistry.m, id)
-	listBoxForeachFuncRegistry.Unlock()
+func (v *ListBox) SelectedForeach(fn ListBoxForeachFunc) {
+	id := callback.Assign(fn)
+	defer callback.Delete(id)
+
+	C._gtk_list_box_selected_foreach(v.native(), C.gpointer(id))
 }
 
 // GetSelectedRows is a wrapper around gtk_list_box_get_selected_rows().
diff --git a/vendor/github.com/gotk3/gotk3/gtk/gtk_since_3_14.go.h b/vendor/github.com/gotk3/gotk3/gtk/gtk_since_3_14.go.h
index fec008de194f..9cf205400370 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/gtk_since_3_14.go.h
+++ b/vendor/github.com/gotk3/gotk3/gtk/gtk_since_3_14.go.h
@@ -1,9 +1,10 @@
 // Same copyright and license as the rest of the files in this project
 
-extern void goListBoxForEachFuncs (GtkListBox *box,
-                                GtkListBoxRow *row,
-                                gpointer user_data);
+extern void goListBoxForEachFuncs(GtkListBox *box, GtkListBoxRow *row,
+                                  gpointer user_data);
 
-static inline void _gtk_list_box_selected_foreach(GtkListBox *box, gpointer user_data) {
-	gtk_list_box_selected_foreach(box, (GtkListBoxForeachFunc)(goListBoxForEachFuncs), user_data);
+static inline void _gtk_list_box_selected_foreach(GtkListBox *box,
+                                                  gpointer user_data) {
+  gtk_list_box_selected_foreach(
+      box, (GtkListBoxForeachFunc)(goListBoxForEachFuncs), user_data);
 }
diff --git a/vendor/github.com/gotk3/gotk3/gtk/gtk_since_3_16.go b/vendor/github.com/gotk3/gotk3/gtk/gtk_since_3_16.go
index 53e950c75f17..98f807cf4a6c 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/gtk_since_3_16.go
+++ b/vendor/github.com/gotk3/gotk3/gtk/gtk_since_3_16.go
@@ -10,11 +10,12 @@ import "C"
 import (
 	"unsafe"
 
+	"github.com/gotk3/gotk3/gdk"
 	"github.com/gotk3/gotk3/glib"
 )
 
 const (
-	POLICY_EXTERNAL  PolicyType = C.GTK_POLICY_EXTERNAL
+	POLICY_EXTERNAL PolicyType = C.GTK_POLICY_EXTERNAL
 )
 
 func init() {
@@ -25,6 +26,7 @@ func init() {
 		{glib.Type(C.gtk_popover_menu_get_type()), marshalPopoverMenu},
 		{glib.Type(C.gtk_model_button_get_type()), marshalModelButton},
 		{glib.Type(C.gtk_stack_sidebar_get_type()), marshalStackSidebar},
+		{glib.Type(C.gtk_text_extend_selection_get_type()), marshalTextExtendSelection},
 	}
 	glib.RegisterGValueMarshalers(tm)
 
@@ -56,30 +58,62 @@ func marshalButtonRole(p uintptr) (interface{}, error) {
 	return ButtonRole(c), nil
 }
 
+/*
+ * TextView
+ */
+
+// TextExtendSelection is a representation of GTK's GtkTextExtendSelection.
+type TextExtendSelection int
+
+const (
+	TEXT_EXTEND_SELECTION_WORD TextExtendSelection = C.GTK_TEXT_EXTEND_SELECTION_WORD
+	TEXT_EXTEND_SELECTION_LINE TextExtendSelection = C.GTK_TEXT_EXTEND_SELECTION_LINE
+)
+
+func marshalTextExtendSelection(p uintptr) (interface{}, error) {
+	c := C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))
+	return TextExtendSelection(c), nil
+}
+
 /*
  * GtkStack
  */
 
-// TODO:
-// gtk_stack_set_hhomogeneous().
-// gtk_stack_get_hhomogeneous().
-// gtk_stack_set_vhomogeneous().
-// gtk_stack_get_vhomogeneous().
+// SetHHomogeneous is a wrapper around gtk_stack_set_hhomogeneous().
+func (v *Stack) SetHHomogeneous(hhomogeneous bool) {
+	C.gtk_stack_set_hhomogeneous(v.native(), gbool(hhomogeneous))
+}
+
+// GetHHomogeneous is a wrapper around gtk_stack_get_hhomogeneous().
+func (v *Stack) GetHHomogeneous() bool {
+	return gobool(C.gtk_stack_get_hhomogeneous(v.native()))
+}
+
+// SetVHomogeneous is a wrapper around gtk_stack_set_vhomogeneous().
+func (v *Stack) SetVHomogeneous(vhomogeneous bool) {
+	C.gtk_stack_set_vhomogeneous(v.native(), gbool(vhomogeneous))
+}
+
+// GetVHomogeneous is a wrapper around gtk_stack_get_vhomogeneous().
+func (v *Stack) GetVHomogeneous() bool {
+	return gobool(C.gtk_stack_get_vhomogeneous(v.native()))
+}
 
 /*
  * GtkNotebook
  */
 
-// TODO:
-// gtk_notebook_detach_tab().
+// DetachTab is a wrapper around gtk_notebook_detach_tab().
+func (v *Notebook) DetachTab(child IWidget) {
+	C.gtk_notebook_detach_tab(v.native(), child.toWidget())
+}
 
 /*
  * GtkListBox
  */
 
-// TODO:
-// GtkListBoxCreateWidgetFunc().
-// gtk_list_box_bind_model().
+// ListBoxCreateWidgetFunc is a representation of GtkListBoxCreateWidgetFunc.
+type ListBoxCreateWidgetFunc func(item interface{}) int
 
 /*
  * GtkScrolledWindow
@@ -137,40 +171,44 @@ func (v *Label) SetYAlign(n float64) {
 
 /*
 * GtkModelButton
-*/
+ */
 
 // ModelButton is a representation of GTK's GtkModelButton.
 type ModelButton struct {
 	Button
- }
- 
- func (v *ModelButton) native() *C.GtkModelButton {
-	 if v == nil || v.GObject == nil {
-		 return nil
-	 }
- 
-	 p := unsafe.Pointer(v.GObject)
-	 return C.toGtkModelButton(p)
- }
- 
- func marshalModelButton(p uintptr) (interface{}, error) {
-	 c := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
-	 return wrapModelButton(glib.Take(unsafe.Pointer(c))), nil
- }
- 
- func wrapModelButton(obj *glib.Object) *ModelButton {
-	 actionable := wrapActionable(obj)
-	 return &ModelButton{Button{Bin{Container{Widget{glib.InitiallyUnowned{obj}}}}, actionable}}
- }
- 
- // ModelButtonNew is a wrapper around gtk_model_button_new
- func ModelButtonNew() (*ModelButton, error) {
-	 c := C.gtk_model_button_new()
-	 if c == nil {
-		 return nil, nilPtrErr
-	 }
-	 return wrapModelButton(glib.Take(unsafe.Pointer(c))), nil
- }
+}
+
+func (v *ModelButton) native() *C.GtkModelButton {
+	if v == nil || v.GObject == nil {
+		return nil
+	}
+
+	p := unsafe.Pointer(v.GObject)
+	return C.toGtkModelButton(p)
+}
+
+func marshalModelButton(p uintptr) (interface{}, error) {
+	c := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
+	return wrapModelButton(glib.Take(unsafe.Pointer(c))), nil
+}
+
+func wrapModelButton(obj *glib.Object) *ModelButton {
+	if obj == nil {
+		return nil
+	}
+
+	actionable := wrapActionable(obj)
+	return &ModelButton{Button{Bin{Container{Widget{glib.InitiallyUnowned{obj}}}}, actionable}}
+}
+
+// ModelButtonNew is a wrapper around gtk_model_button_new
+func ModelButtonNew() (*ModelButton, error) {
+	c := C.gtk_model_button_new()
+	if c == nil {
+		return nil, nilPtrErr
+	}
+	return wrapModelButton(glib.Take(unsafe.Pointer(c))), nil
+}
 
 /*
  * GtkPopoverMenu
@@ -196,6 +234,10 @@ func marshalPopoverMenu(p uintptr) (interface{}, error) {
 }
 
 func wrapPopoverMenu(obj *glib.Object) *PopoverMenu {
+	if obj == nil {
+		return nil
+	}
+
 	return &PopoverMenu{Popover{Bin{Container{Widget{glib.InitiallyUnowned{obj}}}}}}
 }
 
@@ -241,6 +283,10 @@ func marshalStackSidebar(p uintptr) (interface{}, error) {
 }
 
 func wrapStackSidebar(obj *glib.Object) *StackSidebar {
+	if obj == nil {
+		return nil
+	}
+
 	return &StackSidebar{Bin{Container{Widget{glib.InitiallyUnowned{obj}}}}}
 }
 
@@ -276,6 +322,16 @@ func (v *Entry) GrabFocusWithoutSelecting() {
 	C.gtk_entry_grab_focus_without_selecting(v.native())
 }
 
+/*
+ * GtkSearchEntry
+ */
+
+// HandleEvent is a wrapper around gtk_search_entry_handle_event().
+func (v *SearchEntry) HandleEvent(event *gdk.Event) {
+	e := (*C.GdkEvent)(unsafe.Pointer(event.Native()))
+	C.gtk_search_entry_handle_event(v.native(), e)
+}
+
 /*
  * GtkTextBuffer
  */
@@ -286,3 +342,30 @@ func (v *TextBuffer) InsertMarkup(start *TextIter, text string) {
 	defer C.free(unsafe.Pointer(cstr))
 	C.gtk_text_buffer_insert_markup(v.native(), (*C.GtkTextIter)(start), (*C.gchar)(cstr), C.gint(len(text)))
 }
+
+/*
+ * CssProvider
+ */
+
+// LoadFromResource is a wrapper around gtk_css_provider_load_from_resource().
+//
+// See: https://developer.gnome.org/gtk3/stable/GtkCssProvider.html#gtk-css-provider-load-from-resource
+func (v *CssProvider) LoadFromResource(path string) {
+	cpath := C.CString(path)
+	defer C.free(unsafe.Pointer(cpath))
+	C.gtk_css_provider_load_from_resource(v.native(), (*C.gchar)(cpath))
+}
+
+/*
+ * GtkTextView
+ */
+
+// SetMonospace is a wrapper around  gtk_text_view_set_monospace()
+func (v *TextView) SetMonospace(monospace bool) {
+	C.gtk_text_view_set_monospace(v.native(), gbool(monospace))
+}
+
+// GetMonospace is a wrapper around  gtk_text_view_get_monospace()
+func (v *TextView) GetMonospace() bool {
+	return gobool(C.gtk_text_view_get_monospace(v.native()))
+}
diff --git a/vendor/github.com/gotk3/gotk3/gtk/gtk_since_3_16.go.h b/vendor/github.com/gotk3/gotk3/gtk/gtk_since_3_16.go.h
index 84f653241627..379ade53c6e0 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/gtk_since_3_16.go.h
+++ b/vendor/github.com/gotk3/gotk3/gtk/gtk_since_3_16.go.h
@@ -18,28 +18,30 @@
 
 #pragma once
 
-#include <stdlib.h>
+#include "gtk.go.h"
+#include <stdlib.h> // for gotk3_callbackDelete
 
-static GtkModelButton *
-toGtkModelButton(void *mb)
-{
-	return (GTK_MODEL_BUTTON(mb));
+static GListModel *toGListModel(void *p) { return (G_LIST_MODEL(p)); }
+
+static GtkModelButton *toGtkModelButton(void *mb) {
+  return (GTK_MODEL_BUTTON(mb));
 }
 
-static GtkPopoverMenu *
-toGtkPopoverMenu(void *p)
-{
-	return (GTK_POPOVER_MENU(p));
+static GtkPopoverMenu *toGtkPopoverMenu(void *p) {
+  return (GTK_POPOVER_MENU(p));
 }
 
-static GtkStackSidebar *
-toGtkStackSidebar(void *p)
-{
-	return (GTK_STACK_SIDEBAR(p));
+static GtkStackSidebar *toGtkStackSidebar(void *p) {
+  return (GTK_STACK_SIDEBAR(p));
 }
 
-static GtkGLArea *
-toGtkGLArea(void *p)
-{
-  return (GTK_GL_AREA(p));
-}
\ No newline at end of file
+static GtkGLArea *toGtkGLArea(void *p) { return (GTK_GL_AREA(p)); }
+
+extern void goListBoxCreateWidgetFuncs(gpointer item, gpointer user_data);
+
+static inline void _gtk_list_box_bind_model(GtkListBox *box, GListModel *model,
+                                            gpointer user_data) {
+  gtk_list_box_bind_model(
+      box, model, (GtkListBoxCreateWidgetFunc)(goListBoxCreateWidgetFuncs),
+      user_data, (GDestroyNotify)(gotk3_callbackDelete));
+}
diff --git a/vendor/github.com/gotk3/gotk3/gtk/gtk_since_3_16_glib_2_44.go b/vendor/github.com/gotk3/gotk3/gtk/gtk_since_3_16_glib_2_44.go
new file mode 100644
index 000000000000..3b5c2370805f
--- /dev/null
+++ b/vendor/github.com/gotk3/gotk3/gtk/gtk_since_3_16_glib_2_44.go
@@ -0,0 +1,25 @@
+// Same copyright and license as the rest of the files in this project
+// The code in this file is only for GTK+ version 3.16+, as well as Glib version 2.44+
+
+// +build !gtk_3_6,!gtk_3_8,!gtk_3_10,!gtk_3_12,!gtk_3_14,!glib_2_40,!glib_2_42
+
+package gtk
+
+// #include <gtk/gtk.h>
+// #include "gtk_since_3_16.go.h"
+import "C"
+import (
+	"unsafe"
+
+	"github.com/gotk3/gotk3/internal/callback"
+	"github.com/gotk3/gotk3/glib"
+)
+
+// BindModel is a wrapper around gtk_list_box_bind_model().
+func (v *ListBox) BindModel(listModel *glib.ListModel, createWidgetFunc ListBoxCreateWidgetFunc) {
+	C._gtk_list_box_bind_model(
+		v.native(),
+		C.toGListModel(unsafe.Pointer(listModel.Native())),
+		C.gpointer(callback.Assign(createWidgetFunc)),
+	)
+}
diff --git a/vendor/github.com/gotk3/gotk3/gtk/gtk_since_3_18.go b/vendor/github.com/gotk3/gotk3/gtk/gtk_since_3_18.go
index d55d7b929a37..108ecdb89328 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/gtk_since_3_18.go
+++ b/vendor/github.com/gotk3/gotk3/gtk/gtk_since_3_18.go
@@ -1,4 +1,4 @@
-// +build !gtk_3_6,!gtk_3_8,!gtk_3_10,!gtk_3_12,!gtk_3_14,!gtk_3_16,gtk_3_18
+// +build !gtk_3_6,!gtk_3_8,!gtk_3_10,!gtk_3_12,!gtk_3_14,!gtk_3_16
 
 // See: https://developer.gnome.org/gtk3/3.18/api-index-3-18.html
 
@@ -9,11 +9,6 @@ package gtk
 
 // #include <gtk/gtk.h>
 import "C"
-import (
-	"unsafe"
-
-	"github.com/gotk3/gotk3/glib"
-)
 
 /*
  * GtkStack
@@ -27,8 +22,10 @@ import (
  * GtkRadioMenuItem
  */
 
-// TODO
-// gtk_radio_menu_item_join_group().
+// JoinGroup is a wrapper around gtk_radio_menu_item_join_group().
+func (v *RadioMenuItem) JoinGroup(group_source *RadioMenuItem) {
+	C.gtk_radio_menu_item_join_group(v.native(), group_source.native())
+}
 
 /*
  * GtkOverlay
@@ -36,7 +33,7 @@ import (
 
 // ReorderOverlay() is a wrapper around gtk_overlay_reorder_overlay().
 func (v *Overlay) ReorderOverlay(child IWidget, position int) {
-	C.gtk_overlay_reorder_overlay(v.native(), child.toWidget(), C.gint(position))
+	C.gtk_overlay_reorder_overlay(v.native(), child.toWidget(), C.int(position))
 }
 
 // GetOverlayPassThrough() is a wrapper around gtk_overlay_get_overlay_pass_through().
@@ -73,10 +70,34 @@ func (p *Popover) SetDefaultWidget(widget IWidget) {
 }
 
 // GetDefaultWidget is a wrapper around gtk_popover_get_default_widget().
-func (p *Popover) GetDefaultWidget() *Widget {
+func (p *Popover) GetDefaultWidget() (IWidget, error) {
 	w := C.gtk_popover_get_default_widget(p.native())
 	if w == nil {
-		return nil
+		return nil, nil
 	}
-	return &Widget{glib.InitiallyUnowned{glib.Take(unsafe.Pointer(w))}}
+	return castWidget(w)
+}
+
+/*
+ * GtkTextView
+ */
+
+// SetTopMargin is a wrapper around gtk_text_view_set_top_margin().
+func (v *TextView) SetTopMargin(topMargin int) {
+	C.gtk_text_view_set_top_margin(v.native(), C.gint(topMargin))
+}
+
+// GetTopMargin is a wrapper around gtk_text_view_get_top_margin().
+func (v *TextView) GetTopMargin() int {
+	return int(C.gtk_text_view_get_top_margin(v.native()))
+}
+
+// SetBottomMargin is a wrapper around gtk_text_view_set_bottom_margin().
+func (v *TextView) SetBottomMargin(bottomMargin int) {
+	C.gtk_text_view_set_bottom_margin(v.native(), C.gint(bottomMargin))
+}
+
+// GetBottomMargin is a wrapper around gtk_text_view_get_bottom_margin().
+func (v *TextView) GetBottomMargin() int {
+	return int(C.gtk_text_view_get_bottom_margin(v.native()))
 }
diff --git a/vendor/github.com/gotk3/gotk3/gtk/gtk_since_3_20.go b/vendor/github.com/gotk3/gotk3/gtk/gtk_since_3_20.go
index 57fcdf8b802c..0a5a33a17612 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/gtk_since_3_20.go
+++ b/vendor/github.com/gotk3/gotk3/gtk/gtk_since_3_20.go
@@ -62,6 +62,10 @@ func (v *NativeDialog) native() *C.GtkNativeDialog {
 }
 
 func wrapNativeDialog(obj *glib.Object) *NativeDialog {
+	if obj == nil {
+		return nil
+	}
+
 	return &NativeDialog{glib.InitiallyUnowned{obj}}
 }
 
@@ -81,7 +85,7 @@ func (v *NativeDialog) SetModal(modal bool) {
 	C.gtk_native_dialog_set_modal(v.native(), gbool(modal))
 }
 
-// GetModal() is a wrapper around gtk_native_dialog_get_modal().
+// GetModal is a wrapper around gtk_native_dialog_get_modal().
 func (v *NativeDialog) GetModal() bool {
 	c := C.gtk_native_dialog_get_modal(v.native())
 	return gobool(c)
@@ -94,12 +98,12 @@ func (v *NativeDialog) SetTitle(title string) {
 	C.gtk_native_dialog_set_title(v.native(), (*C.char)(cstr))
 }
 
-// GetTitle() is a wrapper around gtk_native_dialog_get_title().
+// GetTitle is a wrapper around gtk_native_dialog_get_title().
 func (v *NativeDialog) GetTitle() (string, error) {
 	return stringReturn((*C.gchar)(C.gtk_native_dialog_get_title(v.native())))
 }
 
-// SetTransientFor() is a wrapper around gtk_native_dialog_set_transient_for().
+// SetTransientFor is a wrapper around gtk_native_dialog_set_transient_for().
 func (v *NativeDialog) SetTransientFor(parent IWindow) {
 	var pw *C.GtkWindow = nil
 	if parent != nil {
@@ -108,7 +112,7 @@ func (v *NativeDialog) SetTransientFor(parent IWindow) {
 	C.gtk_native_dialog_set_transient_for(v.native(), pw)
 }
 
-// GetTransientFor() is a wrapper around gtk_native_dialog_get_transient_for().
+// GetTransientFor is a wrapper around gtk_native_dialog_get_transient_for().
 func (v *NativeDialog) GetTransientFor() (*Window, error) {
 	c := C.gtk_native_dialog_get_transient_for(v.native())
 	if c == nil {
@@ -155,25 +159,34 @@ func (v *FileChooserNativeDialog) native() *C.GtkFileChooserNative {
 }
 
 func wrapFileChooserNativeDialog(obj *glib.Object) *FileChooserNativeDialog {
+	if obj == nil {
+		return nil
+	}
+
 	fc := wrapFileChooser(obj)
 	return &FileChooserNativeDialog{NativeDialog{glib.InitiallyUnowned{obj}}, *fc}
 }
 
 // FileChooserNativeDialogNew is a wrapper around gtk_file_chooser_native_new().
-func FileChooserNativeDialogNew(
-	title string,
-	parent IWindow,
-	action FileChooserAction,
-	accept_label string,
-	cancel_label string) (*FileChooserNativeDialog, error) {
+func FileChooserNativeDialogNew(title string, parent IWindow, action FileChooserAction,
+	accept_label string, cancel_label string) (*FileChooserNativeDialog, error) {
+
 	c_title := C.CString(title)
 	defer C.free(unsafe.Pointer(c_title))
+
 	c_accept_label := C.CString(accept_label)
 	defer C.free(unsafe.Pointer(c_accept_label))
+
 	c_cancel_label := C.CString(cancel_label)
 	defer C.free(unsafe.Pointer(c_cancel_label))
+
+	var w *C.GtkWindow = nil
+	if parent != nil {
+		w = parent.toWindow()
+	}
+
 	c := C.gtk_file_chooser_native_new(
-		(*C.gchar)(c_title), parent.toWindow(), C.GtkFileChooserAction(action),
+		(*C.gchar)(c_title), w, C.GtkFileChooserAction(action),
 		(*C.gchar)(c_accept_label), (*C.gchar)(c_cancel_label))
 	if c == nil {
 		return nil, nilPtrErr
@@ -185,13 +198,18 @@ func FileChooserNativeDialogNew(
 /*
  * FileChooserNative
  */
-func OpenFileChooserNative(title string, parent_window IWindow) *string {
+func OpenFileChooserNative(title string, parent IWindow) *string {
 	c_title := C.CString(title)
 
 	var native *C.GtkFileChooserNative
 
+	var w *C.GtkWindow = nil
+	if parent != nil {
+		w = parent.toWindow()
+	}
+
 	native = C.gtk_file_chooser_native_new((*C.gchar)(c_title),
-		parent_window.toWindow(),
+		w,
 		C.GtkFileChooserAction(FILE_CHOOSER_ACTION_OPEN),
 		(*C.gchar)(C.CString("_Open")),
 		(*C.gchar)(C.CString("_Cancel")))
@@ -218,7 +236,7 @@ func (v *FileChooserNativeDialog) SetAcceptLabel(accept_label string) {
 	C.gtk_file_chooser_native_set_accept_label(v.native(), (*C.char)(cstr))
 }
 
-// GetAcceptLabel() is a wrapper around gtk_file_chooser_native_get_accept_label().
+// GetAcceptLabel is a wrapper around gtk_file_chooser_native_get_accept_label().
 func (v *FileChooserNativeDialog) GetAcceptLabel() (string, error) {
 	return stringReturn((*C.gchar)(C.gtk_file_chooser_native_get_accept_label(v.native())))
 }
@@ -230,7 +248,7 @@ func (v *FileChooserNativeDialog) SetCancelLabel(cancel_label string) {
 	C.gtk_file_chooser_native_set_cancel_label(v.native(), (*C.char)(cstr))
 }
 
-// GetCancelLabel() is a wrapper around gtk_file_chooser_native_get_cancel_label().
+// GetCancelLabel is a wrapper around gtk_file_chooser_native_get_cancel_label().
 func (v *FileChooserNativeDialog) GetCancelLabel() (string, error) {
 	return stringReturn((*C.gchar)(C.gtk_file_chooser_native_get_cancel_label(v.native())))
 }
diff --git a/vendor/github.com/gotk3/gotk3/gtk/gtk_since_3_20.go.h b/vendor/github.com/gotk3/gotk3/gtk/gtk_since_3_20.go.h
index fc903dcaa57b..940c4a821b7a 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/gtk_since_3_20.go.h
+++ b/vendor/github.com/gotk3/gotk3/gtk/gtk_since_3_20.go.h
@@ -20,20 +20,14 @@
 
 #include <stdlib.h>
 
-static GtkFileChooser *
-toGtkFileChooser(void *p)
-{
-	return (GTK_FILE_CHOOSER(p));
+static GtkFileChooser *toGtkFileChooser(void *p) {
+  return (GTK_FILE_CHOOSER(p));
 }
 
-static GtkFileChooserNative *
-toGtkFileChooserNative(void *p)
-{
-	return (GTK_FILE_CHOOSER_NATIVE(p));
+static GtkFileChooserNative *toGtkFileChooserNative(void *p) {
+  return (GTK_FILE_CHOOSER_NATIVE(p));
 }
 
-static GtkNativeDialog *
-toGtkNativeDialog(void *p)
-{
-	return (GTK_NATIVE_DIALOG(p));
+static GtkNativeDialog *toGtkNativeDialog(void *p) {
+  return (GTK_NATIVE_DIALOG(p));
 }
diff --git a/vendor/github.com/gotk3/gotk3/gtk/gtk_since_3_22.go b/vendor/github.com/gotk3/gotk3/gtk/gtk_since_3_22.go
index a43e11486191..ff1e3bf569ba 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/gtk_since_3_22.go
+++ b/vendor/github.com/gotk3/gotk3/gtk/gtk_since_3_22.go
@@ -21,12 +21,46 @@ func (v *Popover) Popdown() {
  * GtkScrolledWindow
  */
 
-// TODO:
-// gtk_scrolled_window_get_max_content_width().
-// gtk_scrolled_window_set_max_content_width().
-// gtk_scrolled_window_get_max_content_height().
-// gtk_scrolled_window_set_max_content_height().
-// gtk_scrolled_window_get_propagate_natural_width().
-// gtk_scrolled_window_set_propagate_natural_width().
-// gtk_scrolled_window_get_propagate_natural_height().
-// gtk_scrolled_window_set_propagate_natural_height().
+// GetMaxContentWidth is a wrapper around gtk_scrolled_window_get_max_content_width().
+func (v *ScrolledWindow) GetMaxContentWidth() int {
+	c := C.gtk_scrolled_window_get_max_content_width(v.native())
+	return int(c)
+}
+
+// SetMaxContentWidth is a wrapper around gtk_scrolled_window_set_max_content_width().
+func (v *ScrolledWindow) SetMaxContentWidth(width int) {
+	C.gtk_scrolled_window_set_max_content_width(v.native(), C.gint(width))
+}
+
+// GetMaxContentHeight is a wrapper around gtk_scrolled_window_get_max_content_height().
+func (v *ScrolledWindow) GetMaxContentHeight() int {
+	c := C.gtk_scrolled_window_get_max_content_height(v.native())
+	return int(c)
+}
+
+// SetMaxContentHeight is a wrapper around gtk_scrolled_window_set_max_content_height().
+func (v *ScrolledWindow) SetMaxContentHeight(width int) {
+	C.gtk_scrolled_window_set_max_content_height(v.native(), C.gint(width))
+}
+
+// GetPropagateNaturalWidth is a wrapper around gtk_scrolled_window_get_propagate_natural_width().
+func (v *ScrolledWindow) GetPropagateNaturalWidth() bool {
+	c := C.gtk_scrolled_window_get_propagate_natural_width(v.native())
+	return gobool(c)
+}
+
+// SetPropagateNaturalWidth is a wrapper around gtk_scrolled_window_set_propagate_natural_width().
+func (v *ScrolledWindow) SetPropagateNaturalWidth(propagate bool) {
+	C.gtk_scrolled_window_set_propagate_natural_width(v.native(), gbool(propagate))
+}
+
+// GetPropagateNaturalHeight is a wrapper around gtk_scrolled_window_get_propagate_natural_height().
+func (v *ScrolledWindow) GetPropagateNaturalHeight() bool {
+	c := C.gtk_scrolled_window_get_propagate_natural_height(v.native())
+	return gobool(c)
+}
+
+// SetPropagateNaturalHeight is a wrapper around gtk_scrolled_window_set_propagate_natural_height().
+func (v *ScrolledWindow) SetPropagateNaturalHeight(propagate bool) {
+	C.gtk_scrolled_window_set_propagate_natural_height(v.native(), gbool(propagate))
+}
diff --git a/vendor/github.com/gotk3/gotk3/gtk/gtk_since_3_24.go b/vendor/github.com/gotk3/gotk3/gtk/gtk_since_3_24.go
new file mode 100644
index 000000000000..97968fb4c293
--- /dev/null
+++ b/vendor/github.com/gotk3/gotk3/gtk/gtk_since_3_24.go
@@ -0,0 +1,14 @@
+// +build !gtk_3_6,!gtk_3_8,!gtk_3_10,!gtk_3_12,!gtk_3_14,!gtk_3_16,!gtk_3_18,!gtk_3_20,!gtk_3_22
+
+package gtk
+
+// #include <gtk/gtk.h>
+import "C"
+
+/*
+ * GtkInputPurpose
+ */
+
+const (
+	INPUT_PURPOSE_TERMINAL InputPurpose = C.GTK_INPUT_PURPOSE_TERMINAL
+)
diff --git a/vendor/github.com/gotk3/gotk3/gtk/gtk_since_3_8.go b/vendor/github.com/gotk3/gotk3/gtk/gtk_since_3_8.go
index bbb85ece6fcc..21ffa40da35f 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/gtk_since_3_8.go
+++ b/vendor/github.com/gotk3/gotk3/gtk/gtk_since_3_8.go
@@ -25,11 +25,7 @@ package gtk
 
 // #include <gtk/gtk.h>
 import "C"
-import (
-	"sync"
 
-	"github.com/gotk3/gotk3/gdk"
-)
 /*
  * Constants
  */
@@ -38,25 +34,3 @@ const (
 	STATE_FLAG_DIR_LTR StateFlags = C.GTK_STATE_FLAG_DIR_LTR
 	STATE_FLAG_DIR_RTL StateFlags = C.GTK_STATE_FLAG_DIR_RTL
 )
-
-/*
- * GtkTickCallback
- */
-
-type TickCallback func(widget *Widget, frameClock *gdk.FrameClock, userData uintptr) bool
-
-type tickCallbackData struct {
-	fn       TickCallback
-	userData uintptr
-}
-
-var (
-	tickCallbackRegistry = struct {
-		sync.RWMutex
-		next int
-		m    map[int]tickCallbackData
-	}{
-		next: 1,
-		m:    make(map[int]tickCallbackData),
-	}
-)
diff --git a/vendor/github.com/gotk3/gotk3/gtk/icon_view.go b/vendor/github.com/gotk3/gotk3/gtk/icon_view.go
index d6019fd67d33..3508c1f60d6a 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/icon_view.go
+++ b/vendor/github.com/gotk3/gotk3/gtk/icon_view.go
@@ -36,6 +36,10 @@ func marshalIconView(p uintptr) (interface{}, error) {
 }
 
 func wrapIconView(obj *glib.Object) *IconView {
+	if obj == nil {
+		return nil
+	}
+
 	return &IconView{Container{Widget{glib.InitiallyUnowned{obj}}}}
 }
 
@@ -72,13 +76,12 @@ func (v *IconView) SetModel(model ITreeModel) {
 }
 
 // GetModel is a wrapper around gtk_icon_view_get_model().
-func (v *IconView) GetModel() (*TreeModel, error) {
+func (v *IconView) GetModel() (ITreeModel, error) {
 	c := C.gtk_icon_view_get_model(v.native())
 	if c == nil {
 		return nil, nilPtrErr
 	}
-	obj := glib.Take(unsafe.Pointer(c))
-	return wrapTreeModel(obj), nil
+	return castTreeModel(c)
 }
 
 // SetTextColumn is a wrapper around gtk_icon_view_set_text_column().
diff --git a/vendor/github.com/gotk3/gotk3/gtk/info_bar.go b/vendor/github.com/gotk3/gotk3/gtk/info_bar.go
index acc25be2a179..82a12a33d57d 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/info_bar.go
+++ b/vendor/github.com/gotk3/gotk3/gtk/info_bar.go
@@ -38,6 +38,10 @@ func marshalInfoBar(p uintptr) (interface{}, error) {
 }
 
 func wrapInfoBar(obj *glib.Object) *InfoBar {
+	if obj == nil {
+		return nil
+	}
+
 	return &InfoBar{Box{Container{Widget{glib.InitiallyUnowned{obj}}}}}
 }
 
@@ -95,13 +99,12 @@ func (v *InfoBar) GetMessageType() MessageType {
 }
 
 // GetActionArea is a wrapper around gtk_info_bar_get_action_area().
-func (v *InfoBar) GetActionArea() (*Widget, error) {
+func (v *InfoBar) GetActionArea() (IWidget, error) {
 	c := C.gtk_info_bar_get_action_area(v.native())
 	if c == nil {
 		return nil, nilPtrErr
 	}
-
-	return wrapWidget(glib.Take(unsafe.Pointer(c))), nil
+	return castWidget(c)
 }
 
 // GetContentArea is a wrapper around gtk_info_bar_get_content_area().
diff --git a/vendor/github.com/gotk3/gotk3/gtk/label.go b/vendor/github.com/gotk3/gotk3/gtk/label.go
index 50610bb16866..c8a084634a59 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/label.go
+++ b/vendor/github.com/gotk3/gotk3/gtk/label.go
@@ -39,10 +39,15 @@ func marshalLabel(p uintptr) (interface{}, error) {
 }
 
 func wrapLabel(obj *glib.Object) *Label {
+	if obj == nil {
+		return nil
+	}
+
 	return &Label{Widget{glib.InitiallyUnowned{obj}}}
 }
 
-func WidgetToLabel(widget *Widget) (interface{}, error) {
+// WidgetToLabel is a convience func that casts the given *Widget into a *Label.
+func WidgetToLabel(widget *Widget) (*Label, error) {
 	obj := glib.Take(unsafe.Pointer(widget.GObject))
 	return wrapLabel(obj), nil
 }
@@ -68,8 +73,10 @@ func (v *Label) SetText(str string) {
 
 // TODO:
 // gtk_label_set_text_with_mnemonic().
-// gtk_label_set_attributes().
 // gtk_label_get_attributes().
+func (v *Label) SetAttributes(attributes *pango.AttrList) {
+	C.gtk_label_set_attributes(v.native(), (*C.PangoAttrList)(unsafe.Pointer(attributes.Native())))
+}
 
 // SetMarkup is a wrapper around gtk_label_set_markup().
 func (v *Label) SetMarkup(str string) {
diff --git a/vendor/github.com/gotk3/gotk3/gtk/level_bar.go b/vendor/github.com/gotk3/gotk3/gtk/level_bar.go
index e9c6654bbd3c..1e35bf912f33 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/level_bar.go
+++ b/vendor/github.com/gotk3/gotk3/gtk/level_bar.go
@@ -66,6 +66,10 @@ func marshalLevelBar(p uintptr) (interface{}, error) {
 }
 
 func wrapLevelBar(obj *glib.Object) *LevelBar {
+	if obj == nil {
+		return nil
+	}
+
 	return &LevelBar{Widget{glib.InitiallyUnowned{obj}}}
 }
 
diff --git a/vendor/github.com/gotk3/gotk3/gtk/menu.go b/vendor/github.com/gotk3/gotk3/gtk/menu.go
index 09e1f9042009..43d5e3e2d3e4 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/menu.go
+++ b/vendor/github.com/gotk3/gotk3/gtk/menu.go
@@ -9,6 +9,8 @@ import "C"
 import (
 	"unsafe"
 
+	"github.com/gotk3/gotk3/gdk"
+
 	"github.com/gotk3/gotk3/glib"
 )
 
@@ -53,6 +55,10 @@ func marshalMenu(p uintptr) (interface{}, error) {
 }
 
 func wrapMenu(obj *glib.Object) *Menu {
+	if obj == nil {
+		return nil
+	}
+
 	return &Menu{MenuShell{Container{Widget{glib.InitiallyUnowned{obj}}}}}
 }
 
@@ -65,12 +71,102 @@ func MenuNew() (*Menu, error) {
 	return wrapMenu(glib.Take(unsafe.Pointer(c))), nil
 }
 
-// Popdown() is a wrapper around gtk_menu_popdown().
-func (v *Menu) Popdown() {
-	C.gtk_menu_popdown(v.native())
+// GtkMenuNewFromModel is a wrapper around gtk_menu_new_from_model().
+func GtkMenuNewFromModel(model *glib.MenuModel) (*Menu, error) {
+	c := C.gtk_menu_new_from_model(C.toGMenuModel(unsafe.Pointer(model.Native())))
+	if c == nil {
+		return nil, nilPtrErr
+	}
+	return wrapMenu(glib.Take(unsafe.Pointer(c))), nil
+}
+
+// SetScreen is a wrapper around gtk_menu_set_screen().
+func (v *Menu) SetScreen(screen *gdk.Screen) {
+	C.gtk_menu_set_screen(v.native(), (*C.GdkScreen)(unsafe.Pointer(screen.Native())))
+}
+
+// Attach is a wrapper around gtk_menu_attach().
+func (v *Menu) Attach(child IWidget, l, r, t, b uint) {
+	C.gtk_menu_attach(
+		v.native(),
+		child.toWidget(),
+		C.guint(l),
+		C.guint(r),
+		C.guint(t),
+		C.guint(b))
+}
+
+// SetMonitor() is a wrapper around gtk_menu_set_monitor().
+func (v *Menu) SetMonitor(monitor_num int) {
+	C.gtk_menu_set_monitor(v.native(), C.gint(monitor_num))
+}
+
+// GetMonitor() is a wrapper around gtk_menu_get_monitor().
+func (v *Menu) GetMonitor() int {
+	return int(C.gtk_menu_get_monitor(v.native()))
 }
 
 // ReorderChild() is a wrapper around gtk_menu_reorder_child().
 func (v *Menu) ReorderChild(child IWidget, position int) {
 	C.gtk_menu_reorder_child(v.native(), child.toWidget(), C.gint(position))
 }
+
+// SetReserveToggleSize() is a wrapper around gtk_menu_set_reserve_toggle_size().
+func (v *Menu) SetReserveToggleSize(reserve bool) {
+	C.gtk_menu_set_reserve_toggle_size(v.native(), gbool(reserve))
+}
+
+// GetReserveToggleSize() is a wrapper around gtk_menu_get_reserve_toggle_size().
+func (v *Menu) GetReserveToggleSize() bool {
+	return gobool(C.gtk_menu_get_reserve_toggle_size(v.native()))
+}
+
+// Popdown() is a wrapper around gtk_menu_popdown().
+func (v *Menu) Popdown() {
+	C.gtk_menu_popdown(v.native())
+}
+
+// TODO
+/*
+gtk_menu_reposition () require 'GtkMenuPositionFunc' (according to its position function.)
+*/
+
+// GetActive() is a wrapper around gtk_menu_get_active().
+func (v *Menu) GetActive() (*Menu, error) {
+	c := C.gtk_menu_get_active(v.native())
+	if c == nil {
+		return nil, nilPtrErr
+	}
+	return wrapMenu(glib.Take(unsafe.Pointer(c))), nil
+}
+
+// SetActive() is a wrapper around gtk_menu_set_active().
+func (v *Menu) SetActive(index uint) {
+	C.gtk_menu_set_active(v.native(), C.guint(index))
+}
+
+// TODO
+/*
+void
+gtk_menu_attach_to_widget (GtkMenu *menu,
+                           GtkWidget *attach_widget,
+                           GtkMenuDetachFunc detacher);
+
+void
+gtk_menu_detach (GtkMenu *menu);
+*/
+
+// GetAttachWidget() is a wrapper around gtk_menu_get_attach_widget().
+func (v *Menu) GetAttachWidget() (IWidget, error) {
+	c := C.gtk_menu_get_attach_widget(v.native())
+	if c == nil {
+		return nil, nilPtrErr
+	}
+	return castWidget(c)
+}
+
+// TODO
+/*
+GList *
+gtk_menu_get_for_attach_widget (GtkWidget *widget);
+*/
diff --git a/vendor/github.com/gotk3/gotk3/gtk/menu_shell.go b/vendor/github.com/gotk3/gotk3/gtk/menu_shell.go
index 8c890fd8a1f5..9595a096bea3 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/menu_shell.go
+++ b/vendor/github.com/gotk3/gotk3/gtk/menu_shell.go
@@ -12,6 +12,29 @@ import (
 	"github.com/gotk3/gotk3/glib"
 )
 
+func init() {
+	tm := []glib.TypeMarshaler{
+		{glib.Type(C.gtk_menu_direction_type_get_type()), marshalMenuDirectionType},
+	}
+
+	glib.RegisterGValueMarshalers(tm)
+}
+
+// MenuDirectionType is a representation of GTK's GtkMenuDirectionType.
+type MenuDirectionType int
+
+const (
+	MENU_DIR_PARENT MenuDirectionType = C.GTK_MENU_DIR_PARENT
+	MENU_DIR_CHILD  MenuDirectionType = C.GTK_MENU_DIR_CHILD
+	MENU_DIR_NEXT   MenuDirectionType = C.GTK_MENU_DIR_NEXT
+	MENU_DIR_PREV   MenuDirectionType = C.GTK_MENU_DIR_PREV
+)
+
+func marshalMenuDirectionType(p uintptr) (interface{}, error) {
+	c := C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))
+	return MenuDirectionType(c), nil
+}
+
 /*
  * GtkMenuShell
  */
@@ -37,6 +60,10 @@ func marshalMenuShell(p uintptr) (interface{}, error) {
 }
 
 func wrapMenuShell(obj *glib.Object) *MenuShell {
+	if obj == nil {
+		return nil
+	}
+
 	return &MenuShell{Container{Widget{glib.InitiallyUnowned{obj}}}}
 }
 
@@ -90,9 +117,41 @@ func (v *MenuShell) SetTakeFocus(takeFocus bool) {
 	C.gtk_menu_shell_set_take_focus(v.native(), gbool(takeFocus))
 }
 
-// TODO:
-// gboolean 	gtk_menu_shell_get_take_focus ()
-// GtkWidget * 	gtk_menu_shell_get_selected_item ()
-// GtkWidget * 	gtk_menu_shell_get_parent_shell ()
-// void 	gtk_menu_shell_bind_model ()
-// GtkMenuDirectionType
+// GetTakeFocus is a wrapper around gtk_menu_shell_get_take_focus().
+func (v *MenuShell) GetTakeFocus() bool {
+	return gobool(C.gtk_menu_shell_get_take_focus(v.native()))
+}
+
+// GetSelectedItem is a wrapper around gtk_menu_shell_get_selected_item().
+func (v *MenuShell) GetSelectedItem() (IMenuItem, error) {
+	c := C.gtk_menu_shell_get_selected_item(v.native())
+	if c == nil {
+		return nil, nilPtrErr
+	}
+	obj := glib.Take(unsafe.Pointer(c))
+	return wrapMenuItem(obj), nil
+}
+
+// GetParentShell is a wrapper around gtk_menu_shell_get_parent_shell().
+func (v *MenuShell) GetParentShell() (*MenuShell, error) {
+	c := C.gtk_menu_shell_get_parent_shell(v.native())
+	if c == nil {
+		return nil, nilPtrErr
+	}
+	obj := glib.Take(unsafe.Pointer(c))
+	return wrapMenuShell(obj), nil
+}
+
+// BindModel is a wrapper around gtk_menu_shell_bind_model().
+func (v *MenuShell) BindModel(model *glib.MenuModel,
+	action_namespace string, with_separators bool) {
+
+	cstr := C.CString(action_namespace)
+	defer C.free(unsafe.Pointer(cstr))
+
+	C.gtk_menu_shell_bind_model(
+		v.native(),
+		(*C.GMenuModel)(unsafe.Pointer(model.Native())),
+		cstr,
+		gbool(with_separators))
+}
diff --git a/vendor/github.com/gotk3/gotk3/gtk/menu_since_3_22.go b/vendor/github.com/gotk3/gotk3/gtk/menu_since_3_22.go
index 56128ad647fe..5ac626cbddf7 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/menu_since_3_22.go
+++ b/vendor/github.com/gotk3/gotk3/gtk/menu_since_3_22.go
@@ -11,10 +11,18 @@ import (
 	"github.com/gotk3/gotk3/gdk"
 )
 
-// PopupAtPointer() is a wrapper for gtk_menu_popup_at_pointer(), on older versions it uses PopupAtMouseCursor
-func (v *Menu) PopupAtPointer(triggerEvent *gdk.Event) {
-	e := (*C.GdkEvent)(unsafe.Pointer(triggerEvent.Native()))
-	C.gtk_menu_popup_at_pointer(v.native(), e)
+// PopupAtRect is a wrapper around gtk_menu_popup_at_rect().
+func (v *Menu) PopupAtRect(rect_window *gdk.Window,
+	rect *gdk.Rectangle, rect_anchor, menu_anchor gdk.Gravity,
+	trigger_event *gdk.Event) {
+
+	C.gtk_menu_popup_at_rect(
+		v.native(),
+		(*C.GdkWindow)(unsafe.Pointer(rect_window.Native())),
+		(*C.GdkRectangle)(unsafe.Pointer(&rect.GdkRectangle)),
+		C.GdkGravity(rect_anchor),
+		C.GdkGravity(menu_anchor),
+		(*C.GdkEvent)(unsafe.Pointer(trigger_event.Native())))
 }
 
 // PopupAtWidget() is a wrapper for gtk_menu_popup_at_widget()
@@ -22,3 +30,16 @@ func (v *Menu) PopupAtWidget(widget IWidget, widgetAnchor gdk.Gravity, menuAncho
 	e := (*C.GdkEvent)(unsafe.Pointer(triggerEvent.Native()))
 	C.gtk_menu_popup_at_widget(v.native(), widget.toWidget(), C.GdkGravity(widgetAnchor), C.GdkGravity(menuAnchor), e)
 }
+
+// PopupAtPointer() is a wrapper for gtk_menu_popup_at_pointer(), on older versions it uses PopupAtMouseCursor
+func (v *Menu) PopupAtPointer(triggerEvent *gdk.Event) {
+	e := (*C.GdkEvent)(unsafe.Pointer(triggerEvent.Native()))
+	C.gtk_menu_popup_at_pointer(v.native(), e)
+}
+
+// PlaceOnMonitor() is a wrapper around gtk_menu_place_on_monitor().
+func (v *Menu) PlaceOnMonitor(monitor *gdk.Monitor) {
+	C.gtk_menu_place_on_monitor(
+		v.native(),
+		(*C.GdkMonitor)(unsafe.Pointer(monitor.Native())))
+}
diff --git a/vendor/github.com/gotk3/gotk3/gtk/print.go b/vendor/github.com/gotk3/gotk3/gtk/print.go
index 14091dd8d43f..e65d04c6ee2d 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/print.go
+++ b/vendor/github.com/gotk3/gotk3/gtk/print.go
@@ -2,15 +2,16 @@ package gtk
 
 // #include <gtk/gtk.h>
 // #include "gtk.go.h"
+// #include "print.go.h"
 import "C"
 import (
 	"errors"
 	"runtime"
-	"sync"
 	"unsafe"
 
 	"github.com/gotk3/gotk3/cairo"
 	"github.com/gotk3/gotk3/glib"
+	"github.com/gotk3/gotk3/internal/callback"
 	"github.com/gotk3/gotk3/pango"
 )
 
@@ -248,6 +249,10 @@ func marshalPageSetup(p uintptr) (interface{}, error) {
 }
 
 func wrapPageSetup(obj *glib.Object) *PageSetup {
+	if obj == nil {
+		return nil
+	}
+
 	return &PageSetup{obj}
 }
 
@@ -648,6 +653,10 @@ func marshalPrintContext(p uintptr) (interface{}, error) {
 }
 
 func wrapPrintContext(obj *glib.Object) *PrintContext {
+	if obj == nil {
+		return nil
+	}
+
 	return &PrintContext{obj}
 }
 
@@ -755,6 +764,10 @@ func marshalPrintOperation(p uintptr) (interface{}, error) {
 }
 
 func wrapPrintOperation(obj *glib.Object) *PrintOperation {
+	if obj == nil {
+		return nil
+	}
+
 	pop := wrapPrintOperationPreview(obj)
 	return &PrintOperation{obj, *pop}
 }
@@ -872,7 +885,13 @@ func (po *PrintOperation) SetCustomTabLabel(label string) {
 // Run() is a wrapper around gtk_print_operation_run().
 func (po *PrintOperation) Run(action PrintOperationAction, parent IWindow) (PrintOperationResult, error) {
 	var err *C.GError = nil
-	c := C.gtk_print_operation_run(po.native(), C.GtkPrintOperationAction(action), parent.toWindow(), &err)
+
+	var w *C.GtkWindow = nil
+	if parent != nil {
+		w = parent.toWindow()
+	}
+
+	c := C.gtk_print_operation_run(po.native(), C.GtkPrintOperationAction(action), w, &err)
 	res := PrintOperationResult(c)
 	if res == PRINT_OPERATION_RESULT_ERROR {
 		defer C.g_error_free(err)
@@ -949,42 +968,30 @@ func (po *PrintOperation) GetEmbedPageSetup() bool {
 
 // PrintRunPageSetupDialog() is a wrapper around gtk_print_run_page_setup_dialog().
 func PrintRunPageSetupDialog(parent IWindow, pageSetup *PageSetup, settings *PrintSettings) *PageSetup {
-	c := C.gtk_print_run_page_setup_dialog(parent.toWindow(), pageSetup.native(), settings.native())
-	obj := glib.Take(unsafe.Pointer(c))
-	return wrapPageSetup(obj)
-}
 
-type PageSetupDoneCallback func(setup *PageSetup, userData uintptr)
+	var w *C.GtkWindow = nil
+	if parent != nil {
+		w = parent.toWindow()
+	}
 
-type pageSetupDoneCallbackData struct {
-	fn   PageSetupDoneCallback
-	data uintptr
+	c := C.gtk_print_run_page_setup_dialog(w, pageSetup.native(), settings.native())
+	obj := glib.Take(unsafe.Pointer(c))
+	return wrapPageSetup(obj)
 }
 
-var (
-	pageSetupDoneCallbackRegistry = struct {
-		sync.RWMutex
-		next int
-		m    map[int]pageSetupDoneCallbackData
-	}{
-		next: 1,
-		m:    make(map[int]pageSetupDoneCallbackData),
-	}
-)
+type PageSetupDoneCallback func(setup *PageSetup)
 
 // PrintRunPageSetupDialogAsync() is a wrapper around gtk_print_run_page_setup_dialog_async().
 func PrintRunPageSetupDialogAsync(parent IWindow, setup *PageSetup,
-	settings *PrintSettings, cb PageSetupDoneCallback, data uintptr) {
+	settings *PrintSettings, cb PageSetupDoneCallback) {
 
-	pageSetupDoneCallbackRegistry.Lock()
-	id := pageSetupDoneCallbackRegistry.next
-	pageSetupDoneCallbackRegistry.next++
-	pageSetupDoneCallbackRegistry.m[id] =
-		pageSetupDoneCallbackData{fn: cb, data: data}
-	pageSetupDoneCallbackRegistry.Unlock()
+	var w *C.GtkWindow = nil
+	if parent != nil {
+		w = parent.toWindow()
+	}
 
-	C._gtk_print_run_page_setup_dialog_async(parent.toWindow(), setup.native(),
-		settings.native(), C.gpointer(uintptr(id)))
+	C._gtk_print_run_page_setup_dialog_async(w, setup.native(),
+		settings.native(), C.gpointer(callback.Assign(cb)))
 }
 
 /*
@@ -1020,6 +1027,10 @@ func marshalPrintOperationPreview(p uintptr) (interface{}, error) {
 }
 
 func wrapPrintOperationPreview(obj *glib.Object) *PrintOperationPreview {
+	if obj == nil {
+		return nil
+	}
+
 	return &PrintOperationPreview{obj}
 }
 
@@ -1069,6 +1080,10 @@ func marshalPrintSettings(p uintptr) (interface{}, error) {
 }
 
 func wrapPrintSettings(obj *glib.Object) *PrintSettings {
+	if obj == nil {
+		return nil
+	}
+
 	return &PrintSettings{obj}
 }
 
@@ -1160,34 +1175,15 @@ func (ps *PrintSettings) Unset(key string) {
 	C.gtk_print_settings_unset(ps.native(), (*C.gchar)(cstr))
 }
 
-type PrintSettingsCallback func(key, value string, userData uintptr)
-
-type printSettingsCallbackData struct {
-	fn       PrintSettingsCallback
-	userData uintptr
-}
-
-var (
-	printSettingsCallbackRegistry = struct {
-		sync.RWMutex
-		next int
-		m    map[int]printSettingsCallbackData
-	}{
-		next: 1,
-		m:    make(map[int]printSettingsCallbackData),
-	}
-)
+type PrintSettingsCallback func(key, value string)
 
 // Foreach() is a wrapper around gtk_print_settings_foreach().
-func (ps *PrintSettings) ForEach(cb PrintSettingsCallback, userData uintptr) {
-	printSettingsCallbackRegistry.Lock()
-	id := printSettingsCallbackRegistry.next
-	printSettingsCallbackRegistry.next++
-	printSettingsCallbackRegistry.m[id] =
-		printSettingsCallbackData{fn: cb, userData: userData}
-	printSettingsCallbackRegistry.Unlock()
-
-	C._gtk_print_settings_foreach(ps.native(), C.gpointer(uintptr(id)))
+func (ps *PrintSettings) ForEach(cb PrintSettingsCallback) {
+	// Clean up callback immediately as we only need it for the duration of this Foreach call
+	id := callback.Assign(cb)
+	defer callback.Delete(id)
+
+	C._gtk_print_settings_foreach(ps.native(), C.gpointer(id))
 }
 
 // GetBool() is a wrapper around gtk_print_settings_get_bool().
diff --git a/vendor/github.com/gotk3/gotk3/gtk/print.go.h b/vendor/github.com/gotk3/gotk3/gtk/print.go.h
new file mode 100644
index 000000000000..fc1587fad33d
--- /dev/null
+++ b/vendor/github.com/gotk3/gotk3/gtk/print.go.h
@@ -0,0 +1,23 @@
+#pragma once
+
+#include <stdint.h>
+#include <stdlib.h>
+#include <string.h>
+
+extern void goPrintSettings(gchar *key, gchar *value, gpointer user_data);
+
+static inline void _gtk_print_settings_foreach(GtkPrintSettings *ps,
+                                               gpointer user_data) {
+  gtk_print_settings_foreach(ps, (GtkPrintSettingsFunc)(goPrintSettings),
+                             user_data);
+}
+
+extern void goPageSetupDone(GtkPageSetup *setup, gpointer data);
+
+static inline void
+_gtk_print_run_page_setup_dialog_async(GtkWindow *parent, GtkPageSetup *setup,
+                                       GtkPrintSettings *settings,
+                                       gpointer data) {
+  gtk_print_run_page_setup_dialog_async(
+      parent, setup, settings, (GtkPageSetupDoneFunc)(goPageSetupDone), data);
+}
diff --git a/vendor/github.com/gotk3/gotk3/gtk/print_export.go b/vendor/github.com/gotk3/gotk3/gtk/print_export.go
new file mode 100644
index 000000000000..388eff2ac6d2
--- /dev/null
+++ b/vendor/github.com/gotk3/gotk3/gtk/print_export.go
@@ -0,0 +1,23 @@
+package gtk
+
+// #include <gtk/gtk.h>
+import "C"
+import (
+	"unsafe"
+
+	"github.com/gotk3/gotk3/glib"
+	"github.com/gotk3/gotk3/internal/callback"
+)
+
+//export goPageSetupDone
+func goPageSetupDone(setup *C.GtkPageSetup, data C.gpointer) {
+	// This callback is only used once, so we can clean up immediately
+	fn := callback.GetAndDelete(uintptr(data)).(PageSetupDoneCallback)
+	fn(wrapPageSetup(glib.Take(unsafe.Pointer(setup))))
+}
+
+//export goPrintSettings
+func goPrintSettings(key *C.gchar, value *C.gchar, userData C.gpointer) {
+	fn := callback.Get(uintptr(userData)).(PrintSettingsCallback)
+	fn(C.GoString((*C.char)(key)), C.GoString((*C.char)(value)))
+}
diff --git a/vendor/github.com/gotk3/gotk3/gtk/settings.go b/vendor/github.com/gotk3/gotk3/gtk/settings.go
index 7025eda3a026..a1727b4dd7d4 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/settings.go
+++ b/vendor/github.com/gotk3/gotk3/gtk/settings.go
@@ -39,6 +39,10 @@ func marshalSettings(p uintptr) (interface{}, error) {
 }
 
 func wrapSettings(obj *glib.Object) *Settings {
+	if obj == nil {
+		return nil
+	}
+
 	return &Settings{obj}
 }
 
diff --git a/vendor/github.com/gotk3/gotk3/gtk/settings.go.h b/vendor/github.com/gotk3/gotk3/gtk/settings.go.h
index 571b91ae434b..a48a24d99a3e 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/settings.go.h
+++ b/vendor/github.com/gotk3/gotk3/gtk/settings.go.h
@@ -1,5 +1 @@
-static GtkSettings *
-toGtkSettings(void *p)
-{
-	return (GTK_SETTINGS(p));
-}
+static GtkSettings *toGtkSettings(void *p) { return (GTK_SETTINGS(p)); }
diff --git a/vendor/github.com/gotk3/gotk3/gtk/shortcutswindow_since_3_20.go b/vendor/github.com/gotk3/gotk3/gtk/shortcutswindow_since_3_20.go
index a662280f687d..8eb2ef06e6dc 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/shortcutswindow_since_3_20.go
+++ b/vendor/github.com/gotk3/gotk3/gtk/shortcutswindow_since_3_20.go
@@ -52,6 +52,10 @@ func marshalShortcutsWindow(p uintptr) (interface{}, error) {
 }
 
 func wrapShortcutsWindow(obj *glib.Object) *ShortcutsWindow {
+	if obj == nil {
+		return nil
+	}
+
 	return &ShortcutsWindow{Window{Bin{Container{Widget{glib.InitiallyUnowned{obj}}}}}}
 }
 
@@ -80,6 +84,10 @@ func marshalShortcutsSection(p uintptr) (interface{}, error) {
 }
 
 func wrapShortcutsSection(obj *glib.Object) *ShortcutsSection {
+	if obj == nil {
+		return nil
+	}
+
 	return &ShortcutsSection{Box{Container{Widget{glib.InitiallyUnowned{obj}}}}}
 }
 
@@ -108,6 +116,10 @@ func marshalShortcutsGroup(p uintptr) (interface{}, error) {
 }
 
 func wrapShortcutsGroup(obj *glib.Object) *ShortcutsGroup {
+	if obj == nil {
+		return nil
+	}
+
 	return &ShortcutsGroup{Box{Container{Widget{glib.InitiallyUnowned{obj}}}}}
 }
 
@@ -136,5 +148,9 @@ func marshalShortcutsShortcut(p uintptr) (interface{}, error) {
 }
 
 func wrapShortcutsShortcut(obj *glib.Object) *ShortcutsShortcut {
+	if obj == nil {
+		return nil
+	}
+
 	return &ShortcutsShortcut{Box{Container{Widget{glib.InitiallyUnowned{obj}}}}}
 }
diff --git a/vendor/github.com/gotk3/gotk3/gtk/shortcutswindow_since_3_20.go.h b/vendor/github.com/gotk3/gotk3/gtk/shortcutswindow_since_3_20.go.h
index 9a4a1a8cf728..19221772bcca 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/shortcutswindow_since_3_20.go.h
+++ b/vendor/github.com/gotk3/gotk3/gtk/shortcutswindow_since_3_20.go.h
@@ -16,26 +16,18 @@
  * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
  */
 
-static GtkShortcutsWindow *
-toGtkShortcutsWindow(void *p)
-{
-	return (GTK_SHORTCUTS_WINDOW(p));
+static GtkShortcutsWindow *toGtkShortcutsWindow(void *p) {
+  return (GTK_SHORTCUTS_WINDOW(p));
 }
 
-static GtkShortcutsSection *
-toGtkShortcutsSection(void *p)
-{
-	return (GTK_SHORTCUTS_SECTION(p));
+static GtkShortcutsSection *toGtkShortcutsSection(void *p) {
+  return (GTK_SHORTCUTS_SECTION(p));
 }
 
-static GtkShortcutsGroup *
-toGtkShortcutsGroup(void *p)
-{
-	return (GTK_SHORTCUTS_GROUP(p));
+static GtkShortcutsGroup *toGtkShortcutsGroup(void *p) {
+  return (GTK_SHORTCUTS_GROUP(p));
 }
 
-static GtkShortcutsShortcut *
-toGtkShortcutsShortcut(void *p)
-{
-	return (GTK_SHORTCUTS_SHORTCUT(p));
+static GtkShortcutsShortcut *toGtkShortcutsShortcut(void *p) {
+  return (GTK_SHORTCUTS_SHORTCUT(p));
 }
\ No newline at end of file
diff --git a/vendor/github.com/gotk3/gotk3/gtk/socket_plug.go b/vendor/github.com/gotk3/gotk3/gtk/socket_plug.go
index 890691798f15..b8a561689649 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/socket_plug.go
+++ b/vendor/github.com/gotk3/gotk3/gtk/socket_plug.go
@@ -9,9 +9,10 @@ package gtk
 // #include "socket_plug.go.h"
 import "C"
 import (
+	"unsafe"
+
 	"github.com/gotk3/gotk3/gdk"
 	"github.com/gotk3/gotk3/glib"
-	"unsafe"
 )
 
 func init() {
@@ -51,6 +52,10 @@ func marshalSocket(p uintptr) (interface{}, error) {
 }
 
 func wrapSocket(obj *glib.Object) *Socket {
+	if obj == nil {
+		return nil
+	}
+
 	return &Socket{Container{Widget{glib.InitiallyUnowned{obj}}}}
 }
 
@@ -130,6 +135,10 @@ func marshalPlug(p uintptr) (interface{}, error) {
 }
 
 func wrapPlug(obj *glib.Object) *Plug {
+	if obj == nil {
+		return nil
+	}
+
 	return &Plug{Window{Bin{Container{Widget{glib.InitiallyUnowned{obj}}}}}}
 }
 
diff --git a/vendor/github.com/gotk3/gotk3/gtk/socket_plug.go.h b/vendor/github.com/gotk3/gotk3/gtk/socket_plug.go.h
index cc64d1894414..0de1cbd07b11 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/socket_plug.go.h
+++ b/vendor/github.com/gotk3/gotk3/gtk/socket_plug.go.h
@@ -1,18 +1,6 @@
 
-static GtkSocket *
-toGtkSocket(void *p)
-{
-	return (GTK_SOCKET(p));
-}
+static GtkSocket *toGtkSocket(void *p) { return (GTK_SOCKET(p)); }
 
-static GtkPlug *
-toGtkPlug(void *p)
-{
-	return (GTK_PLUG(p));
-}
+static GtkPlug *toGtkPlug(void *p) { return (GTK_PLUG(p)); }
 
-static GdkDisplay *
-toGdkDisplay(void *p)
-{
-	return (GDK_DISPLAY(p));
-}
+static GdkDisplay *toGdkDisplay(void *p) { return (GDK_DISPLAY(p)); }
diff --git a/vendor/github.com/gotk3/gotk3/gtk/stack_since_3_12.go b/vendor/github.com/gotk3/gotk3/gtk/stack_since_3_12.go
index e65604acd87b..cce9b12bbf1e 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/stack_since_3_12.go
+++ b/vendor/github.com/gotk3/gotk3/gtk/stack_since_3_12.go
@@ -12,19 +12,17 @@ package gtk
 import "C"
 import (
 	"unsafe"
-
-	"github.com/gotk3/gotk3/glib"
 )
 
 // GetChildByName is a wrapper around gtk_stack_get_child_by_name().
-func (v *Stack) GetChildByName(name string) *Widget {
+func (v *Stack) GetChildByName(name string) (IWidget, error) {
 	cstr := C.CString(name)
 	defer C.free(unsafe.Pointer(cstr))
 	c := C.gtk_stack_get_child_by_name(v.native(), (*C.gchar)(cstr))
 	if c == nil {
-		return nil
+		return nil, nilPtrErr
 	}
-	return wrapWidget(glib.Take(unsafe.Pointer(c)))
+	return castWidget(c)
 }
 
 // GetTransitionRunning is a wrapper around gtk_stack_get_transition_running().
diff --git a/vendor/github.com/gotk3/gotk3/gtk/stackswitcher_since_3_10.go b/vendor/github.com/gotk3/gotk3/gtk/stackswitcher_since_3_10.go
index 3bc4b33f5c02..d9dae76aafdf 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/stackswitcher_since_3_10.go
+++ b/vendor/github.com/gotk3/gotk3/gtk/stackswitcher_since_3_10.go
@@ -50,6 +50,10 @@ func marshalStackSwitcher(p uintptr) (interface{}, error) {
 }
 
 func wrapStackSwitcher(obj *glib.Object) *StackSwitcher {
+	if obj == nil {
+		return nil
+	}
+
 	return &StackSwitcher{Box{Container{Widget{glib.InitiallyUnowned{obj}}}}}
 }
 
diff --git a/vendor/github.com/gotk3/gotk3/gtk/style.go b/vendor/github.com/gotk3/gotk3/gtk/style.go
index 3babc7411c5b..c750152d92d3 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/style.go
+++ b/vendor/github.com/gotk3/gotk3/gtk/style.go
@@ -42,6 +42,10 @@ func (v *StyleContext) native() *C.GtkStyleContext {
 }
 
 func wrapStyleContext(obj *glib.Object) *StyleContext {
+	if obj == nil {
+		return nil
+	}
+
 	return &StyleContext{obj}
 }
 
diff --git a/vendor/github.com/gotk3/gotk3/gtk/testing.go b/vendor/github.com/gotk3/gotk3/gtk/testing.go
index 981a5a2cfc42..8d53e9842cce 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/testing.go
+++ b/vendor/github.com/gotk3/gotk3/gtk/testing.go
@@ -64,7 +64,6 @@ func TestFindWidget(widget IWidget, labelPattern string, widgetType glib.Type) (
 	return obj, nil
 }
 
-
 /*
 TestInit is a wrapper around gtk_test_init().
 This function is used to initialize a GTK+ test program.
diff --git a/vendor/github.com/gotk3/gotk3/gtk/testing_deprecated_since_3_20.go b/vendor/github.com/gotk3/gotk3/gtk/testing_deprecated_since_3_20.go
index 3264fdf9e89c..bc75d3a88d07 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/testing_deprecated_since_3_20.go
+++ b/vendor/github.com/gotk3/gotk3/gtk/testing_deprecated_since_3_20.go
@@ -1,4 +1,4 @@
-//+build gtk_3_6 gtk_3_8 gtk_3_10 gtk_3_12 gtk_3_14 gtk_3_16 gtk_3_18
+//+build gtk_3_6 gtk_3_8 gtk_3_10 gtk_3_12 gtk_3_14 gtk_3_16 gtk_3_18 gtk_deprecated
 
 package gtk
 
@@ -8,7 +8,6 @@ import (
 	"github.com/gotk3/gotk3/gdk"
 )
 
-
 /*
 GtkWidget *
 gtk_test_create_simple_window (const gchar *window_title,
@@ -58,6 +57,6 @@ gtk_test_text_set (GtkWidget *widget,
 // modifiers: Keyboard modifiers the event is setup with.
 //
 // returns: whether all actions neccessary for the button click simulation were carried out successfully.
-func TestWidgetClick(widget IWidget, button uint, modifiers gdk.ModifierType) bool {
+func TestWidgetClick(widget IWidget, button gdk.Button, modifiers gdk.ModifierType) bool {
 	return gobool(C.gtk_test_widget_click(widget.toWidget(), C.guint(button), C.GdkModifierType(modifiers)))
 }
diff --git a/vendor/github.com/gotk3/gotk3/gtk/text_child_anchor.go b/vendor/github.com/gotk3/gotk3/gtk/text_child_anchor.go
index 1ba36349a716..d6f8fb4844db 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/text_child_anchor.go
+++ b/vendor/github.com/gotk3/gotk3/gtk/text_child_anchor.go
@@ -3,17 +3,79 @@
 package gtk
 
 // #include <gtk/gtk.h>
-// #include "gtk.go.h"
+// #include "text_child_anchor.go.h"
 import "C"
+import (
+	"unsafe"
+
+	"github.com/gotk3/gotk3/glib"
+)
+
+func init() {
+	tm := []glib.TypeMarshaler{
+		// Objects/Interfaces
+		{glib.Type(C.gtk_text_child_anchor_get_type()), marshalTextChildAnchor},
+	}
+	glib.RegisterGValueMarshalers(tm)
+}
 
 /*
  * GtkTextChildAnchor
  */
 
 // TextChildAnchor is a representation of GTK's GtkTextChildAnchor
-type TextChildAnchor C.GtkTextChildAnchor
+type TextChildAnchor struct {
+	glib.InitiallyUnowned
+}
 
 // native returns a pointer to the underlying GtkTextChildAnchor.
 func (v *TextChildAnchor) native() *C.GtkTextChildAnchor {
-	return (*C.GtkTextChildAnchor)(v)
+	if v == nil || v.GObject == nil {
+		return nil
+	}
+	p := unsafe.Pointer(v.GObject)
+	return C.toGtkTextChildAnchor(p)
+}
+
+func marshalTextChildAnchor(p uintptr) (interface{}, error) {
+	c := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
+	obj := glib.Take(unsafe.Pointer(c))
+	return wrapTextChildAnchor(obj), nil
+}
+
+func wrapTextChildAnchor(obj *glib.Object) *TextChildAnchor {
+	if obj == nil {
+		return nil
+	}
+
+	return &TextChildAnchor{glib.InitiallyUnowned{obj}}
+}
+
+// TextChildAnchorNew is a wrapper around gtk_text_child_anchor_new ()
+func TextChildAnchorNew() (*TextChildAnchor, error) {
+	c := C.gtk_text_child_anchor_new()
+	if c == nil {
+		return nil, nilPtrErr
+	}
+	return wrapTextChildAnchor(glib.Take(unsafe.Pointer(c))), nil
+}
+
+// GetWidgets is a wrapper around gtk_text_child_anchor_get_widgets ().
+func (v *TextChildAnchor) GetWidgets() *glib.List {
+	clist := C.gtk_text_child_anchor_get_widgets(v.native())
+	if clist == nil {
+		return nil
+	}
+
+	glist := glib.WrapList(uintptr(unsafe.Pointer(clist)))
+	glist.DataWrapper(func(ptr unsafe.Pointer) interface{} {
+		return wrapWidget(glib.Take(ptr))
+	})
+
+	return glist
+}
+
+// GetDeleted is a wrapper around gtk_text_child_anchor_get_deleted().
+func (v *TextChildAnchor) GetDeleted() bool {
+	return gobool(C.gtk_text_child_anchor_get_deleted(v.native()))
 }
diff --git a/vendor/github.com/gotk3/gotk3/gtk/text_child_anchor.go.h b/vendor/github.com/gotk3/gotk3/gtk/text_child_anchor.go.h
new file mode 100644
index 000000000000..631275df9e13
--- /dev/null
+++ b/vendor/github.com/gotk3/gotk3/gtk/text_child_anchor.go.h
@@ -0,0 +1,23 @@
+/*
+ * Copyright (c) 2013-2014 Conformal Systems <info@conformal.com>
+ *
+ * This file originated from: http://opensource.conformal.com/
+ *
+ * Permission to use, copy, modify, and distribute this software for any
+ * purpose with or without fee is hereby granted, provided that the above
+ * copyright notice and this permission notice appear in all copies.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
+ * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
+ * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
+ * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
+ * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
+ * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
+ * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ */
+
+static GtkTextChildAnchor *
+toGtkTextChildAnchor(void *p)
+{
+	return (GTK_TEXT_CHILD_ANCHOR(p));
+}
diff --git a/vendor/github.com/gotk3/gotk3/gtk/text_mark.go b/vendor/github.com/gotk3/gotk3/gtk/text_mark.go
index 1a41934194a9..dd48581cc1a7 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/text_mark.go
+++ b/vendor/github.com/gotk3/gotk3/gtk/text_mark.go
@@ -6,24 +6,92 @@ package gtk
 // #include "gtk.go.h"
 import "C"
 
-import "unsafe"
+import (
+	"unsafe"
+
+	"github.com/gotk3/gotk3/glib"
+)
+
+func init() {
+
+	WrapMap["GtkTextMark"] = wrapTextMark
+}
 
 /*
  * GtkTextMark
  */
 
-// TextMark is a representation of GTK's GtkTextMark
-type TextMark C.GtkTextMark
+// TextMark is a representation of GTK's GtkTextMark.
+// A position in the buffer preserved across buffer modifications
+type TextMark struct {
+	*glib.Object
+}
 
 // native returns a pointer to the underlying GtkTextMark.
 func (v *TextMark) native() *C.GtkTextMark {
-	if v == nil {
+	if v == nil || v.GObject == nil {
 		return nil
 	}
-	return (*C.GtkTextMark)(v)
+	p := unsafe.Pointer(v.GObject)
+	return C.toGtkTextMark(p)
 }
 
 func marshalTextMark(p uintptr) (interface{}, error) {
-	c := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
-	return (*TextMark)(unsafe.Pointer(c)), nil
+	c := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
+	obj := glib.Take(unsafe.Pointer(c))
+	return wrapTextMark(obj), nil
+}
+
+func wrapTextMark(obj *glib.Object) *TextMark {
+	if obj == nil {
+		return nil
+	}
+
+	return &TextMark{obj}
+}
+
+// TextMarkNew is a wrapper around gtk_text_mark_new().
+func TextMarkNew(name string, leftGravity bool) (*TextMark, error) {
+	cstr := C.CString(name)
+	defer C.free(unsafe.Pointer(cstr))
+
+	c := C.gtk_text_mark_new((*C.gchar)(cstr), gbool(leftGravity))
+	if c == nil {
+		return nil, nilPtrErr
+	}
+	return wrapTextMark(glib.Take(unsafe.Pointer(c))), nil
+}
+
+// SetVisible is a wrapper around gtk_text_mark_set_visible().
+func (v *TextMark) SetVisible(setting bool) {
+	C.gtk_text_mark_set_visible(v.native(), gbool(setting))
+}
+
+// GetVisible is a wrapper around gtk_text_mark_get_visible().
+func (v *TextMark) GetVisible() bool {
+	return gobool(C.gtk_text_mark_get_visible(v.native()))
+}
+
+// GetDeleted is a wrapper around gtk_text_mark_get_deleted().
+func (v *TextMark) GetDeleted() bool {
+	return gobool(C.gtk_text_mark_get_deleted(v.native()))
+}
+
+// GetName is a wrapper around gtk_text_mark_get_name().
+func (v *TextMark) GetName() string {
+	return goString(C.gtk_text_mark_get_name(v.native()))
+}
+
+// GetBuffer is a wrapper around gtk_text_mark_get_buffer().
+func (v *TextMark) GetBuffer() (*TextBuffer, error) {
+	c := C.gtk_text_mark_get_buffer(v.native())
+	if c == nil {
+		return nil, nilPtrErr
+	}
+	return wrapTextBuffer(glib.Take(unsafe.Pointer(c))), nil
+}
+
+// GetLeftGravity is a wrapper around gtk_text_mark_get_left_gravity().
+func (v *TextMark) GetLeftGravity() bool {
+	return gobool(C.gtk_text_mark_get_left_gravity(v.native()))
 }
diff --git a/vendor/github.com/gotk3/gotk3/gtk/text_view.go b/vendor/github.com/gotk3/gotk3/gtk/text_view.go
index 2ede3581520a..5450304684c9 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/text_view.go
+++ b/vendor/github.com/gotk3/gotk3/gtk/text_view.go
@@ -6,12 +6,23 @@ package gtk
 // #include "gtk.go.h"
 import "C"
 import (
+	"runtime"
 	"unsafe"
 
 	"github.com/gotk3/gotk3/gdk"
 	"github.com/gotk3/gotk3/glib"
+	"github.com/gotk3/gotk3/pango"
 )
 
+func init() {
+
+	tm := []glib.TypeMarshaler{
+		{glib.Type(C.gtk_text_window_type_get_type()), marshalTextWindowType},
+	}
+
+	glib.RegisterGValueMarshalers(tm)
+}
+
 // TextWindowType is a representation of GTK's GtkTextWindowType.
 type TextWindowType int
 
@@ -25,6 +36,11 @@ const (
 	TEXT_WINDOW_BOTTOM  TextWindowType = C.GTK_TEXT_WINDOW_BOTTOM
 )
 
+func marshalTextWindowType(p uintptr) (interface{}, error) {
+	c := C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))
+	return TextWindowType(c), nil
+}
+
 /*
  * GtkTextView
  */
@@ -50,6 +66,10 @@ func marshalTextView(p uintptr) (interface{}, error) {
 }
 
 func wrapTextView(obj *glib.Object) *TextView {
+	if obj == nil {
+		return nil
+	}
+
 	return &TextView{Container{Widget{glib.InitiallyUnowned{obj}}}}
 }
 
@@ -214,6 +234,22 @@ func (v *TextView) GetIndent() int {
 	return int(c)
 }
 
+// SetTabs is a wrapper around gtk_text_view_set_tabs().
+func (v *TextView) SetTabs(tabs *pango.TabArray) {
+	C.gtk_text_view_set_tabs(v.native(), (*C.PangoTabArray)(unsafe.Pointer(tabs.Native())))
+}
+
+// GetTabs is a wrapper around gtk_text_view_get_tabs().
+func (v *TextView) GetTabs() (*pango.TabArray, error) {
+	c := C.gtk_text_view_get_tabs(v.native())
+	if c == nil {
+		return nil, nilPtrErr
+	}
+	ta := pango.WrapTabArray(uintptr(unsafe.Pointer(c)))
+	runtime.SetFinalizer(ta, (*pango.TabArray).Free)
+	return ta, nil
+}
+
 // SetInputHints is a wrapper around gtk_text_view_set_input_hints().
 func (v *TextView) SetInputHints(hints InputHints) {
 	C.gtk_text_view_set_input_hints(v.native(), C.GtkInputHints(hints))
@@ -408,17 +444,5 @@ func (v *TextView) AddChildAtAnchor(child IWidget, anchor *TextChildAnchor) {
 }
 
 // TODO:
-// GtkTextChildAnchor * 	gtk_text_child_anchor_new ()
-// GList * 	gtk_text_child_anchor_get_widgets ()
-// gboolean 	gtk_text_child_anchor_get_deleted ()
-// void 	gtk_text_view_set_top_margin () -- SINCE 3.18
-// gint 	gtk_text_view_get_top_margin () -- SINCE 3.18
-// void 	gtk_text_view_set_bottom_margin ()  -- SINCE 3.18
-// gint 	gtk_text_view_get_bottom_margin ()  -- SINCE 3.18
-// void 	gtk_text_view_set_tabs () -- PangoTabArray
-// PangoTabArray * 	gtk_text_view_get_tabs () -- PangoTabArray
 // GtkTextAttributes * 	gtk_text_view_get_default_attributes () -- GtkTextAttributes
-// void 	gtk_text_view_set_monospace () -- SINCE 3.16
-// gboolean 	gtk_text_view_get_monospace () -- SINCE 3.16
 // GtkTextViewLayer
-// GtkTextExtendSelection
diff --git a/vendor/github.com/gotk3/gotk3/gtk/tooltip.go b/vendor/github.com/gotk3/gotk3/gtk/tooltip.go
index c713ea5ae339..9283b2ec86e8 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/tooltip.go
+++ b/vendor/github.com/gotk3/gotk3/gtk/tooltip.go
@@ -34,6 +34,10 @@ func marshalTooltip(p uintptr) (interface{}, error) {
 }
 
 func wrapTooltip(obj *glib.Object) *Tooltip {
+	if obj == nil {
+		return nil
+	}
+
 	return &Tooltip{Widget{glib.InitiallyUnowned{obj}}}
 }
 
diff --git a/vendor/github.com/gotk3/gotk3/gtk/tree_view.go b/vendor/github.com/gotk3/gotk3/gtk/tree_view.go
index e88ca0290eb0..96817f70fcec 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/tree_view.go
+++ b/vendor/github.com/gotk3/gotk3/gtk/tree_view.go
@@ -8,10 +8,12 @@ package gtk
 import "C"
 import (
 	"runtime"
+	"strings"
 	"unsafe"
 
 	"github.com/gotk3/gotk3/gdk"
 	"github.com/gotk3/gotk3/glib"
+	"github.com/gotk3/gotk3/internal/callback"
 )
 
 /*
@@ -39,6 +41,10 @@ func marshalTreeView(p uintptr) (interface{}, error) {
 }
 
 func wrapTreeView(obj *glib.Object) *TreeView {
+	if obj == nil {
+		return nil
+	}
+
 	return &TreeView{Container{Widget{glib.InitiallyUnowned{obj}}}}
 }
 
@@ -61,12 +67,12 @@ func TreeViewNewWithModel(model ITreeModel) (*TreeView, error) {
 }
 
 // GetModel is a wrapper around gtk_tree_view_get_model().
-func (v *TreeView) GetModel() (*TreeModel, error) {
+func (v *TreeView) GetModel() (ITreeModel, error) {
 	c := C.gtk_tree_view_get_model(v.native())
 	if c == nil {
-		return nil, nil
+		return nil, nilPtrErr
 	}
-	return wrapTreeModel(glib.Take(unsafe.Pointer(c))), nil
+	return castTreeModel(c)
 }
 
 // SetModel is a wrapper around gtk_tree_view_set_model().
@@ -226,7 +232,7 @@ func (v *TreeView) GetColumns() *glib.List {
 	if clist == nil {
 		return nil
 	}
-	
+
 	list := glib.WrapList(uintptr(unsafe.Pointer(clist)))
 	list.DataWrapper(func(ptr unsafe.Pointer) interface{} {
 		return wrapTreeViewColumn(glib.Take(unsafe.Pointer(ptr)))
@@ -234,7 +240,7 @@ func (v *TreeView) GetColumns() *glib.List {
 	runtime.SetFinalizer(list, func(glist *glib.List) {
 		glist.Free()
 	})
-	
+
 	return list
 }
 
@@ -366,6 +372,15 @@ func (v *TreeView) ConvertBinWindowToWidgetCoords(bx, by int, wx, wy *int) {
 		(*C.gint)(unsafe.Pointer(wy)))
 }
 
+// ConvertBinWindowToTreeCoords is a wrapper around gtk_tree_view_convert_bin_window_to_tree_coords().
+func (v *TreeView) ConvertBinWindowToTreeCoords(bx, by int, tx, ty *int) {
+	C.gtk_tree_view_convert_bin_window_to_tree_coords(v.native(),
+		(C.gint)(bx),
+		(C.gint)(by),
+		(*C.gint)(unsafe.Pointer(tx)),
+		(*C.gint)(unsafe.Pointer(ty)))
+}
+
 // SetEnableSearch is a wrapper around gtk_tree_view_set_enable_search().
 func (v *TreeView) SetEnableSearch(b bool) {
 	C.gtk_tree_view_set_enable_search(v.native(), gbool(b))
@@ -400,15 +415,22 @@ func (v *TreeView) SetSearchEntry(e *Entry) {
 	C.gtk_tree_view_set_search_entry(v.native(), e.native())
 }
 
-// SetSearchEqualSubstringMatch is a wrapper around gtk_tree_view_set_search_equal_func().
-// TODO: user data is ignored
-// TODO: searc and destroy GDestroyNotify cannot be specified
+// TreeViewSearchEqualFunc is the callback type for TreeView's
+// SetSearchEqualFunc. It is worth noting that the returned boolean should be
+// false if the row matches.
+type TreeViewSearchEqualFunc func(model *TreeModel, column int, key string, iter *TreeIter) (notMatch bool)
+
+// SetSearchEqualFunc is a wrapper around gtk_tree_view_set_search_equal_func().
+func (v *TreeView) SetSearchEqualFunc(f TreeViewSearchEqualFunc) {
+	C._gtk_tree_view_set_search_equal_func(v.native(), C.gpointer(callback.Assign(f)))
+}
+
+// SetSearchEqualSubstringMatch calls SetSearchEqualFunc with a strings.Contains
+// adapter.
 func (v *TreeView) SetSearchEqualSubstringMatch() {
-	C.gtk_tree_view_set_search_equal_func(
-		v.native(),
-		(C.GtkTreeViewSearchEqualFunc)(unsafe.Pointer(C.substring_match_equal_func)),
-		nil,
-		nil)
+	v.SetSearchEqualFunc(func(model *TreeModel, column int, key string, iter *TreeIter) bool {
+		return !strings.Contains(model.GetStringFromIter(iter), key)
+	})
 }
 
 // SetFixedHeightMode is a wrapper around gtk_tree_view_set_fixed_height_mode().
@@ -537,6 +559,16 @@ func (v *TreeView) SetTooltipRow(tooltip *Tooltip, path *TreePath) {
 	C.gtk_tree_view_set_tooltip_row(v.native(), tooltip.native(), path.native())
 }
 
+// TreeViewDropPosition describes GtkTreeViewDropPosition.
+type TreeViewDropPosition int
+
+const (
+	TREE_VIEW_DROP_BEFORE         TreeViewDropPosition = C.GTK_TREE_VIEW_DROP_BEFORE
+	TREE_VIEW_DROP_AFTER          TreeViewDropPosition = C.GTK_TREE_VIEW_DROP_AFTER
+	TREE_VIEW_DROP_INTO_OR_BEFORE TreeViewDropPosition = C.GTK_TREE_VIEW_DROP_INTO_OR_BEFORE
+	TREE_VIEW_DROP_INTO_OR_AFTER  TreeViewDropPosition = C.GTK_TREE_VIEW_DROP_INTO_OR_AFTER
+)
+
 // TODO:
 // GtkTreeViewDropPosition
 // gboolean 	gtk_tree_view_get_tooltip_context ()
@@ -555,15 +587,71 @@ func (v *TreeView) SetTooltipRow(tooltip *Tooltip, path *TreePath) {
 // void 	gtk_tree_view_get_background_area ()
 // void 	gtk_tree_view_get_visible_rect ()
 // gboolean 	gtk_tree_view_get_visible_range ()
-// void 	gtk_tree_view_convert_bin_window_to_tree_coords ()
 // void 	gtk_tree_view_convert_tree_to_bin_window_coords ()
 // void 	gtk_tree_view_convert_tree_to_widget_coords ()
 // void 	gtk_tree_view_convert_widget_to_tree_coords ()
-// void 	gtk_tree_view_enable_model_drag_dest ()
-// void 	gtk_tree_view_enable_model_drag_source ()
-// void 	gtk_tree_view_unset_rows_drag_source ()
-// void 	gtk_tree_view_unset_rows_drag_dest ()
-// void 	gtk_tree_view_set_drag_dest_row ()
-// void 	gtk_tree_view_get_drag_dest_row ()
-// gboolean 	gtk_tree_view_get_dest_row_at_pos ()
 // cairo_surface_t * 	gtk_tree_view_create_row_drag_icon ()
+
+// EnableModelDragDest is a wrapper around gtk_tree_view_enable_model_drag_dest().
+func (v *TreeView) EnableModelDragDest(targets []TargetEntry, actions gdk.DragAction) {
+	C.gtk_tree_view_enable_model_drag_dest(v.native(), (*C.GtkTargetEntry)(&targets[0]), C.gint(len(targets)), C.GdkDragAction(actions))
+}
+
+// EnableModelDragSource is a wrapper around gtk_tree_view_enable_model_drag_source().
+func (v *TreeView) EnableModelDragSource(startButtonMask gdk.ModifierType, targets []TargetEntry, actions gdk.DragAction) {
+	C.gtk_tree_view_enable_model_drag_source(v.native(), C.GdkModifierType(startButtonMask), (*C.GtkTargetEntry)(&targets[0]), C.gint(len(targets)), C.GdkDragAction(actions))
+}
+
+// UnsetRowsDragSource is a wrapper around gtk_tree_view_unset_rows_drag_source().
+func (v *TreeView) UnsetRowsDragSource() {
+	C.gtk_tree_view_unset_rows_drag_source(v.native())
+}
+
+// UnsetRowsDragDest is a wrapper around gtk_tree_view_unset_rows_drag_dest().
+func (v *TreeView) UnsetRowsDragDest() {
+	C.gtk_tree_view_unset_rows_drag_dest(v.native())
+}
+
+// SetDragDestRow is a wrapper around gtk_tree_view_set_drag_dest_row().
+func (v *TreeView) SetDragDestRow(path *TreePath, pos TreeViewDropPosition) {
+	C.gtk_tree_view_set_drag_dest_row(v.native(), path.native(), C.GtkTreeViewDropPosition(pos))
+}
+
+// GetDragDestRow is a wrapper around gtk_tree_view_get_drag_dest_row().
+func (v *TreeView) GetDragDestRow() (path *TreePath, pos TreeViewDropPosition) {
+	var (
+		cpath *C.GtkTreePath
+		cpos  C.GtkTreeViewDropPosition
+	)
+
+	C.gtk_tree_view_get_drag_dest_row(v.native(), &cpath, &cpos)
+
+	pos = TreeViewDropPosition(cpos)
+
+	if cpath != nil {
+		path = &TreePath{cpath}
+		runtime.SetFinalizer(path, (*TreePath).free)
+	}
+
+	return
+}
+
+// GetDestRowAtPos is a wrapper around gtk_tree_view_get_dest_row_at_pos().
+func (v *TreeView) GetDestRowAtPos(dragX, dragY int) (path *TreePath, pos TreeViewDropPosition, ok bool) {
+	var (
+		cpath *C.GtkTreePath
+		cpos  C.GtkTreeViewDropPosition
+	)
+
+	cbool := C.gtk_tree_view_get_dest_row_at_pos(v.native(), C.gint(dragX), C.gint(dragY), &cpath, &cpos)
+
+	ok = gobool(cbool)
+	pos = TreeViewDropPosition(cpos)
+
+	if cpath != nil {
+		path = &TreePath{cpath}
+		runtime.SetFinalizer(path, (*TreePath).free)
+	}
+
+	return
+}
diff --git a/vendor/github.com/gotk3/gotk3/gtk/tree_view_column.go b/vendor/github.com/gotk3/gotk3/gtk/tree_view_column.go
index 31f7471027b1..e489b727f3c9 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/tree_view_column.go
+++ b/vendor/github.com/gotk3/gotk3/gtk/tree_view_column.go
@@ -37,6 +37,10 @@ func marshalTreeViewColumn(p uintptr) (interface{}, error) {
 }
 
 func wrapTreeViewColumn(obj *glib.Object) *TreeViewColumn {
+	if obj == nil {
+		return nil
+	}
+
 	return &TreeViewColumn{glib.InitiallyUnowned{obj}}
 }
 
@@ -49,6 +53,15 @@ func TreeViewColumnNew() (*TreeViewColumn, error) {
 	return wrapTreeViewColumn(glib.Take(unsafe.Pointer(c))), nil
 }
 
+// TreeViewColumnNewWithArea is a wrapper around gtk_tree_view_column_new_with_area().
+func TreeViewColumnNewWithArea(area ICellArea) (*TreeViewColumn, error) {
+	c := C.gtk_tree_view_column_new_with_area(area.toCellArea())
+	if c == nil {
+		return nil, nilPtrErr
+	}
+	return wrapTreeViewColumn(glib.Take(unsafe.Pointer(c))), nil
+}
+
 // TreeViewColumnNewWithAttribute() is a wrapper around
 // gtk_tree_view_column_new_with_attributes() that only sets one
 // attribute for one column.
@@ -247,7 +260,6 @@ func (v *TreeViewColumn) GetXOffset() int {
 	return int(C.gtk_tree_view_column_get_x_offset(v.native()))
 }
 
-// GtkTreeViewColumn * 	gtk_tree_view_column_new_with_area ()
 // void 	gtk_tree_view_column_set_attributes ()
 // void 	gtk_tree_view_column_set_cell_data_func ()
 
@@ -275,23 +287,21 @@ func (v *TreeViewColumn) SetWidget(widget IWidget) {
 }
 
 // GetButton() is a wrapper around gtk_tree_view_column_get_button().
-func (v *TreeViewColumn) GetButton() (*Widget, error) {
+func (v *TreeViewColumn) GetButton() (IWidget, error) {
 	widget := C.gtk_tree_view_column_get_button(v.native())
 	if widget == nil {
 		return nil, nilPtrErr
 	}
-	obj := glib.Take(unsafe.Pointer(widget))
-	return wrapWidget(obj), nil
+	return castWidget(widget)
 }
 
 // GetWidget() is a wrapper around gtk_tree_view_column_get_widget().
-func (v *TreeViewColumn) GetWidget() (*Widget, error) {
+func (v *TreeViewColumn) GetWidget() (IWidget, error) {
 	widget := C.gtk_tree_view_column_get_widget(v.native())
 	if widget == nil {
-		return nil, nilPtrErr
+		return nil, nil
 	}
-	obj := glib.Take(unsafe.Pointer(widget))
-	return wrapWidget(obj), nil
+	return castWidget(widget)
 }
 
 // void 	gtk_tree_view_column_set_alignment ()
diff --git a/vendor/github.com/gotk3/gotk3/gtk/widget.go b/vendor/github.com/gotk3/gotk3/gtk/widget.go
index f07aa219047a..8842dc0fdd1c 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/widget.go
+++ b/vendor/github.com/gotk3/gotk3/gtk/widget.go
@@ -8,8 +8,10 @@ package gtk
 import "C"
 import (
 	"errors"
+	"runtime"
 	"unsafe"
 
+	"github.com/gotk3/gotk3/cairo"
 	"github.com/gotk3/gotk3/gdk"
 	"github.com/gotk3/gotk3/glib"
 )
@@ -18,6 +20,33 @@ import (
  * GtkWidget
  */
 
+func init() {
+	tm := []glib.TypeMarshaler{
+		// Enums
+		{glib.Type(C.gtk_size_request_mode_get_type()), marshalSizeRequestMode},
+
+		// Boxed
+		{glib.Type(C.gtk_requisition_get_type()), marshalRequisition},
+	}
+	glib.RegisterGValueMarshalers(tm)
+
+	WrapMap["GtkRequisition"] = wrapRequisition
+}
+
+// SizeRequestMode is a representation of GTK's GtkSizeRequestMode.
+type SizeRequestMode int
+
+const (
+	SIZE_REQUEST_HEIGHT_FOR_WIDTH SizeRequestMode = C.GTK_SIZE_REQUEST_HEIGHT_FOR_WIDTH
+	SIZE_REQUEST_WIDTH_FOR_HEIGHT SizeRequestMode = C.GTK_SIZE_REQUEST_WIDTH_FOR_HEIGHT
+	SIZE_REQUEST_CONSTANT_SIZE    SizeRequestMode = C.GTK_SIZE_REQUEST_CONSTANT_SIZE
+)
+
+func marshalSizeRequestMode(p uintptr) (interface{}, error) {
+	c := C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))
+	return SizeRequestMode(c), nil
+}
+
 // Widget is a representation of GTK's GtkWidget.
 type Widget struct {
 	glib.InitiallyUnowned
@@ -29,6 +58,7 @@ type Widget struct {
 // GtkWidget.
 type IWidget interface {
 	toWidget() *C.GtkWidget
+	ToWidget() *Widget
 	Set(string, interface{}) error
 }
 
@@ -60,6 +90,27 @@ func (v *Widget) toWidget() *C.GtkWidget {
 	return v.native()
 }
 
+// ToWidget is a helper getter, e.g.: it returns *gtk.Label as a *gtk.Widget.
+// In other cases, where you have a gtk.IWidget, use the type assertion.
+func (v *Widget) ToWidget() *Widget {
+	return v
+}
+
+// Cast changes the widget to an object of interface type IWidget.
+// This is only useful if you don't already have an object of type IWidget at hand (see example below).
+// This func is similar to gtk.Builder.GetObject():
+// The returned value needs to be type-asserted, before it can be used.
+//
+// Example:
+//   // you know that the parent is an object of type *gtk.ApplicationWindow,
+//   // or you want to check just in case
+//   parentWindow, _ := myWindow.GetTransientFor()
+//   intermediate, _ := parentWindow.Cast()
+//   appWindow, typeAssertSuccessful := intermediate.(*gtk.ApplicationWindow)
+func (v *Widget) Cast() (IWidget, error) {
+	return castWidget(v.native())
+}
+
 func marshalWidget(p uintptr) (interface{}, error) {
 	c := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
 	obj := glib.Take(unsafe.Pointer(c))
@@ -67,6 +118,10 @@ func marshalWidget(p uintptr) (interface{}, error) {
 }
 
 func wrapWidget(obj *glib.Object) *Widget {
+	if obj == nil {
+		return nil
+	}
+
 	return &Widget{glib.InitiallyUnowned{obj}}
 }
 
@@ -101,8 +156,12 @@ func (v *Widget) QueueDrawArea(x, y, w, h int) {
 	C.gtk_widget_queue_draw_area(v.native(), C.gint(x), C.gint(y), C.gint(w), C.gint(h))
 }
 
+// QueueDrawRegion is a wrapper aroung gtk_widget_queue_draw_region().
+func (v *Widget) QueueDrawRegion(region *cairo.Region) {
+	C.gtk_widget_queue_draw_region(v.native(), (*C.cairo_region_t)(unsafe.Pointer(region.Native())))
+}
+
 // TODO:
-// gtk_widget_queue_draw_region().
 // gtk_widget_set_redraw_on_allocate().
 // gtk_widget_mnemonic_activate().
 // gtk_widget_class_install_style_property().
@@ -120,7 +179,16 @@ func (v *Widget) QueueDrawArea(x, y, w, h int) {
 // gtk_widget_get_child_visible().
 // gtk_widget_get_settings().
 // gtk_widget_get_clipboard().
-// gtk_widget_get_display().
+
+// GetDisplay is a wrapper around gtk_widget_get_display().
+func (v *Widget) GetDisplay() (*gdk.Display, error) {
+	c := C.gtk_widget_get_display(v.native())
+	if c == nil {
+		return nil, nilPtrErr
+	}
+	s := &gdk.Display{glib.Take(unsafe.Pointer(c))}
+	return s, nil
+}
 
 // GetScreen is a wrapper around gtk_widget_get_screen().
 func (v *Widget) GetScreen() (*gdk.Screen, error) {
@@ -249,12 +317,64 @@ func (v *Widget) GetPreferredWidth() (int, int) {
 	return int(minimum), int(natural)
 }
 
+// GetPreferredHeightForWidth is a wrapper around gtk_widget_get_preferred_height_for_width().
+func (v *Widget) GetPreferredHeightForWidth(width int) (int, int) {
+
+	var minimum, natural C.gint
+
+	C.gtk_widget_get_preferred_height_for_width(
+		v.native(),
+		C.gint(width),
+		&minimum,
+		&natural)
+	return int(minimum), int(natural)
+}
+
+// GetPreferredWidthForHeight is a wrapper around gtk_widget_get_preferred_width_for_height().
+func (v *Widget) GetPreferredWidthForHeight(height int) (int, int) {
+
+	var minimum, natural C.gint
+
+	C.gtk_widget_get_preferred_width_for_height(
+		v.native(),
+		C.gint(height),
+		&minimum,
+		&natural)
+	return int(minimum), int(natural)
+}
+
+// GetRequestMode is a wrapper around gtk_widget_get_request_mode().
+func (v *Widget) GetRequestMode() SizeRequestMode {
+	return SizeRequestMode(C.gtk_widget_get_request_mode(v.native()))
+}
+
+// GetPreferredSize is a wrapper around gtk_widget_get_preferred_size().
+func (v *Widget) GetPreferredSize() (*Requisition, *Requisition) {
+
+	minimum_size := new(C.GtkRequisition)
+	natural_size := new(C.GtkRequisition)
+
+	C.gtk_widget_get_preferred_size(v.native(), minimum_size, natural_size)
+
+	minR, err := requisitionFromNative(minimum_size)
+	if err != nil {
+		minR = nil
+	}
+	natR, err := requisitionFromNative(natural_size)
+	if err != nil {
+		natR = nil
+	}
+
+	return minR, natR
+}
+
 // TODO:
-// gtk_widget_get_preferred_height_for_width().
-// gtk_widget_get_preferred_width_for_height().
-// gtk_widget_get_request_mode().
-// gtk_widget_get_preferred_size().
-// gtk_distribute_natural_allocation().
+/*
+gint
+gtk_distribute_natural_allocation (gint extra_space,
+                                   guint n_requested_sizes,
+                                   GtkRequestedSize *sizes);
+*/
 
 // GetHAlign is a wrapper around gtk_widget_get_halign().
 func (v *Widget) GetHAlign() Align {
@@ -392,7 +512,6 @@ func (v *Widget) Unmap() {
 //void gtk_widget_queue_resize(GtkWidget *widget);
 //void gtk_widget_queue_resize_no_redraw(GtkWidget *widget);
 // gtk_widget_queue_allocate().
-// gtk_widget_get_scale_factor().
 
 // Event() is a wrapper around gtk_widget_event().
 func (v *Widget) Event(event *gdk.Event) bool {
@@ -481,12 +600,12 @@ func (v *Widget) SetParent(parent IWidget) {
 }
 
 // GetParent is a wrapper around gtk_widget_get_parent().
-func (v *Widget) GetParent() (*Widget, error) {
+func (v *Widget) GetParent() (IWidget, error) {
 	c := C.gtk_widget_get_parent(v.native())
 	if c == nil {
-		return nil, nilPtrErr
+		return nil, nil
 	}
-	return wrapWidget(glib.Take(unsafe.Pointer(c))), nil
+	return castWidget(c)
 }
 
 // SetSizeRequest is a wrapper around gtk_widget_set_size_request().
@@ -619,12 +738,12 @@ func (v *Widget) GetDeviceEnabled(device *gdk.Device) bool {
 }
 
 // GetToplevel is a wrapper around gtk_widget_get_toplevel().
-func (v *Widget) GetToplevel() (*Widget, error) {
+func (v *Widget) GetToplevel() (IWidget, error) {
 	c := C.gtk_widget_get_toplevel(v.native())
 	if c == nil {
 		return nil, nilPtrErr
 	}
-	return wrapWidget(glib.Take(unsafe.Pointer(c))), nil
+	return castWidget(c)
 }
 
 // TODO:
@@ -747,10 +866,72 @@ func (v *Widget) GetWindow() (*gdk.Window, error) {
  * GtkRequisition
  */
 
-// TODO:
-// gtk_requisition_new().
-// gtk_requisition_copy().
-// gtk_requisition_free().
+// Requisition is a representation of GTK's GtkRequisition
+type Requisition struct {
+	requisition *C.GtkRequisition
+	Width,
+	Height int
+}
+
+func (v *Requisition) native() *C.GtkRequisition {
+	if v == nil {
+		return nil
+	}
+	v.requisition.width = C.int(v.Width)
+	v.requisition.height = C.int(v.Height)
+	return v.requisition
+}
+
+// Native returns a pointer to the underlying GtkRequisition.
+func (v *Requisition) Native() uintptr {
+	return uintptr(unsafe.Pointer(v.native()))
+}
+
+func marshalRequisition(p uintptr) (interface{}, error) {
+	c := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
+	requisition := (*C.GtkRequisition)(unsafe.Pointer(c))
+	return wrapRequisition(requisition), nil
+}
+
+func wrapRequisition(requisition *C.GtkRequisition) *Requisition {
+	if requisition == nil {
+		return nil
+	}
+	return &Requisition{requisition, int(requisition.width), int(requisition.height)}
+}
+
+// requisitionFromNative that handle finalizer.
+func requisitionFromNative(requisitionNative *C.GtkRequisition) (*Requisition, error) {
+	requisition := wrapRequisition(requisitionNative)
+	if requisition == nil {
+		return nil, nilPtrErr
+	}
+	runtime.SetFinalizer(requisition, (*Requisition).free)
+	return requisition, nil
+}
+
+// RequisitionNew is a wrapper around gtk_requisition_new().
+func RequisitionNew() (*Requisition, error) {
+	c := C.gtk_requisition_new()
+	if c == nil {
+		return nil, nilPtrErr
+	}
+	return requisitionFromNative(c)
+}
+
+// free is a wrapper around gtk_requisition_free().
+func (v *Requisition) free() {
+	C.gtk_requisition_free(v.native())
+}
+
+// Copy is a wrapper around gtk_requisition_copy().
+func (v *Requisition) Copy() (*Requisition, error) {
+	c := C.gtk_requisition_copy(v.native())
+	if c == nil {
+		return nil, nilPtrErr
+	}
+	return requisitionFromNative(c)
+}
 
 /*
  * GtkAllocation
diff --git a/vendor/github.com/gotk3/gotk3/gtk/widget_export_since_3_8.go b/vendor/github.com/gotk3/gotk3/gtk/widget_export_since_3_8.go
index 3e8ccdc5124c..63ba965e8c04 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/widget_export_since_3_8.go
+++ b/vendor/github.com/gotk3/gotk3/gtk/widget_export_since_3_8.go
@@ -10,19 +10,14 @@ import (
 
 	"github.com/gotk3/gotk3/gdk"
 	"github.com/gotk3/gotk3/glib"
+	"github.com/gotk3/gotk3/internal/callback"
 )
 
 //export goTickCallbacks
-func goTickCallbacks (widget *C.GtkWidget, frameClock *C.GdkFrameClock, userData C.gpointer) C.gboolean {
-	id := int(uintptr(userData))
-
-	tickCallbackRegistry.Lock()
-	r := tickCallbackRegistry.m[id]
-	tickCallbackRegistry.Unlock()
-
-	return gbool(r.fn(
-		wrapWidget(glib.Take(unsafe.Pointer(widget))), 
+func goTickCallbacks(widget *C.GtkWidget, frameClock *C.GdkFrameClock, userData C.gpointer) C.gboolean {
+	fn := callback.Get(uintptr(userData)).(TickCallback)
+	return gbool(fn(
+		wrapWidget(glib.Take(unsafe.Pointer(widget))),
 		gdk.WrapFrameClock(unsafe.Pointer(frameClock)),
-		r.userData,
 	))
 }
diff --git a/vendor/github.com/gotk3/gotk3/gtk/widget_since_3_10.go b/vendor/github.com/gotk3/gotk3/gtk/widget_since_3_10.go
index 5d2c666d1bf2..6d6a1c890583 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/widget_since_3_10.go
+++ b/vendor/github.com/gotk3/gotk3/gtk/widget_since_3_10.go
@@ -5,8 +5,25 @@ package gtk
 // #include <gtk/gtk.h>
 import "C"
 
+// GetPreferredHeightAndBaselineForWidth is a wrapper around gtk_widget_get_preferred_height_and_baseline_for_width().
+func (v *Widget) GetPreferredHeightAndBaselineForWidth(height int) (int, int, int, int) {
+
+	var minimum, natural, minimum_baseline, natural_baseline C.gint
+
+	C.gtk_widget_get_preferred_height_and_baseline_for_width(
+		v.native(),
+		C.gint(height),
+		&minimum,
+		&natural,
+		&minimum_baseline,
+		&natural_baseline)
+	return int(minimum),
+		int(natural),
+		int(minimum_baseline),
+		int(natural_baseline)
+}
+
 // TODO:
-// gtk_widget_get_preferred_height_and_baseline_for_width().
 // gtk_widget_get_valign_with_baseline().
 // gtk_widget_init_template().
 // gtk_widget_class_set_template().
@@ -20,3 +37,8 @@ import "C"
 // gtk_widget_class_bind_template_callback().
 // gtk_widget_class_bind_template_callback_full().
 // gtk_widget_class_set_connect_func().
+
+// GetScaleFactor is a wrapper around gtk_widget_get_scale_factor().
+func (v *Widget) GetScaleFactor() int {
+	return int(C.gtk_widget_get_scale_factor(v.native()))
+}
diff --git a/vendor/github.com/gotk3/gotk3/gtk/widget_since_3_8.go b/vendor/github.com/gotk3/gotk3/gtk/widget_since_3_8.go
index b9023c90ccf4..34db3077da6b 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/widget_since_3_8.go
+++ b/vendor/github.com/gotk3/gotk3/gtk/widget_since_3_8.go
@@ -27,12 +27,20 @@ package gtk
 // #include "widget_since_3_8.go.h"
 import "C"
 
-import ( 
+import (
 	"unsafe"
 
 	"github.com/gotk3/gotk3/gdk"
+	"github.com/gotk3/gotk3/internal/callback"
 )
 
+/*
+ * GtkTickCallback
+ */
+
+// TickCallback is a representation of GtkTickCallback
+type TickCallback func(widget *Widget, frameClock *gdk.FrameClock) bool
+
 /*
  * GtkWidget
  */
@@ -61,19 +69,12 @@ func (v *Widget) GetFrameClock() *gdk.FrameClock {
 }
 
 // AddTickCallback is a wrapper around gtk_widget_add_tick_callback().
-func (v *Widget) AddTickCallback(fn TickCallback, userData uintptr) int {
-	tickCallbackRegistry.Lock()
-	id := tickCallbackRegistry.next
-	tickCallbackRegistry.next++
-	tickCallbackRegistry.m[id] = tickCallbackData{fn: fn, userData: userData}
-	tickCallbackRegistry.Unlock()
-
-	return int(C._gtk_widget_add_tick_callback(v.native(), C.gpointer(uintptr(id))))
+func (v *Widget) AddTickCallback(fn TickCallback) int {
+	return int(C._gtk_widget_add_tick_callback(v.native(), C.gpointer(callback.Assign(fn))))
 }
 
 // RemoveTickCallback is a wrapper around gtk_widget_remove_tick_callback().
 func (v *Widget) RemoveTickCallback(id int) {
-	// TODO: remove callback from tickCallbackRegistry
 	C.gtk_widget_remove_tick_callback(v.native(), C.guint(id))
 }
 
diff --git a/vendor/github.com/gotk3/gotk3/gtk/widget_since_3_8.go.h b/vendor/github.com/gotk3/gotk3/gtk/widget_since_3_8.go.h
index a6af5aed67ae..f9627f44df9f 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/widget_since_3_8.go.h
+++ b/vendor/github.com/gotk3/gotk3/gtk/widget_since_3_8.go.h
@@ -16,10 +16,15 @@
  * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
  */
 
+#include "gtk.go.h" // for gotk3_callbackDelete
 #include <stdlib.h>
 
-extern gboolean goTickCallbacks (GtkWidget *widget, GdkFrameClock *frame_clock, gpointer user_data);
+extern gboolean goTickCallbacks(GtkWidget *widget, GdkFrameClock *frame_clock,
+                                gpointer user_data);
 
-static inline guint _gtk_widget_add_tick_callback(GtkWidget *widget, gpointer user_data) {
-    return gtk_widget_add_tick_callback(widget, (GtkTickCallback)(goTickCallbacks), user_data, NULL);
-}
\ No newline at end of file
+static inline guint _gtk_widget_add_tick_callback(GtkWidget *widget,
+                                                  gpointer user_data) {
+  return gtk_widget_add_tick_callback(
+      widget, (GtkTickCallback)(goTickCallbacks), user_data,
+      (GDestroyNotify)(gotk3_callbackDelete));
+}
diff --git a/vendor/github.com/gotk3/gotk3/gtk/window.go b/vendor/github.com/gotk3/gotk3/gtk/window.go
index 7e76a7f1aa08..7e56e398f2d2 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/window.go
+++ b/vendor/github.com/gotk3/gotk3/gtk/window.go
@@ -30,6 +30,7 @@ type Window struct {
 // functions that wrap around a C GTK function taking a GtkWindow.
 type IWindow interface {
 	toWindow() *C.GtkWindow
+	ToWindow() *Window
 }
 
 // native returns a pointer to the underlying GtkWindow.
@@ -48,6 +49,12 @@ func (v *Window) toWindow() *C.GtkWindow {
 	return v.native()
 }
 
+// ToWindow is a helper getter, e.g.: it returns *gtk.ApplicationWindow as a *gtk.Window.
+// In other cases, where you have a gtk.IWindow, use the type assertion.
+func (v *Window) ToWindow() *Window {
+	return v
+}
+
 func marshalWindow(p uintptr) (interface{}, error) {
 	c := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
 	obj := glib.Take(unsafe.Pointer(c))
@@ -55,6 +62,10 @@ func marshalWindow(p uintptr) (interface{}, error) {
 }
 
 func wrapWindow(obj *glib.Object) *Window {
+	if obj == nil {
+		return nil
+	}
+
 	return &Window{Bin{Container{Widget{glib.InitiallyUnowned{obj}}}}}
 }
 
@@ -188,13 +199,12 @@ func (v *Window) HasToplevelFocus() bool {
 }
 
 // GetFocus is a wrapper around gtk_window_get_focus().
-// TODO: Use IWidget here
-func (v *Window) GetFocus() (*Widget, error) {
+func (v *Window) GetFocus() (IWidget, error) {
 	c := C.gtk_window_get_focus(v.native())
 	if c == nil {
-		return nil, nilPtrErr
+		return nil, nil
 	}
-	return wrapWidget(glib.Take(unsafe.Pointer(c))), nil
+	return castWidget(c)
 }
 
 // SetFocus is a wrapper around gtk_window_set_focus().
@@ -204,14 +214,12 @@ func (v *Window) SetFocus(w *Widget) {
 
 // GetDefaultWidget is a wrapper around gtk_window_get_default_widget().
 // See SetDefault() for the setter.
-// TODO: Use IWidget here
-func (v *Window) GetDefaultWidget() *Widget {
+func (v *Window) GetDefaultWidget() (IWidget, error) {
 	c := C.gtk_window_get_default_widget(v.native())
 	if c == nil {
-		return nil
+		return nil, nil
 	}
-	obj := glib.Take(unsafe.Pointer(c))
-	return wrapWidget(obj)
+	return castWidget(c)
 }
 
 // SetDefault is a wrapper around gtk_window_set_default().
@@ -376,11 +384,9 @@ func (v *Window) GetHideTitlebarWhenMaximized() bool {
 func (v *Window) GetIcon() (*gdk.Pixbuf, error) {
 	c := C.gtk_window_get_icon(v.native())
 	if c == nil {
-		return nil, nilPtrErr
+		return nil, nil
 	}
-
-	p := &gdk.Pixbuf{glib.Take(unsafe.Pointer(c))}
-	return p, nil
+	return &gdk.Pixbuf{glib.Take(unsafe.Pointer(c))}, nil
 }
 
 // GetIconName is a wrapper around gtk_window_get_icon_name().
@@ -429,19 +435,18 @@ func (v *Window) GetTitle() (string, error) {
 func (v *Window) GetTransientFor() (*Window, error) {
 	c := C.gtk_window_get_transient_for(v.native())
 	if c == nil {
-		return nil, nilPtrErr
+		return nil, nil
 	}
 	return wrapWindow(glib.Take(unsafe.Pointer(c))), nil
 }
 
 // GetAttachedTo is a wrapper around gtk_window_get_attached_to().
-// TODO: Use IWidget here
-func (v *Window) GetAttachedTo() (*Widget, error) {
+func (v *Window) GetAttachedTo() (IWidget, error) {
 	c := C.gtk_window_get_attached_to(v.native())
 	if c == nil {
-		return nil, nilPtrErr
+		return nil, nil
 	}
-	return wrapWidget(glib.Take(unsafe.Pointer(c))), nil
+	return castWidget(c)
 }
 
 // GetTypeHint is a wrapper around gtk_window_get_type_hint().
@@ -576,9 +581,8 @@ func (v *Window) SetFocusVisible(setting bool) {
 func (v *Window) GetApplication() (*Application, error) {
 	c := C.gtk_window_get_application(v.native())
 	if c == nil {
-		return nil, nilPtrErr
+		return nil, nil
 	}
-
 	return wrapApplication(glib.Take(unsafe.Pointer(c))), nil
 }
 
@@ -641,43 +645,52 @@ func (v *Window) PropagateKeyEvent(event *gdk.EventKey) bool {
 // Returned list is wrapped to return *gtk.Window elements.
 // TODO: Use IWindow and wrap to correct type
 func WindowListToplevels() *glib.List {
-	glist := C.gtk_window_list_toplevels()
-	list := glib.WrapList(uintptr(unsafe.Pointer(glist)))
-	list.DataWrapper(func(ptr unsafe.Pointer) interface{} {
+	clist := C.gtk_window_list_toplevels()
+	if clist == nil {
+		return nil
+	}
+	glist := glib.WrapList(uintptr(unsafe.Pointer(clist)))
+	glist.DataWrapper(func(ptr unsafe.Pointer) interface{} {
 		return wrapWindow(glib.Take(ptr))
 	})
-	runtime.SetFinalizer(list, func(l *glib.List) {
+	runtime.SetFinalizer(glist, func(l *glib.List) {
 		l.Free()
 	})
-	return list
+	return glist
 }
 
 // WindowGetDefaultIconList is a wrapper around gtk_window_get_default_icon_list().
 // Returned list is wrapped to return *gdk.Pixbuf elements.
 func WindowGetDefaultIconList() *glib.List {
-	glist := C.gtk_window_get_default_icon_list()
-	list := glib.WrapList(uintptr(unsafe.Pointer(glist)))
-	list.DataWrapper(func(ptr unsafe.Pointer) interface{} {
+	clist := C.gtk_window_get_default_icon_list()
+	if clist == nil {
+		return nil
+	}
+	glist := glib.WrapList(uintptr(unsafe.Pointer(clist)))
+	glist.DataWrapper(func(ptr unsafe.Pointer) interface{} {
 		return &gdk.Pixbuf{glib.Take(ptr)}
 	})
-	runtime.SetFinalizer(list, func(l *glib.List) {
+	runtime.SetFinalizer(glist, func(l *glib.List) {
 		l.Free()
 	})
-	return list
+	return glist
 }
 
 // GetIconList is a wrapper around gtk_window_get_icon_list().
 // Returned list is wrapped to return *gdk.Pixbuf elements.
 func (v *Window) GetIconList() *glib.List {
-	glist := C.gtk_window_get_icon_list(v.native())
-	list := glib.WrapList(uintptr(unsafe.Pointer(glist)))
-	list.DataWrapper(func(ptr unsafe.Pointer) interface{} {
+	clist := C.gtk_window_get_icon_list(v.native())
+	if clist == nil {
+		return nil
+	}
+	glist := glib.WrapList(uintptr(unsafe.Pointer(clist)))
+	glist.DataWrapper(func(ptr unsafe.Pointer) interface{} {
 		return &gdk.Pixbuf{glib.Take(ptr)}
 	})
-	runtime.SetFinalizer(list, func(l *glib.List) {
+	runtime.SetFinalizer(glist, func(l *glib.List) {
 		l.Free()
 	})
-	return list
+	return glist
 }
 
 // WindowSetDefaultIconList is a wrapper around gtk_window_set_default_icon_list().
@@ -695,12 +708,12 @@ func (v *Window) SetIconList(list *glib.List) {
 }
 
 // BeginResizeDrag is a wrapper around gtk_window_begin_resize_drag().
-func (v *Window) BeginResizeDrag(edge gdk.WindowEdge, button, rootX, rootY int, timestamp uint32) {
+func (v *Window) BeginResizeDrag(edge gdk.WindowEdge, button gdk.Button, rootX, rootY int, timestamp uint32) {
 	C.gtk_window_begin_resize_drag(v.native(), C.GdkWindowEdge(edge), C.gint(button), C.gint(rootX), C.gint(rootY), C.guint32(timestamp))
 }
 
 // BeginMoveDrag is a wrapper around gtk_window_begin_move_drag().
-func (v *Window) BeginMoveDrag(button, rootX, rootY int, timestamp uint32) {
+func (v *Window) BeginMoveDrag(button gdk.Button, rootX, rootY int, timestamp uint32) {
 	C.gtk_window_begin_move_drag(v.native(), C.gint(button), C.gint(rootX), C.gint(rootY), C.guint32(timestamp))
 }
 
diff --git a/vendor/github.com/gotk3/gotk3/gtk/window_since_3_16.go b/vendor/github.com/gotk3/gotk3/gtk/window_since_3_16.go
index 3f6a1fc080e0..d19494df963b 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/window_since_3_16.go
+++ b/vendor/github.com/gotk3/gotk3/gtk/window_since_3_16.go
@@ -6,19 +6,12 @@ package gtk
 
 // #include <gtk/gtk.h>
 import "C"
-import (
-	"unsafe"
-
-	"github.com/gotk3/gotk3/glib"
-)
 
 // GetTitlebar is a wrapper around gtk_window_get_titlebar().
-// TODO: Use IWidget here
-func (v *Window) GetTitlebar() *Widget {
+func (v *Window) GetTitlebar() (IWidget, error) {
 	c := C.gtk_window_get_titlebar(v.native())
 	if c == nil {
-		return nil
+		return nil, nil
 	}
-	obj := glib.Take(unsafe.Pointer(c))
-	return wrapWidget(obj)
+	return castWidget(c)
 }
diff --git a/vendor/github.com/gotk3/gotk3/gtk/window_since_3_18.go b/vendor/github.com/gotk3/gotk3/gtk/window_since_3_18.go
index 6b0352235c52..343b42e3d072 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/window_since_3_18.go
+++ b/vendor/github.com/gotk3/gotk3/gtk/window_since_3_18.go
@@ -16,4 +16,4 @@ import (
 // FullscreenOnMonitor is a wrapper around gtk_window_fullscreen_on_monitor().
 func (v *Window) FullscreenOnMonitor(screen *gdk.Screen, monitor int) {
 	C.gtk_window_fullscreen_on_monitor(v.native(), C.toGdkScreen(unsafe.Pointer(screen.Native())), C.gint(monitor))
-}
\ No newline at end of file
+}
diff --git a/vendor/github.com/gotk3/gotk3/gtk/windowgroup.go b/vendor/github.com/gotk3/gotk3/gtk/windowgroup.go
index abfd18efad67..1f60b9c516f3 100644
--- a/vendor/github.com/gotk3/gotk3/gtk/windowgroup.go
+++ b/vendor/github.com/gotk3/gotk3/gtk/windowgroup.go
@@ -37,6 +37,10 @@ func marshalWindowGroup(p uintptr) (interface{}, error) {
 }
 
 func wrapWindowGroup(obj *glib.Object) *WindowGroup {
+	if obj == nil {
+		return nil
+	}
+
 	return &WindowGroup{obj}
 }
 
@@ -71,15 +75,18 @@ func (v *WindowGroup) RemoveWindow(window IWindow) {
 // Returned list is wrapped to return *gtk.Window elements.
 // TODO: Use IWindow and wrap to correct type
 func (v *WindowGroup) ListWindows() *glib.List {
-	glist := C.gtk_window_group_list_windows(v.native())
-	list := glib.WrapList(uintptr(unsafe.Pointer(glist)))
-	list.DataWrapper(func(ptr unsafe.Pointer) interface{} {
+	clist := C.gtk_window_group_list_windows(v.native())
+	if clist == nil {
+		return nil
+	}
+	glist := glib.WrapList(uintptr(unsafe.Pointer(clist)))
+	glist.DataWrapper(func(ptr unsafe.Pointer) interface{} {
 		return wrapWindow(glib.Take(ptr))
 	})
-	runtime.SetFinalizer(list, func(l *glib.List) {
+	runtime.SetFinalizer(glist, func(l *glib.List) {
 		l.Free()
 	})
-	return list
+	return glist
 }
 
 // GetCurrentGrab is a wrapper around gtk_window_group_get_current_grab().
diff --git a/vendor/github.com/gotk3/gotk3/internal/callback/callback.go b/vendor/github.com/gotk3/gotk3/internal/callback/callback.go
new file mode 100644
index 000000000000..47142aaac288
--- /dev/null
+++ b/vendor/github.com/gotk3/gotk3/internal/callback/callback.go
@@ -0,0 +1,37 @@
+package callback
+
+import (
+	"sync"
+
+	"github.com/gotk3/gotk3/internal/slab"
+)
+
+var (
+	mutex    sync.RWMutex
+	registry slab.Slab
+)
+
+func Assign(callback interface{}) uintptr {
+	mutex.Lock()
+	defer mutex.Unlock()
+
+	return registry.Put(callback)
+}
+
+func Get(ptr uintptr) interface{} {
+	mutex.RLock()
+	defer mutex.RUnlock()
+
+	return registry.Get(ptr)
+}
+
+func Delete(ptr uintptr) {
+	GetAndDelete(ptr)
+}
+
+func GetAndDelete(ptr uintptr) interface{} {
+	mutex.Lock()
+	defer mutex.Unlock()
+
+	return registry.Pop(ptr)
+}
diff --git a/vendor/github.com/gotk3/gotk3/internal/closure/closure.go b/vendor/github.com/gotk3/gotk3/internal/closure/closure.go
new file mode 100644
index 000000000000..d06c907cd33a
--- /dev/null
+++ b/vendor/github.com/gotk3/gotk3/internal/closure/closure.go
@@ -0,0 +1,79 @@
+package closure
+
+import (
+	"sync"
+	"unsafe"
+)
+
+var (
+	closures = sync.Map{} // unsafe.Pointer(*GClosure) -> reflect.Value
+
+	// use a bi-directional map to allow lookup of the closure value from both
+	// the SourceHandle and the closure ID in constant time.
+	signalMu       sync.Mutex
+	signalClosures = map[uint]unsafe.Pointer{} // uint(SourceHandle) -> uintptr (closure key, callbackID)
+	closureSignals = map[unsafe.Pointer]uint{} // unsafe.Pointer(*GClosure) -> uint(SourceHandle)
+)
+
+// RegisterSignal registers the given signal handle to be associated with the
+// closure pointer. This association allows the closure to be removed as well
+// when the signal removal is requested from the user using DisconnectSignal.
+func RegisterSignal(handle uint, closure unsafe.Pointer) {
+	// Safety check omitted until the race condition in glib/connect.go is
+	// fixed. Check that file for more info.
+
+	signalMu.Lock()
+	defer signalMu.Unlock()
+
+	signalClosures[handle] = closure
+	closureSignals[closure] = handle
+}
+
+// DisconnectSignal removes both the signal and the closure associated with it
+// from the internal registry. Since this function will also remove the closure
+// itself from the internal registry, Gtk's disconnect functions should be
+// called first.
+func DisconnectSignal(handle uint) {
+	signalMu.Lock()
+	defer signalMu.Unlock()
+
+	closure, ok := signalClosures[handle]
+	if ok {
+		closures.Delete(closure)
+		delete(closureSignals, closure)
+		delete(signalClosures, handle)
+	}
+}
+
+// Assign assigns the given FuncStack to the given closure.
+func Assign(closure unsafe.Pointer, fs FuncStack) {
+	closures.Store(closure, fs)
+}
+
+// Get gets the reflect-value callback from the closure pointer.
+func Get(closure unsafe.Pointer) FuncStack {
+	v, ok := closures.Load(closure)
+	if ok {
+		return v.(FuncStack)
+	}
+	return zeroFuncStack
+}
+
+// Delete deletes the closure pointer from the registry while also checking for
+// any existing signal handler associated with the given callback ID. If a
+// signal handler is found, then its behavior is similar to DisconnectSignal.
+func Delete(closure unsafe.Pointer) {
+	funcStack := getAndDeleteClosure(closure)
+	if !funcStack.IsValid() {
+		return
+	}
+
+	signalMu.Lock()
+	defer signalMu.Unlock()
+
+	handle, ok := closureSignals[closure]
+	if ok {
+		delete(closureSignals, closure)
+		delete(signalClosures, handle)
+	}
+}
diff --git a/vendor/github.com/gotk3/gotk3/internal/closure/closure_go_1_14.go b/vendor/github.com/gotk3/gotk3/internal/closure/closure_go_1_14.go
new file mode 100644
index 000000000000..df857559bf1f
--- /dev/null
+++ b/vendor/github.com/gotk3/gotk3/internal/closure/closure_go_1_14.go
@@ -0,0 +1,14 @@
+// +build !go1.15
+
+package closure
+
+import "unsafe"
+
+func getAndDeleteClosure(closure unsafe.Pointer) FuncStack {
+	v, ok := closures.Load(closure)
+	if ok {
+		closures.Delete(closure)
+		return v.(FuncStack)
+	}
+	return zeroFuncStack
+}
diff --git a/vendor/github.com/gotk3/gotk3/internal/closure/closure_go_1_15.go b/vendor/github.com/gotk3/gotk3/internal/closure/closure_go_1_15.go
new file mode 100644
index 000000000000..b862314d8750
--- /dev/null
+++ b/vendor/github.com/gotk3/gotk3/internal/closure/closure_go_1_15.go
@@ -0,0 +1,13 @@
+// +build go1.15
+
+package closure
+
+import "unsafe"
+
+func getAndDeleteClosure(closure unsafe.Pointer) FuncStack {
+	v, ok := closures.LoadAndDelete(closure)
+	if ok {
+		return v.(FuncStack)
+	}
+	return zeroFuncStack
+}
diff --git a/vendor/github.com/gotk3/gotk3/internal/closure/funcstack.go b/vendor/github.com/gotk3/gotk3/internal/closure/funcstack.go
new file mode 100644
index 000000000000..4436cce0c9ea
--- /dev/null
+++ b/vendor/github.com/gotk3/gotk3/internal/closure/funcstack.go
@@ -0,0 +1,135 @@
+package closure
+
+import (
+	"fmt"
+	"reflect"
+	"runtime"
+	"strconv"
+	"strings"
+	"sync"
+)
+
+// FrameSize is the number of frames that FuncStack should trace back from.
+const FrameSize = 3
+
+// FuncStack wraps a function value and provides function frames containing the
+// caller trace for debugging.
+type FuncStack struct {
+	Func   reflect.Value
+	Frames []uintptr
+}
+
+var zeroFuncStack = FuncStack{}
+
+// NewFuncStack creates a new FuncStack. It panics if fn is not a function. The
+// given frameSkip is added 2, meaning the first frame from 0 will start from
+// the caller of NewFuncStack.
+func NewFuncStack(fn interface{}, frameSkip int) FuncStack {
+	// Create a reflect.Value from f.  This is called when the returned
+	// GClosure runs.
+	rf := reflect.ValueOf(fn)
+
+	// Closures can only be created from funcs.
+	if rf.Type().Kind() != reflect.Func {
+		panic("closure value is not a func")
+	}
+
+	frames := make([]uintptr, FrameSize)
+	frames = frames[:runtime.Callers(frameSkip+2, frames)]
+
+	return FuncStack{
+		Func:   rf,
+		Frames: frames,
+	}
+}
+
+var (
+	idleTypeCache    sync.Map
+	idleTypeSentinel = struct{}{}
+)
+
+// NewIdleFuncStack works akin to NewFuncStack, but it also validates the given
+// function type for the correct acceptable signatures for SourceFunc while also
+// caching the checks.
+func NewIdleFuncStack(fn interface{}, frameSkip int) FuncStack {
+	fs := NewFuncStack(fn, frameSkip+1)
+	funcType := fs.Func.Type()
+
+	// LoadOrStore will actually ensure that only 1 check is done at a time, but
+	// future checks on failed functions may trigger a late panic.
+	_, checked := idleTypeCache.LoadOrStore(funcType, idleTypeSentinel)
+	if checked {
+		return fs
+	}
+
+	// Ensure no parameters prematurely.
+	if funcType.NumIn() > 0 {
+		fs.Panicf("timeout source should have no parameters")
+	}
+
+	// Ensure proper return types.
+	switch out := funcType.NumOut(); out {
+	case 0:
+		break
+	case 1:
+		out0 := funcType.Out(0)
+		if out0.Kind() != reflect.Bool {
+			fs.Panicf("expected bool in return type, got %v", out0.Kind())
+		}
+	default:
+		fs.Panicf("unexpected return count (expecting 0 or 1): %d", out)
+	}
+
+	return fs
+}
+
+// IsValid returns true if the given FuncStack is not a zero-value i.e.  valid.
+func (fs FuncStack) IsValid() bool {
+	return fs.Frames != nil
+}
+
+const headerSignature = "closure error: "
+
+// Panicf panics with the given FuncStack printed to standard error.
+func (fs FuncStack) Panicf(msgf string, v ...interface{}) {
+	msg := strings.Builder{}
+	msg.WriteString(headerSignature)
+	fmt.Fprintf(&msg, msgf, v...)
+
+	msg.WriteString("\n\nClosure added at:")
+
+	frames := runtime.CallersFrames(fs.Frames)
+	for {
+		frame, more := frames.Next()
+		msg.WriteString("\n\t")
+		msg.WriteString(frame.Function)
+		msg.WriteString(" at ")
+		msg.WriteString(frame.File)
+		msg.WriteByte(':')
+		msg.WriteString(strconv.Itoa(frame.Line))
+
+		if !more {
+			break
+		}
+	}
+
+	panic(msg.String())
+}
+
+// TryRepanic attempts to recover a panic. If successful, it will re-panic with
+// the trace, or none if there is already one.
+func (fs FuncStack) TryRepanic() {
+	panicking := recover()
+	if panicking == nil {
+		return
+	}
+
+	if msg, ok := panicking.(string); ok {
+		if strings.HasPrefix(msg, headerSignature) {
+			// We can just repanic as-is.
+			panic(msg)
+		}
+	}
+
+	fs.Panicf("unexpected panic caught: %v", panicking)
+}
diff --git a/vendor/github.com/gotk3/gotk3/internal/slab/slab.go b/vendor/github.com/gotk3/gotk3/internal/slab/slab.go
new file mode 100644
index 000000000000..d7d99e082a2b
--- /dev/null
+++ b/vendor/github.com/gotk3/gotk3/internal/slab/slab.go
@@ -0,0 +1,52 @@
+package slab
+
+type slabEntry struct {
+	Value interface{}
+	Index uintptr
+}
+
+func (entry slabEntry) IsValid() bool {
+	return entry.Value != nil
+}
+
+// Slab is an implementation of the internal registry free list. A zero-value
+// instance is a valid instance. This data structure is not thread-safe.
+type Slab struct {
+	entries []slabEntry
+	free    uintptr
+}
+
+func (s *Slab) Put(entry interface{}) uintptr {
+	if s.free == uintptr(len(s.entries)) {
+		index := uintptr(len(s.entries))
+		s.entries = append(s.entries, slabEntry{entry, 0})
+		s.free++
+		return index
+	}
+
+	index := s.free
+
+	s.free = s.entries[index].Index
+	s.entries[index] = slabEntry{entry, 0}
+
+	return index
+}
+
+func (s *Slab) Get(i uintptr) interface{} {
+	// Perform bound check.
+	if i >= uintptr(len(s.entries)) {
+		return nil
+	}
+	// Perform validity check in case of invalid ID.
+	if entry := s.entries[i]; entry.IsValid() {
+		return entry.Value
+	}
+	return nil
+}
+
+func (s *Slab) Pop(i uintptr) interface{} {
+	popped := s.entries[i].Value
+	s.entries[i] = slabEntry{nil, s.free}
+	s.free = i
+	return popped
+}
diff --git a/vendor/github.com/gotk3/gotk3/pango/fontconfig.go.h b/vendor/github.com/gotk3/gotk3/pango/fontconfig.go.h
index 1cde022f02d3..5d0787324573 100644
--- a/vendor/github.com/gotk3/gotk3/pango/fontconfig.go.h
+++ b/vendor/github.com/gotk3/gotk3/pango/fontconfig.go.h
@@ -1,7 +1,7 @@
 
 #include <fontconfig/fontconfig.h>
 
-static int addFont(unsigned char* font) {
-    FcBool fontAddStatus = FcConfigAppFontAddFile(FcConfigGetCurrent(), font);
-    return fontAddStatus;
+static int addFont(unsigned char *font) {
+  FcBool fontAddStatus = FcConfigAppFontAddFile(FcConfigGetCurrent(), font);
+  return fontAddStatus;
 }
\ No newline at end of file
diff --git a/vendor/github.com/gotk3/gotk3/pango/pango-attributes.go b/vendor/github.com/gotk3/gotk3/pango/pango-attributes.go
index 464b5958777e..75ac4bbe99b1 100644
--- a/vendor/github.com/gotk3/gotk3/pango/pango-attributes.go
+++ b/vendor/github.com/gotk3/gotk3/pango/pango-attributes.go
@@ -105,6 +105,17 @@ func (v *AttrList) native() *C.PangoAttrList {
 	return (*C.PangoAttrList)(unsafe.Pointer(v.pangoAttrList))
 }
 
+func (v *AttrList) Insert(attribute *Attribute) {
+	C.pango_attr_list_insert(v.pangoAttrList, attribute.native())
+}
+
+func AttrListNew() *AttrList {
+	c := C.pango_attr_list_new()
+	attrList := new(AttrList)
+	attrList.pangoAttrList = c
+	return attrList
+}
+
 // AttrType is a representation of Pango's PangoAttrType.
 type AttrType int
 
diff --git a/vendor/github.com/gotk3/gotk3/pango/pango-attributes.go.h b/vendor/github.com/gotk3/gotk3/pango/pango-attributes.go.h
index d1b2e23bc343..5f77732c57fb 100644
--- a/vendor/github.com/gotk3/gotk3/pango/pango-attributes.go.h
+++ b/vendor/github.com/gotk3/gotk3/pango/pango-attributes.go.h
@@ -20,8 +20,4 @@
 #include <stdlib.h>
 #include <string.h>
 
-static PangoColor* toPangoColor(void *p)
-{
-	return ( (PangoColor*) (p) );
-}
-
+static PangoColor *toPangoColor(void *p) { return ((PangoColor *)(p)); }
diff --git a/vendor/github.com/gotk3/gotk3/pango/pango-attributes_since_1_44.go b/vendor/github.com/gotk3/gotk3/pango/pango-attributes_since_1_44.go
new file mode 100644
index 000000000000..3dd44f0adde8
--- /dev/null
+++ b/vendor/github.com/gotk3/gotk3/pango/pango-attributes_since_1_44.go
@@ -0,0 +1,18 @@
+// +build !pango_1_42
+
+package pango
+
+// #include <pango/pango.h>
+// #include "pango.go.h"
+import "C"
+
+var (
+	ATTR_INSERT_HYPHENS AttrType = C.PANGO_ATTR_INSERT_HYPHENS
+)
+
+func AttrInsertHyphensNew(insertHyphens bool) *Attribute {
+	c := C.pango_attr_insert_hyphens_new(gbool(insertHyphens))
+	attr := new(Attribute)
+	attr.pangoAttribute = c
+	return attr
+}
diff --git a/vendor/github.com/gotk3/gotk3/pango/pango-font.go b/vendor/github.com/gotk3/gotk3/pango/pango-font.go
index 44ff1bac62a2..dd3640e6bc1b 100644
--- a/vendor/github.com/gotk3/gotk3/pango/pango-font.go
+++ b/vendor/github.com/gotk3/gotk3/pango/pango-font.go
@@ -246,7 +246,15 @@ func (v *FontDescription) GetStyle() Style {
 
 //void                 pango_font_description_set_variant       (PangoFontDescription *desc,
 //							       PangoVariant          variant);
+func (v *FontDescription) SetVariant(variant Variant) {
+	C.pango_font_description_set_variant(v.native(), (C.PangoVariant)(variant))
+}
+
 //PangoVariant         pango_font_description_get_variant       (const PangoFontDescription *desc) G_GNUC_PURE;
+func (v *FontDescription) GetVariant() Variant {
+	c := C.pango_font_description_get_variant(v.native())
+	return Variant(c)
+}
 
 //void                 pango_font_description_set_weight        (PangoFontDescription *desc,
 //							       PangoWeight           weight);
diff --git a/vendor/github.com/gotk3/gotk3/pango/pango-layout.go b/vendor/github.com/gotk3/gotk3/pango/pango-layout.go
index 3e3a01b58b1d..6ac05c60308f 100644
--- a/vendor/github.com/gotk3/gotk3/pango/pango-layout.go
+++ b/vendor/github.com/gotk3/gotk3/pango/pango-layout.go
@@ -22,6 +22,7 @@ package pango
 // #include "pango.go.h"
 import "C"
 import (
+	"runtime"
 	"unsafe"
 
 	"github.com/gotk3/gotk3/glib"
@@ -33,6 +34,7 @@ func init() {
 		{glib.Type(C.pango_alignment_get_type()), marshalAlignment},
 		{glib.Type(C.pango_ellipsize_mode_get_type()), marshalEllipsizeMode},
 		{glib.Type(C.pango_wrap_mode_get_type()), marshalWrapMode},
+		{glib.Type(C.pango_tab_align_get_type()), marshalTabAlign},
 
 		// Objects/Interfaces
 		//		{glib.Type(C.pango_layout_get_type()), marshalLayout},
@@ -51,6 +53,9 @@ func (v *Layout) Native() uintptr {
 }
 
 func (v *Layout) native() *C.PangoLayout {
+	if v == nil {
+		return nil
+	}
 	return (*C.PangoLayout)(unsafe.Pointer(v.pangoLayout))
 }
 
@@ -71,6 +76,9 @@ func (v *LayoutLine) Native() uintptr {
 }
 
 func (v *LayoutLine) native() *C.PangoLayoutLine {
+	if v == nil {
+		return nil
+	}
 	return (*C.PangoLayoutLine)(unsafe.Pointer(v.pangoLayoutLine))
 }
 
@@ -121,6 +129,17 @@ func marshalEllipsizeMode(p uintptr) (interface{}, error) {
 	return EllipsizeMode(c), nil
 }
 
+type TabAlign int
+
+const (
+	TAB_LEFT TabAlign = C.PANGO_TAB_LEFT
+)
+
+func marshalTabAlign(p uintptr) (interface{}, error) {
+	c := C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))
+	return TabAlign(c), nil
+}
+
 /*
 func marshalLayout(p uintptr) (interface{}, error) {
 	c := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
@@ -133,7 +152,7 @@ func wrapLayout(obj *glib.Object) *Layout {
 }
 */
 
-//PangoLayout *pango_layout_new            (PangoContext   *context);
+// LayoutNew is a wrapper around pango_layout_new().
 func LayoutNew(context *Context) *Layout {
 	c := C.pango_layout_new(context.native())
 
@@ -142,7 +161,7 @@ func LayoutNew(context *Context) *Layout {
 	return layout
 }
 
-//PangoLayout *pango_layout_copy           (PangoLayout    *src);
+// Copy is a wrapper around pango_layout_copy().
 func (v *Layout) Copy() *Layout {
 	c := C.pango_layout_copy(v.native())
 
@@ -151,7 +170,7 @@ func (v *Layout) Copy() *Layout {
 	return layout
 }
 
-//PangoContext  *pango_layout_get_context    (PangoLayout    *layout);
+// GetContext is a wrapper around pango_layout_get_context().
 func (v *Layout) GetContext() *Context {
 	c := C.pango_layout_get_context(v.native())
 
@@ -161,13 +180,12 @@ func (v *Layout) GetContext() *Context {
 	return context
 }
 
-//void           pango_layout_set_attributes (PangoLayout    *layout,
-//					    PangoAttrList  *attrs);
+// SetAttributes is a wrapper around pango_layout_set_attributes().
 func (v *Layout) SetAttributes(attrs *AttrList) {
 	C.pango_layout_set_attributes(v.native(), attrs.native())
 }
 
-//PangoAttrList *pango_layout_get_attributes (PangoLayout    *layout);
+// GetAttributes is a wrapper around pango_layout_get_attributes().
 func (v *Layout) GetAttributes() *AttrList {
 	c := C.pango_layout_get_attributes(v.native())
 
@@ -177,30 +195,26 @@ func (v *Layout) GetAttributes() *AttrList {
 	return attrList
 }
 
-//void           pango_layout_set_text       (PangoLayout    *layout,
-//					    const char     *text,
-//					    int             length);
+// SetText is a wrapper around pango_layout_set_text().
 func (v *Layout) SetText(text string, length int) {
 	cstr := C.CString(text)
 	defer C.free(unsafe.Pointer(cstr))
 	C.pango_layout_set_text(v.native(), (*C.char)(cstr), (C.int)(length))
 }
 
-//const char    *pango_layout_get_text       (PangoLayout    *layout);
+// GetText is a wrapper around pango_layout_get_text().
 func (v *Layout) GetText() string {
 	c := C.pango_layout_get_text(v.native())
 	return C.GoString((*C.char)(c))
 }
 
-//gint           pango_layout_get_character_count (PangoLayout *layout);
+// GetCharacterCount is a wrapper around pango_layout_get_character_count().
 func (v *Layout) GetCharacterCount() int {
 	c := C.pango_layout_get_character_count(v.native())
 	return int(c)
 }
 
-//void           pango_layout_set_markup     (PangoLayout    *layout,
-//					    const char     *markup,
-//					    int             length);
+// SetMarkup is a wrapper around pango_layout_set_markup().
 func (v *Layout) SetMarkup(text string, length int) {
 	cstr := C.CString(text)
 	defer C.free(unsafe.Pointer(cstr))
@@ -214,22 +228,19 @@ func (v *Layout) SetMarkup(text string, length int) {
 //						   gunichar       *accel_char);
 
 /*
-func (v *Layout)SetMarkupWithAccel (text string, length int, accel_marker, accel_char rune){
+func (v *Layout) SetMarkupWithAccel (text string, length int, accel_marker, accel_char rune){
 	cstr := C.CString(text)
 	defer C.free(unsafe.Pointer(cstr))
 	C.pango_layout_set_markup_with_accel (v.native(),  (*C.char)(cstr), (C.int)(length), (C.gunichar)(accel_marker), (C.gunichar)(accel_char) )
 }
 */
 
-//void           pango_layout_set_font_description (PangoLayout                *layout,
-//						  const PangoFontDescription *desc);
-
+// SetFontDescription is a wrapper around pango_layout_set_font_description().
 func (v *Layout) SetFontDescription(desc *FontDescription) {
 	C.pango_layout_set_font_description(v.native(), desc.native())
 }
 
-//const PangoFontDescription *pango_layout_get_font_description (PangoLayout *layout);
-
+// GetFontDescription is a wrapper around pango_layout_get_font_description().
 func (v *Layout) GetFontDescription() *FontDescription {
 	c := C.pango_layout_get_font_description(v.native())
 
@@ -239,69 +250,217 @@ func (v *Layout) GetFontDescription() *FontDescription {
 	return desc
 }
 
-//void           pango_layout_set_width            (PangoLayout                *layout,
-//						  int                         width);
-
+// SetWidth is a wrapper around pango_layout_set_width().
 func (v *Layout) SetWidth(width int) {
 	C.pango_layout_set_width(v.native(), C.int(width))
 }
 
-//int            pango_layout_get_width            (PangoLayout                *layout);
-
+// GetWidth is a wrapper around pango_layout_get_width().
 func (v *Layout) GetWidth() int {
 	c := C.pango_layout_get_width(v.native())
 	return int(c)
 }
 
-//void           pango_layout_set_height           (PangoLayout                *layout,
-//						  int                         height);
-
+// SetHeight is a wrapper around pango_layout_set_height().
 func (v *Layout) SetHeight(width int) {
 	C.pango_layout_set_height(v.native(), C.int(width))
 }
 
-//int            pango_layout_get_height           (PangoLayout                *layout);
-
+// GetHeight is a wrapper around pango_layout_get_height().
 func (v *Layout) GetHeight() int {
 	c := C.pango_layout_get_height(v.native())
 	return int(c)
 }
 
-//void           pango_layout_set_wrap             (PangoLayout                *layout,
-//						  PangoWrapMode               wrap);
-
+// SetWrap is a wrapper around pango_layout_set_wrap().
 func (v *Layout) SetWrap(wrap WrapMode) {
 	C.pango_layout_set_wrap(v.native(), C.PangoWrapMode(wrap))
 }
 
-//PangoWrapMode  pango_layout_get_wrap             (PangoLayout                *layout);
-
+// WrapMode is a wrapper around pango_layout_get_wrap().
 func (v *Layout) GetWrap() WrapMode {
 	c := C.pango_layout_get_wrap(v.native())
 	return WrapMode(c)
 }
 
-//gboolean       pango_layout_is_wrapped           (PangoLayout                *layout);
-
+// IsWrapped is a wrapper around pango_layout_is_wrapped().
 func (v *Layout) IsWrapped() bool {
 	c := C.pango_layout_is_wrapped(v.native())
 	return gobool(c)
 }
 
-//void           pango_layout_set_indent           (PangoLayout                *layout,
-//						  int                         indent);
-
+// SetIndent is a wrapper around pango_layout_set_indent().
 func (v *Layout) SetIndent(indent int) {
 	C.pango_layout_set_indent(v.native(), C.int(indent))
 }
 
-//int            pango_layout_get_indent           (PangoLayout                *layout);
-
+// GetIndent is a wrapper around pango_layout_get_indent().
 func (v *Layout) GetIndent() int {
 	c := C.pango_layout_get_indent(v.native())
 	return int(c)
 }
 
+// SetTabs is a wrapper around pango_layout_set_tabs().
+func (v *Layout) SetTabs(tabs *TabArray) {
+	C.pango_layout_set_tabs(v.native(), tabs.native())
+}
+
+// GetTabs is a wrapper around pango_layout_get_tabs().
+func (v *Layout) GetTabs() (*TabArray, error) {
+	c := C.pango_layout_get_tabs(v.native())
+	if c == nil {
+		return nil, nilPtrErr
+	}
+	ta := wrapTabArray(c)
+	runtime.SetFinalizer(ta, (*TabArray).free)
+	return ta, nil
+}
+
+// GetSize is a wrapper around pango_layout_get_size().
+func (v *Layout) GetSize() (int, int) {
+	var w, h C.int
+	C.pango_layout_get_size(v.native(), &w, &h)
+	return int(w), int(h)
+}
+
+/*
+ * TabArray
+ */
+
+// TabArray is a representation of PangoTabArray.
+type TabArray struct {
+	pangoTabArray *C.PangoTabArray
+}
+
+// Native returns a pointer to the underlying PangoTabArray.
+func (v *TabArray) Native() uintptr {
+	return uintptr(unsafe.Pointer(v.native()))
+}
+
+func (v *TabArray) native() *C.PangoTabArray {
+	if v == nil {
+		return nil
+	}
+	return (*C.PangoTabArray)(unsafe.Pointer(v.pangoTabArray))
+}
+
+func wrapTabArray(tabArray *C.PangoTabArray) *TabArray {
+	return &TabArray{tabArray}
+}
+
+func WrapTabArray(p uintptr) *TabArray {
+	tabArray := new(TabArray)
+	tabArray.pangoTabArray = (*C.PangoTabArray)(unsafe.Pointer(p))
+	return tabArray
+}
+
+// TabArrayNew is a wrapper around pango_tab_array_new().
+func TabArrayNew(initialSize int, positionsInPixels bool) *TabArray {
+	c := C.pango_tab_array_new(C.gint(initialSize), gbool(positionsInPixels))
+
+	tabArray := new(TabArray)
+	runtime.SetFinalizer(tabArray, (*TabArray).free)
+	tabArray.pangoTabArray = (*C.PangoTabArray)(c)
+	return tabArray
+}
+
+// TabArrayNewWithPositions is a wrapper around pango_tab_array_new_with_positions().
+// func TabArrayNewWithPositions(size int, positionsInPixels bool, ...) *TabArray {
+// 	c := C.pango_tab_array_new_with_positions(C.gint(size), gbool(positionsInPixels), ...)
+
+// 	tabArray := new(TabArray)
+//	runtime.SetFinalizer(e, (*TabArray).free)
+// 	tabArray.pangoTabArray = (*C.PangoTabArray)(c)
+// 	return tabArray
+// }
+
+// Copy is a wrapper around pango_tab_array_copy().
+func (v *TabArray) Copy() (*TabArray, error) {
+	c := C.pango_tab_array_copy(v.native())
+	if c == nil {
+		return nil, nilPtrErr
+	}
+	ta := wrapTabArray(c)
+	runtime.SetFinalizer(ta, (*TabArray).free)
+	return ta, nil
+}
+
+// free is a wrapper around pango_tab_array_free().
+func (v *TabArray) free() {
+	C.pango_tab_array_free(v.native())
+}
+
+// free is a wrapper around pango_tab_array_free().
+// This is only to enable other packages within gotk. Should not be used outside the gotk library.
+func (v *TabArray) Free() {
+	C.pango_tab_array_free(v.native())
+}
+
+// GetSize is a wrapper around pango_tab_array_get_size().
+func (v *TabArray) GetSize() int {
+	return int(C.pango_tab_array_get_size(v.native()))
+}
+
+// Resize is a wrapper around pango_tab_array_resize().
+func (v *TabArray) Resize(newSize int) {
+	C.pango_tab_array_resize(v.native(), C.gint(newSize))
+}
+
+// SetTab is a wrapper around pango_tab_array_set_tab().
+func (v *TabArray) SetTab(tabIndex int, alignment TabAlign, location int) {
+	C.pango_tab_array_set_tab(v.native(), C.gint(tabIndex), C.PangoTabAlign(alignment), C.gint(location))
+}
+
+// GetTab is a wrapper around pango_tab_array_get_tab().
+func (v *TabArray) GetTab(tabIndex int) (TabAlign, int) {
+	var alignment C.PangoTabAlign
+	var location C.gint
+	C.pango_tab_array_get_tab(v.native(), C.gint(tabIndex), &alignment, &location)
+	return TabAlign(alignment), int(location)
+}
+
+// GetTabs is a wrapper around pango_tab_array_get_tabs().
+// func (v *TabArray) GetTabs() ([]TabAlign, []int) {
+// 	var alignment *C.PangoTabAlign
+// 	var location *C.gint
+
+// 	C.pango_tab_array_get_tabs(v.native(), &alignment, &location)
+
+// 	size := v.GetSize()
+
+// 	var goAlignments []TabAlign
+// 	var goLocations []int
+
+// 	if &alignment != nil {
+// 		var ginthelp C.gint
+// 		sizeOf := unsafe.Sizeof(ginthelp)
+// 		for i := 0; i < int(size); i++ {
+// 			goAlignmentElement := TabAlign(*((*C.gint)(unsafe.Pointer(location))))
+// 			goAlignments = append(goAlignments, goAlignmentElement)
+// 			location += sizeOf
+// 		}
+// 	}
+
+// 	if &location != nil {
+// 		var ginthelp C.gint
+// 		sizeOf := unsafe.Sizeof(ginthelp)
+// 		for i := 0; i < int(size); i++ {
+// 			goLocationElement := int(*((*C.gint)(unsafe.Pointer(location))))
+// 			goLocations = append(goLocations, goLocationElement)
+// 			location += sizeOf
+// 		}
+
+// 		// TODO: free locations
+// 	}
+
+// 	return goAlignments, goLocations
+// }
+
+// GetPositionsInPixels is a wrapper around pango_tab_array_get_positions_in_pixels().
+func (v *TabArray) GetPositionsInPixels() bool {
+	return gobool(C.pango_tab_array_get_positions_in_pixels(v.native()))
+}
+
 //void           pango_layout_set_spacing          (PangoLayout                *layout,
 //						  int                         spacing);
 //int            pango_layout_get_spacing          (PangoLayout                *layout);
@@ -315,11 +474,6 @@ func (v *Layout) GetIndent() int {
 //						  PangoAlignment              alignment);
 //PangoAlignment pango_layout_get_alignment        (PangoLayout                *layout);
 //
-//void           pango_layout_set_tabs             (PangoLayout                *layout,
-//						  PangoTabArray              *tabs);
-//
-//PangoTabArray* pango_layout_get_tabs             (PangoLayout                *layout);
-//
 //void           pango_layout_set_single_paragraph_mode (PangoLayout                *layout,
 //						       gboolean                    setting);
 //gboolean       pango_layout_get_single_paragraph_mode (PangoLayout                *layout);
@@ -371,16 +525,6 @@ func (v *Layout) GetIndent() int {
 //void     pango_layout_get_pixel_extents    (PangoLayout    *layout,
 //					    PangoRectangle *ink_rect,
 //					    PangoRectangle *logical_rect);
-
-//void     pango_layout_get_size             (PangoLayout    *layout,
-//					    int            *width,
-//					    int            *height);
-func (v *Layout) GetSize() (int, int) {
-	var w, h C.int
-	C.pango_layout_get_size(v.native(), &w, &h)
-	return int(w), int(h)
-}
-
 //void     pango_layout_get_pixel_size       (PangoLayout    *layout,
 //					    int            *width,
 //					    int            *height);
diff --git a/vendor/github.com/gotk3/gotk3/pango/pango-layout.go.h b/vendor/github.com/gotk3/gotk3/pango/pango-layout.go.h
index 0f4e2fdd5131..8aa70b206d33 100644
--- a/vendor/github.com/gotk3/gotk3/pango/pango-layout.go.h
+++ b/vendor/github.com/gotk3/gotk3/pango/pango-layout.go.h
@@ -20,8 +20,4 @@
 #include <stdlib.h>
 #include <string.h>
 
-static PangoLayout* toPangoLayout(void *p)
-{
-	return ( (PangoLayout*) (p) );
-}
-
+static PangoLayout *toPangoLayout(void *p) { return ((PangoLayout *)(p)); }
diff --git a/vendor/github.com/gotk3/gotk3/pango/pango.go b/vendor/github.com/gotk3/gotk3/pango/pango.go
index 2ed754f513d3..4745ec1f8a94 100644
--- a/vendor/github.com/gotk3/gotk3/pango/pango.go
+++ b/vendor/github.com/gotk3/gotk3/pango/pango.go
@@ -21,6 +21,7 @@ package pango
 // #include <pango/pango.h>
 // #include "pango.go.h"
 import "C"
+import "errors"
 
 //	"github.com/andre-hub/gotk3/glib"
 //	"unsafe"
@@ -46,6 +47,12 @@ func gobool(b C.gboolean) bool {
 	return false
 }
 
+/*
+ * Unexported vars
+ */
+
+var nilPtrErr = errors.New("cgo returned unexpected nil pointer")
+
 /*
  * Constantes
  */
diff --git a/vendor/github.com/gotk3/gotk3/pango/pango.go.h b/vendor/github.com/gotk3/gotk3/pango/pango.go.h
index a5fb61da9fd9..68e4159cba01 100644
--- a/vendor/github.com/gotk3/gotk3/pango/pango.go.h
+++ b/vendor/github.com/gotk3/gotk3/pango/pango.go.h
@@ -25,14 +25,12 @@
 
 #include "pangocairo.go.h"
 
-
-static PangoRectangle *
-createPangoRectangle(int x, int y, int width, int height)
-{
-	PangoRectangle *r = (PangoRectangle *)malloc(sizeof(PangoRectangle));
-	r->x = x;
-	r->y = y;
-	r->width = width;
-	r->height = height;
-	return r;
+static PangoRectangle *createPangoRectangle(int x, int y, int width,
+                                            int height) {
+  PangoRectangle *r = (PangoRectangle *)malloc(sizeof(PangoRectangle));
+  r->x = x;
+  r->y = y;
+  r->width = width;
+  r->height = height;
+  return r;
 }
\ No newline at end of file
diff --git a/vendor/modules.txt b/vendor/modules.txt
index f577fe16310c..bbdc768dcdf0 100644
--- a/vendor/modules.txt
+++ b/vendor/modules.txt
@@ -13,11 +13,14 @@ github.com/coreos/go-systemd/v22/dbus
 github.com/digitalocean/go-smbios/smbios
 # github.com/godbus/dbus/v5 v5.0.3
 github.com/godbus/dbus/v5
-# github.com/gotk3/gotk3 v0.4.0
+# github.com/gotk3/gotk3 v0.6.0
 github.com/gotk3/gotk3/cairo
 github.com/gotk3/gotk3/gdk
 github.com/gotk3/gotk3/glib
 github.com/gotk3/gotk3/gtk
+github.com/gotk3/gotk3/internal/callback
+github.com/gotk3/gotk3/internal/closure
+github.com/gotk3/gotk3/internal/slab
 github.com/gotk3/gotk3/pango
 # github.com/huandu/xstrings v1.3.0
 github.com/huandu/xstrings
-- 
2.32.0

